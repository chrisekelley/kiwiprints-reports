{
  "docs": [
    {
      "_attachments": {
        "css/index.css": {
          "data": "Lmp1bWJvdHJvbiB7CiAgICBwYWRkaW5nOiA1cHggNXB4OwogICAgbWFyZ2luLWJvdHRvbTogMTBweDsKICAgIGNvbG9yOiBpbmhlcml0OwogICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjsKfQp0YWJsZSwgdGgsIHRkIHsKICAgIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrOwp9CnRkLCB0aCB7CiAgICBwYWRkaW5nOiA1cHggNXB4IDVweCA1cHg7Cn0KCi5jb250YWluZXIgewogICAgbWFyZ2luLWxlZnQ6IDVweDsKfQoKLmp1bWJvdHJvbiBoMSwgLmp1bWJvdHJvbiAuaDEgewogICAgZm9udC1zaXplOiAzNnB4Owp9CgouanVtYm90cm9uIGxpIHsKICAgIGZvbnQtc2l6ZTogMThweDsKfQo=",
          "content_type": "text/css"
        },
        "index.html": {
          "data": "PCFET0NUWVBFIGh0bWw+CjxodG1sPgo8aGVhZCBsYW5nPSJlbiI+CiAgICA8bWV0YSBjaGFyc2V0PSJVVEYtOCI+CiAgICA8dGl0bGU+S2l3aVByaW50cyBSZXBvcnRzPC90aXRsZT4KICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiIGhyZWY9ImNzcy9ib290c3RyYXAuY3NzIj4KICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiIGhyZWY9ImNzcy9pbmRleC5jc3MiPgogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0ianMvanF1ZXJ5Lm1pbi5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJqcy9ib290c3RyYXAubWluLmpzIj48L3NjcmlwdD4KPC9oZWFkPgo8Ym9keT4KCjxkaXYgY2xhc3M9ImNvbnRhaW5lciIgZGF0YS1yb2xlPSdwYWdlJz4KICAgIDwhLS08ZGl2IGlkPSJjb250ZW50IiA+LS0+CiAgICA8ZGl2IGRhdGEtcm9sZT0naGVhZGVyJyBpZD0iaGVhZGVyIj48L2Rpdj4KICAgIDxkaXYgaWQ9ImxvZ28iPjxpbWcgc3JjPSJpbWFnZXMvS2l3aVByaW50cy10cmFuc3BhcmVudC5wbmciLz48L2Rpdj4KICAgIDwhLS0gRml4ZWQgbmF2YmFyIC0tPgoKICAgIDxkaXYgZGF0YS1yb2xlPSdjb250ZW50JyBjbGFzcz0iYXBwIGp1bWJvdHJvbiIgaWQ9ImNvbnRlbnQiPgogICAgICAgIDxoMT5LaXdpUHJpbnRzIFJlcG9ydHM8L2gxPgogICAgICAgIDx1bD4KICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9jb2NvbnV0LW1vei0yMDE1LXJlcG9ydHMvX2Rlc2lnbi9yZXBvcnRzL19saXN0L3N1bW1hcmllcy9ieUFsbEluZGljYXRvcnM/Z3JvdXA9dHJ1ZSI+U3VtbWFyeTwvYT48L2xpPgogICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2NvY29udXQtbW96LTIwMTUtcmVwb3J0cy9fZGVzaWduL2FwcC9fbGlzdC90YWJsZS9ieUludmlkQW5kVHJpY2hpYXNpc0pvaW5lZCI+QWxsIEluZGljYXRvcnMgdGFibGU8L2E+PC9saT4KICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9jb2NvbnV0LW1vei0yMDE1LXJlcG9ydHMvX2Rlc2lnbi9yZXBvcnRzL19saXN0L2Nzdi9ieUludmlkQW5kVHJpY2hpYXNpc0pvaW5lZCI+Q1NWPC9hPjwvbGk+CiAgICAgICAgPC91bD4KICAgIDwvZGl2PgogICAgPGRpdiBpZD0nbG9nJz48L2Rpdj4KICAgIDwhLS08ZGl2IGRhdGEtcm9sZT0nZm9vdGVyJz4tLT4KICAgIDwhLS08ZGl2IGNsYXNzPSdxdWVzdGlvbi1idXR0b25zJyBpZD0iYm90dG9tLW1lbnUiPjwvZGl2Pi0tPgogICAgPCEtLTxkaXYgc3R5bGU9J3BhZGRpbmctdG9wOjUwcHg7cGFkZGluZy1ib3R0b206NTBweCcgaWQ9ImZvb3Rlci1tZW51Ij48L2Rpdj4tLT4KPC9kaXY+CjwvYm9keT4KPC9odG1sPgo=",
          "content_type": "text/html"
        },
        "js/KiwiUtils.js": {
          "data": "aWYgKHR5cGVvZiB3aW5kb3cuS2l3aVV0aWxzID09PSAidW5kZWZpbmVkIiB8fCB3aW5kb3cuS2l3aVV0aWxzID09PSBudWxsKSB7CiAgd2luZG93Lktpd2lVdGlscyA9IHt9Owp9CgpLaXdpVXRpbHMuZ2VvY29kZXJEZWxheSA9IDUwMDsKCktpd2lVdGlscy5uZXh0QWRkcmVzcyA9IDA7CgpLaXdpVXRpbHMuZ2VvY29kZXIgPSBuZXcgZ29vZ2xlLm1hcHMuR2VvY29kZXIoKTsKCktpd2lVdGlscy5jYWNoZSA9IHt9OwoKS2l3aVV0aWxzLmdldENpdHkgPSBmdW5jdGlvbihzZWFyY2gsIG5leHQpIHsKICB2YXIgY2l0eSwgY2l0eUVsLCBnZW9jb2RlciwgaWQsIGtleSwgbGF0aXR1ZGUsIGxhdGxuZywgbG9uZ2l0dWRlOwogIGNpdHkgPSAiIjsKICBpZiAodHlwZW9mIHNlYXJjaCA9PT0gJ3VuZGVmaW5lZCcpIHsKICAgIHJldHVybiBjb25zb2xlLmxvZygiRW1wdHkgc2VhcmNoIik7CiAgfSBlbHNlIHsKICAgIGxhdGl0dWRlID0gc2VhcmNoLmxhdGl0dWRlOwogICAgbG9uZ2l0dWRlID0gc2VhcmNoLmxvbmdpdHVkZTsKICAgIGlkID0gc2VhcmNoLmlkOwogICAgZ2VvY29kZXIgPSBLaXdpVXRpbHMuZ2VvY29kZXI7CiAgICBrZXkgPSBsYXRpdHVkZSArICcnICsgbG9uZ2l0dWRlOwogICAgaWYgKEtpd2lVdGlscy5jYWNoZS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7CiAgICAgIGNpdHkgPSBLaXdpVXRpbHMuY2FjaGVba2V5XTsKICAgICAgY29uc29sZS5sb2coImNhY2hlZCBjaXR5OiAiICsgY2l0eSArICIgS2l3aVV0aWxzLmdlb2NvZGVyRGVsYXk6ICIgKyBLaXdpVXRpbHMuZ2VvY29kZXJEZWxheSArICIgS2l3aVV0aWxzLm5leHRBZGRyZXNzOiAiICsgS2l3aVV0aWxzLm5leHRBZGRyZXNzKTsKICAgICAgY2l0eUVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImNpdHkiICsgaWQpOwogICAgICBjaXR5RWwuaW5uZXJIVE1MID0gY2l0eTsKICAgICAgcmV0dXJuIG5leHQoKTsKICAgIH0gZWxzZSB7CiAgICAgIGxhdGxuZyA9IG5ldyBnb29nbGUubWFwcy5MYXRMbmcobGF0aXR1ZGUsIGxvbmdpdHVkZSk7CiAgICAgIHJldHVybiBnZW9jb2Rlci5nZW9jb2RlKHsKICAgICAgICAnbGF0TG5nJzogbGF0bG5nCiAgICAgIH0sIGZ1bmN0aW9uKHJlc3VsdHMsIHN0YXR1cykgewogICAgICAgIHZhciBhZGQ7CiAgICAgICAgaWYgKHN0YXR1cyA9PT0gZ29vZ2xlLm1hcHMuR2VvY29kZXJTdGF0dXMuT0spIHsKICAgICAgICAgIGlmIChyZXN1bHRzWzBdKSB7CiAgICAgICAgICAgIGFkZCA9IHJlc3VsdHNbMF0uZm9ybWF0dGVkX2FkZHJlc3M7CiAgICAgICAgICAgIGNpdHkgPSBhZGQ7CiAgICAgICAgICAgIEtpd2lVdGlscy5jYWNoZVtrZXldID0gY2l0eTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGNpdHkgPSAiYWRkcmVzcyBub3QgZm91bmQiOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBjb25zb2xlLmxvZygiR2VvY29kZXIgZmFpbGVkIGR1ZSB0bzogIiArIHN0YXR1cyk7CiAgICAgICAgICBpZiAoc3RhdHVzID09PSBnb29nbGUubWFwcy5HZW9jb2RlclN0YXR1cy5PVkVSX1FVRVJZX0xJTUlUKSB7CiAgICAgICAgICAgIEtpd2lVdGlscy5uZXh0QWRkcmVzcyA9IEtpd2lVdGlscy5uZXh0QWRkcmVzcyAtIDE7CiAgICAgICAgICAgIEtpd2lVdGlscy5nZW9jb2RlckRlbGF5ID0gS2l3aVV0aWxzLmdlb2NvZGVyRGVsYXkgKyAxMDA7CiAgICAgICAgICAgIGNpdHkgPSAiT3ZlciBRdWVyeSBMaW1pdDsgcmV0cnlpbmcuIjsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgY29uc29sZS5sb2coImNpdHk6ICIgKyBjaXR5ICsgIiBLaXdpVXRpbHMuZ2VvY29kZXJEZWxheTogIiArIEtpd2lVdGlscy5nZW9jb2RlckRlbGF5ICsgIiBLaXdpVXRpbHMubmV4dEFkZHJlc3M6ICIgKyBLaXdpVXRpbHMubmV4dEFkZHJlc3MpOwogICAgICAgIGNpdHlFbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJjaXR5IiArIGlkKTsKICAgICAgICBjaXR5RWwuaW5uZXJIVE1MID0gY2l0eTsKICAgICAgICByZXR1cm4gbmV4dCgpOwogICAgICB9KTsKICAgIH0KICB9Cn07CgpLaXdpVXRpbHMuaW5pdEdQUyA9IGZ1bmN0aW9uKGdwc0xpc3QpIHsKICBLaXdpVXRpbHMuZ3BzTGlzdCA9IGdwc0xpc3Q7CiAgcmV0dXJuIEtpd2lVdGlscy5wcm9jZXNzR1BTKCk7Cn07CgpLaXdpVXRpbHMucHJvY2Vzc0dQUyA9IGZ1bmN0aW9uKCkgewogIHZhciBuZXh0QWRkeTsKICBpZiAoS2l3aVV0aWxzLm5leHRBZGRyZXNzIDwgS2l3aVV0aWxzLmdwc0xpc3RbMF0ubGVuZ3RoKSB7CiAgICBuZXh0QWRkeSA9IEtpd2lVdGlscy5uZXh0QWRkcmVzczsKICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiBLaXdpVXRpbHMuZ2V0Q2l0eShLaXdpVXRpbHMuZ3BzTGlzdFswXVtuZXh0QWRkeV0sIEtpd2lVdGlscy5wcm9jZXNzR1BTKTsKICAgIH0sIEtpd2lVdGlscy5nZW9jb2RlckRlbGF5KTsKICAgIHJldHVybiBLaXdpVXRpbHMubmV4dEFkZHJlc3MrKzsKICB9Cn07Cg==",
          "content_type": "application/javascript"
        },
        "css/bootstrap.css": {
          "data": "",
          "content_type": "text/css"
        },
        "images/KiwiPrints-transparent.png": {
          "data": "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",
          "content_type": "image/png"
        },
        "css/bootstrap.css.map": {
          "data": "",
          "content_type": "application/octet-stream"
        },
        "js/jquery.min.js": {
          "data": "",
          "content_type": "application/javascript"
        },
        "js/bootstrap.min.js": {
          "data": "",
          "content_type": "application/javascript"
        },
        "js/version.js": {
          "data": "d2luZG93LlRhbmdlcmluZSA9IHsgYnVpbGRWZXJzaW9uIDogImU0YmJiNjEiLCB2ZXJzaW9uIDogInYwLjEtMS1nZTRiYmI2MSJ9Ow==",
          "content_type": "application/javascript"
        },
        "js/jquery.min.map": {
          "data": "eyJ2ZXJzaW9uIjozLCJmaWxlIjoianF1ZXJ5Lm1pbi5qcyIsInNvdXJjZXMiOlsianF1ZXJ5LmpzIl0sIm5hbWVzIjpbImdsb2JhbCIsImZhY3RvcnkiLCJtb2R1bGUiLCJleHBvcnRzIiwiZG9jdW1lbnQiLCJ3IiwiRXJyb3IiLCJ3aW5kb3ciLCJ0aGlzIiwibm9HbG9iYWwiLCJhcnIiLCJzbGljZSIsImNvbmNhdCIsInB1c2giLCJpbmRleE9mIiwiY2xhc3MydHlwZSIsInRvU3RyaW5nIiwiaGFzT3duIiwiaGFzT3duUHJvcGVydHkiLCJzdXBwb3J0IiwidmVyc2lvbiIsImpRdWVyeSIsInNlbGVjdG9yIiwiY29udGV4dCIsImZuIiwiaW5pdCIsInJ0cmltIiwicm1zUHJlZml4IiwicmRhc2hBbHBoYSIsImZjYW1lbENhc2UiLCJhbGwiLCJsZXR0ZXIiLCJ0b1VwcGVyQ2FzZSIsInByb3RvdHlwZSIsImpxdWVyeSIsImNvbnN0cnVjdG9yIiwibGVuZ3RoIiwidG9BcnJheSIsImNhbGwiLCJnZXQiLCJudW0iLCJwdXNoU3RhY2siLCJlbGVtcyIsInJldCIsIm1lcmdlIiwicHJldk9iamVjdCIsImVhY2giLCJjYWxsYmFjayIsImFyZ3MiLCJtYXAiLCJlbGVtIiwiaSIsImFwcGx5IiwiYXJndW1lbnRzIiwiZmlyc3QiLCJlcSIsImxhc3QiLCJsZW4iLCJqIiwiZW5kIiwic29ydCIsInNwbGljZSIsImV4dGVuZCIsIm9wdGlvbnMiLCJuYW1lIiwic3JjIiwiY29weSIsImNvcHlJc0FycmF5IiwiY2xvbmUiLCJ0YXJnZXQiLCJkZWVwIiwiaXNGdW5jdGlvbiIsImlzUGxhaW5PYmplY3QiLCJpc0FycmF5IiwidW5kZWZpbmVkIiwiZXhwYW5kbyIsIk1hdGgiLCJyYW5kb20iLCJyZXBsYWNlIiwiaXNSZWFkeSIsImVycm9yIiwibXNnIiwibm9vcCIsIm9iaiIsInR5cGUiLCJBcnJheSIsImlzV2luZG93IiwiaXNOdW1lcmljIiwicGFyc2VGbG9hdCIsIm5vZGVUeXBlIiwiaXNFbXB0eU9iamVjdCIsImdsb2JhbEV2YWwiLCJjb2RlIiwic2NyaXB0IiwiaW5kaXJlY3QiLCJldmFsIiwidHJpbSIsImNyZWF0ZUVsZW1lbnQiLCJ0ZXh0IiwiaGVhZCIsImFwcGVuZENoaWxkIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiY2FtZWxDYXNlIiwic3RyaW5nIiwibm9kZU5hbWUiLCJ0b0xvd2VyQ2FzZSIsInZhbHVlIiwiaXNBcnJheWxpa2UiLCJtYWtlQXJyYXkiLCJyZXN1bHRzIiwiT2JqZWN0IiwiaW5BcnJheSIsInNlY29uZCIsImdyZXAiLCJpbnZlcnQiLCJjYWxsYmFja0ludmVyc2UiLCJtYXRjaGVzIiwiY2FsbGJhY2tFeHBlY3QiLCJhcmciLCJndWlkIiwicHJveHkiLCJ0bXAiLCJub3ciLCJEYXRlIiwic3BsaXQiLCJTaXp6bGUiLCJFeHByIiwiZ2V0VGV4dCIsImlzWE1MIiwidG9rZW5pemUiLCJjb21waWxlIiwic2VsZWN0Iiwib3V0ZXJtb3N0Q29udGV4dCIsInNvcnRJbnB1dCIsImhhc0R1cGxpY2F0ZSIsInNldERvY3VtZW50IiwiZG9jRWxlbSIsImRvY3VtZW50SXNIVE1MIiwicmJ1Z2d5UVNBIiwicmJ1Z2d5TWF0Y2hlcyIsImNvbnRhaW5zIiwicHJlZmVycmVkRG9jIiwiZGlycnVucyIsImRvbmUiLCJjbGFzc0NhY2hlIiwiY3JlYXRlQ2FjaGUiLCJ0b2tlbkNhY2hlIiwiY29tcGlsZXJDYWNoZSIsInNvcnRPcmRlciIsImEiLCJiIiwiTUFYX05FR0FUSVZFIiwicG9wIiwicHVzaF9uYXRpdmUiLCJsaXN0IiwiYm9vbGVhbnMiLCJ3aGl0ZXNwYWNlIiwiY2hhcmFjdGVyRW5jb2RpbmciLCJpZGVudGlmaWVyIiwiYXR0cmlidXRlcyIsInBzZXVkb3MiLCJyd2hpdGVzcGFjZSIsIlJlZ0V4cCIsInJjb21tYSIsInJjb21iaW5hdG9ycyIsInJhdHRyaWJ1dGVRdW90ZXMiLCJycHNldWRvIiwicmlkZW50aWZpZXIiLCJtYXRjaEV4cHIiLCJJRCIsIkNMQVNTIiwiVEFHIiwiQVRUUiIsIlBTRVVETyIsIkNISUxEIiwiYm9vbCIsIm5lZWRzQ29udGV4dCIsInJpbnB1dHMiLCJyaGVhZGVyIiwicm5hdGl2ZSIsInJxdWlja0V4cHIiLCJyc2libGluZyIsInJlc2NhcGUiLCJydW5lc2NhcGUiLCJmdW5lc2NhcGUiLCJfIiwiZXNjYXBlZCIsImVzY2FwZWRXaGl0ZXNwYWNlIiwiaGlnaCIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsInVubG9hZEhhbmRsZXIiLCJjaGlsZE5vZGVzIiwiZSIsImVscyIsInNlZWQiLCJtYXRjaCIsIm0iLCJncm91cHMiLCJvbGQiLCJuaWQiLCJuZXdDb250ZXh0IiwibmV3U2VsZWN0b3IiLCJvd25lckRvY3VtZW50IiwiZXhlYyIsImdldEVsZW1lbnRCeUlkIiwiaWQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJxc2EiLCJ0ZXN0IiwiZ2V0QXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwidG9TZWxlY3RvciIsInRlc3RDb250ZXh0Iiwiam9pbiIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJxc2FFcnJvciIsInJlbW92ZUF0dHJpYnV0ZSIsImtleXMiLCJjYWNoZSIsImtleSIsImNhY2hlTGVuZ3RoIiwic2hpZnQiLCJtYXJrRnVuY3Rpb24iLCJhc3NlcnQiLCJkaXYiLCJhZGRIYW5kbGUiLCJhdHRycyIsImhhbmRsZXIiLCJhdHRySGFuZGxlIiwic2libGluZ0NoZWNrIiwiY3VyIiwiZGlmZiIsInNvdXJjZUluZGV4IiwibmV4dFNpYmxpbmciLCJjcmVhdGVJbnB1dFBzZXVkbyIsImNyZWF0ZUJ1dHRvblBzZXVkbyIsImNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8iLCJhcmd1bWVudCIsIm1hdGNoSW5kZXhlcyIsImRvY3VtZW50RWxlbWVudCIsIm5vZGUiLCJoYXNDb21wYXJlIiwicGFyZW50IiwiZG9jIiwiZGVmYXVsdFZpZXciLCJ0b3AiLCJhZGRFdmVudExpc3RlbmVyIiwiYXR0YWNoRXZlbnQiLCJjbGFzc05hbWUiLCJjcmVhdGVDb21tZW50IiwiZ2V0QnlJZCIsImdldEVsZW1lbnRzQnlOYW1lIiwiZmluZCIsImZpbHRlciIsImF0dHJJZCIsImdldEF0dHJpYnV0ZU5vZGUiLCJ0YWciLCJpbm5lckhUTUwiLCJpbnB1dCIsIm1hdGNoZXNTZWxlY3RvciIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm1vek1hdGNoZXNTZWxlY3RvciIsIm9NYXRjaGVzU2VsZWN0b3IiLCJtc01hdGNoZXNTZWxlY3RvciIsImRpc2Nvbm5lY3RlZE1hdGNoIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJhZG93biIsImJ1cCIsImNvbXBhcmUiLCJzb3J0RGV0YWNoZWQiLCJhdXAiLCJhcCIsImJwIiwidW5zaGlmdCIsImV4cHIiLCJlbGVtZW50cyIsImF0dHIiLCJ2YWwiLCJzcGVjaWZpZWQiLCJ1bmlxdWVTb3J0IiwiZHVwbGljYXRlcyIsImRldGVjdER1cGxpY2F0ZXMiLCJzb3J0U3RhYmxlIiwidGV4dENvbnRlbnQiLCJmaXJzdENoaWxkIiwibm9kZVZhbHVlIiwic2VsZWN0b3JzIiwiY3JlYXRlUHNldWRvIiwicmVsYXRpdmUiLCI+IiwiZGlyIiwiICIsIisiLCJ+IiwicHJlRmlsdGVyIiwiZXhjZXNzIiwidW5xdW90ZWQiLCJub2RlTmFtZVNlbGVjdG9yIiwicGF0dGVybiIsIm9wZXJhdG9yIiwiY2hlY2siLCJyZXN1bHQiLCJ3aGF0Iiwic2ltcGxlIiwiZm9yd2FyZCIsIm9mVHlwZSIsInhtbCIsIm91dGVyQ2FjaGUiLCJub2RlSW5kZXgiLCJzdGFydCIsInVzZUNhY2hlIiwibGFzdENoaWxkIiwicHNldWRvIiwic2V0RmlsdGVycyIsImlkeCIsIm1hdGNoZWQiLCJub3QiLCJtYXRjaGVyIiwidW5tYXRjaGVkIiwiaGFzIiwiaW5uZXJUZXh0IiwibGFuZyIsImVsZW1MYW5nIiwiaGFzaCIsImxvY2F0aW9uIiwicm9vdCIsImZvY3VzIiwiYWN0aXZlRWxlbWVudCIsImhhc0ZvY3VzIiwiaHJlZiIsInRhYkluZGV4IiwiZW5hYmxlZCIsImRpc2FibGVkIiwiY2hlY2tlZCIsInNlbGVjdGVkIiwic2VsZWN0ZWRJbmRleCIsImVtcHR5IiwiaGVhZGVyIiwiYnV0dG9uIiwiZXZlbiIsIm9kZCIsImx0IiwiZ3QiLCJyYWRpbyIsImNoZWNrYm94IiwiZmlsZSIsInBhc3N3b3JkIiwiaW1hZ2UiLCJzdWJtaXQiLCJyZXNldCIsImZpbHRlcnMiLCJwYXJzZU9ubHkiLCJ0b2tlbnMiLCJzb0ZhciIsInByZUZpbHRlcnMiLCJjYWNoZWQiLCJhZGRDb21iaW5hdG9yIiwiY29tYmluYXRvciIsImJhc2UiLCJjaGVja05vbkVsZW1lbnRzIiwiZG9uZU5hbWUiLCJvbGRDYWNoZSIsIm5ld0NhY2hlIiwiZWxlbWVudE1hdGNoZXIiLCJtYXRjaGVycyIsIm11bHRpcGxlQ29udGV4dHMiLCJjb250ZXh0cyIsImNvbmRlbnNlIiwibmV3VW5tYXRjaGVkIiwibWFwcGVkIiwic2V0TWF0Y2hlciIsInBvc3RGaWx0ZXIiLCJwb3N0RmluZGVyIiwicG9zdFNlbGVjdG9yIiwidGVtcCIsInByZU1hcCIsInBvc3RNYXAiLCJwcmVleGlzdGluZyIsIm1hdGNoZXJJbiIsIm1hdGNoZXJPdXQiLCJtYXRjaGVyRnJvbVRva2VucyIsImNoZWNrQ29udGV4dCIsImxlYWRpbmdSZWxhdGl2ZSIsImltcGxpY2l0UmVsYXRpdmUiLCJtYXRjaENvbnRleHQiLCJtYXRjaEFueUNvbnRleHQiLCJtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMiLCJlbGVtZW50TWF0Y2hlcnMiLCJzZXRNYXRjaGVycyIsImJ5U2V0IiwiYnlFbGVtZW50Iiwic3VwZXJNYXRjaGVyIiwib3V0ZXJtb3N0IiwibWF0Y2hlZENvdW50Iiwic2V0TWF0Y2hlZCIsImNvbnRleHRCYWNrdXAiLCJkaXJydW5zVW5pcXVlIiwidG9rZW4iLCJjb21waWxlZCIsImRpdjEiLCJkZWZhdWx0VmFsdWUiLCJ1bmlxdWUiLCJpc1hNTERvYyIsInJuZWVkc0NvbnRleHQiLCJyc2luZ2xlVGFnIiwicmlzU2ltcGxlIiwid2lubm93IiwicXVhbGlmaWVyIiwic2VsZiIsImlzIiwicm9vdGpRdWVyeSIsInBhcnNlSFRNTCIsInJlYWR5IiwicnBhcmVudHNwcmV2IiwiZ3VhcmFudGVlZFVuaXF1ZSIsImNoaWxkcmVuIiwiY29udGVudHMiLCJuZXh0IiwicHJldiIsInVudGlsIiwidHJ1bmNhdGUiLCJzaWJsaW5nIiwibiIsInRhcmdldHMiLCJsIiwiY2xvc2VzdCIsInBvcyIsImluZGV4IiwicHJldkFsbCIsImFkZCIsImFkZEJhY2siLCJwYXJlbnRzIiwicGFyZW50c1VudGlsIiwibmV4dEFsbCIsIm5leHRVbnRpbCIsInByZXZVbnRpbCIsInNpYmxpbmdzIiwiY29udGVudERvY3VtZW50IiwicmV2ZXJzZSIsInJub3R3aGl0ZSIsIm9wdGlvbnNDYWNoZSIsImNyZWF0ZU9wdGlvbnMiLCJvYmplY3QiLCJmbGFnIiwiQ2FsbGJhY2tzIiwibWVtb3J5IiwiZmlyZWQiLCJmaXJpbmciLCJmaXJpbmdTdGFydCIsImZpcmluZ0xlbmd0aCIsImZpcmluZ0luZGV4Iiwic3RhY2siLCJvbmNlIiwiZmlyZSIsImRhdGEiLCJzdG9wT25GYWxzZSIsImRpc2FibGUiLCJyZW1vdmUiLCJsb2NrIiwibG9ja2VkIiwiZmlyZVdpdGgiLCJEZWZlcnJlZCIsImZ1bmMiLCJ0dXBsZXMiLCJzdGF0ZSIsInByb21pc2UiLCJhbHdheXMiLCJkZWZlcnJlZCIsImZhaWwiLCJ0aGVuIiwiZm5zIiwibmV3RGVmZXIiLCJ0dXBsZSIsInJldHVybmVkIiwicmVzb2x2ZSIsInJlamVjdCIsInByb2dyZXNzIiwibm90aWZ5IiwicGlwZSIsInN0YXRlU3RyaW5nIiwid2hlbiIsInN1Ym9yZGluYXRlIiwicmVzb2x2ZVZhbHVlcyIsInJlbWFpbmluZyIsInVwZGF0ZUZ1bmMiLCJ2YWx1ZXMiLCJwcm9ncmVzc1ZhbHVlcyIsIm5vdGlmeVdpdGgiLCJyZXNvbHZlV2l0aCIsInByb2dyZXNzQ29udGV4dHMiLCJyZXNvbHZlQ29udGV4dHMiLCJyZWFkeUxpc3QiLCJyZWFkeVdhaXQiLCJob2xkUmVhZHkiLCJob2xkIiwid2FpdCIsInRyaWdnZXJIYW5kbGVyIiwib2ZmIiwiY29tcGxldGVkIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInJlYWR5U3RhdGUiLCJzZXRUaW1lb3V0IiwiYWNjZXNzIiwiY2hhaW5hYmxlIiwiZW1wdHlHZXQiLCJyYXciLCJidWxrIiwiYWNjZXB0RGF0YSIsIm93bmVyIiwiRGF0YSIsImRlZmluZVByb3BlcnR5IiwidWlkIiwiYWNjZXB0cyIsImRlc2NyaXB0b3IiLCJ1bmxvY2siLCJkZWZpbmVQcm9wZXJ0aWVzIiwic2V0IiwicHJvcCIsInN0b3JlZCIsImNhbWVsIiwiaGFzRGF0YSIsImRpc2NhcmQiLCJkYXRhX3ByaXYiLCJkYXRhX3VzZXIiLCJyYnJhY2UiLCJybXVsdGlEYXNoIiwiZGF0YUF0dHIiLCJwYXJzZUpTT04iLCJyZW1vdmVEYXRhIiwiX2RhdGEiLCJfcmVtb3ZlRGF0YSIsImNhbWVsS2V5IiwicXVldWUiLCJkZXF1ZXVlIiwic3RhcnRMZW5ndGgiLCJob29rcyIsIl9xdWV1ZUhvb2tzIiwic3RvcCIsInNldHRlciIsImNsZWFyUXVldWUiLCJjb3VudCIsImRlZmVyIiwicG51bSIsInNvdXJjZSIsImNzc0V4cGFuZCIsImlzSGlkZGVuIiwiZWwiLCJjc3MiLCJyY2hlY2thYmxlVHlwZSIsImZyYWdtZW50IiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsImNoZWNrQ2xvbmUiLCJjbG9uZU5vZGUiLCJub0Nsb25lQ2hlY2tlZCIsInN0cnVuZGVmaW5lZCIsImZvY3VzaW5CdWJibGVzIiwicmtleUV2ZW50Iiwicm1vdXNlRXZlbnQiLCJyZm9jdXNNb3JwaCIsInJ0eXBlbmFtZXNwYWNlIiwicmV0dXJuVHJ1ZSIsInJldHVybkZhbHNlIiwic2FmZUFjdGl2ZUVsZW1lbnQiLCJlcnIiLCJldmVudCIsInR5cGVzIiwiaGFuZGxlT2JqSW4iLCJldmVudEhhbmRsZSIsImV2ZW50cyIsInQiLCJoYW5kbGVPYmoiLCJzcGVjaWFsIiwiaGFuZGxlcnMiLCJuYW1lc3BhY2VzIiwib3JpZ1R5cGUiLCJlbGVtRGF0YSIsImhhbmRsZSIsInRyaWdnZXJlZCIsImRpc3BhdGNoIiwiZGVsZWdhdGVUeXBlIiwiYmluZFR5cGUiLCJuYW1lc3BhY2UiLCJkZWxlZ2F0ZUNvdW50Iiwic2V0dXAiLCJtYXBwZWRUeXBlcyIsIm9yaWdDb3VudCIsInRlYXJkb3duIiwicmVtb3ZlRXZlbnQiLCJ0cmlnZ2VyIiwib25seUhhbmRsZXJzIiwiYnViYmxlVHlwZSIsIm9udHlwZSIsImV2ZW50UGF0aCIsIkV2ZW50IiwiaXNUcmlnZ2VyIiwibmFtZXNwYWNlX3JlIiwibm9CdWJibGUiLCJwYXJlbnRXaW5kb3ciLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsInByZXZlbnREZWZhdWx0IiwiaXNEZWZhdWx0UHJldmVudGVkIiwiX2RlZmF1bHQiLCJmaXgiLCJoYW5kbGVyUXVldWUiLCJkZWxlZ2F0ZVRhcmdldCIsInByZURpc3BhdGNoIiwiY3VycmVudFRhcmdldCIsImlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkIiwic3RvcFByb3BhZ2F0aW9uIiwicG9zdERpc3BhdGNoIiwic2VsIiwicHJvcHMiLCJmaXhIb29rcyIsImtleUhvb2tzIiwib3JpZ2luYWwiLCJ3aGljaCIsImNoYXJDb2RlIiwia2V5Q29kZSIsIm1vdXNlSG9va3MiLCJldmVudERvYyIsImJvZHkiLCJwYWdlWCIsImNsaWVudFgiLCJzY3JvbGxMZWZ0IiwiY2xpZW50TGVmdCIsInBhZ2VZIiwiY2xpZW50WSIsInNjcm9sbFRvcCIsImNsaWVudFRvcCIsIm9yaWdpbmFsRXZlbnQiLCJmaXhIb29rIiwibG9hZCIsImJsdXIiLCJjbGljayIsImJlZm9yZXVubG9hZCIsInJldHVyblZhbHVlIiwic2ltdWxhdGUiLCJidWJibGUiLCJpc1NpbXVsYXRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJ0aW1lU3RhbXAiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJtb3VzZWVudGVyIiwibW91c2VsZWF2ZSIsInBvaW50ZXJlbnRlciIsInBvaW50ZXJsZWF2ZSIsIm9yaWciLCJyZWxhdGVkIiwicmVsYXRlZFRhcmdldCIsImF0dGFjaGVzIiwib24iLCJvbmUiLCJvcmlnRm4iLCJyeGh0bWxUYWciLCJydGFnTmFtZSIsInJodG1sIiwicm5vSW5uZXJodG1sIiwicmNoZWNrZWQiLCJyc2NyaXB0VHlwZSIsInJzY3JpcHRUeXBlTWFza2VkIiwicmNsZWFuU2NyaXB0Iiwid3JhcE1hcCIsIm9wdGlvbiIsInRoZWFkIiwiY29sIiwidHIiLCJ0ZCIsIm9wdGdyb3VwIiwidGJvZHkiLCJ0Zm9vdCIsImNvbGdyb3VwIiwiY2FwdGlvbiIsInRoIiwibWFuaXB1bGF0aW9uVGFyZ2V0IiwiY29udGVudCIsImRpc2FibGVTY3JpcHQiLCJyZXN0b3JlU2NyaXB0Iiwic2V0R2xvYmFsRXZhbCIsInJlZkVsZW1lbnRzIiwiY2xvbmVDb3B5RXZlbnQiLCJkZXN0IiwicGRhdGFPbGQiLCJwZGF0YUN1ciIsInVkYXRhT2xkIiwidWRhdGFDdXIiLCJnZXRBbGwiLCJmaXhJbnB1dCIsImRhdGFBbmRFdmVudHMiLCJkZWVwRGF0YUFuZEV2ZW50cyIsInNyY0VsZW1lbnRzIiwiZGVzdEVsZW1lbnRzIiwiaW5QYWdlIiwiYnVpbGRGcmFnbWVudCIsInNjcmlwdHMiLCJzZWxlY3Rpb24iLCJ3cmFwIiwibm9kZXMiLCJjcmVhdGVUZXh0Tm9kZSIsImNsZWFuRGF0YSIsImFwcGVuZCIsImRvbU1hbmlwIiwicHJlcGVuZCIsImluc2VydEJlZm9yZSIsImJlZm9yZSIsImFmdGVyIiwia2VlcERhdGEiLCJodG1sIiwicmVwbGFjZVdpdGgiLCJyZXBsYWNlQ2hpbGQiLCJkZXRhY2giLCJoYXNTY3JpcHRzIiwiaU5vQ2xvbmUiLCJfZXZhbFVybCIsImFwcGVuZFRvIiwicHJlcGVuZFRvIiwiaW5zZXJ0QWZ0ZXIiLCJyZXBsYWNlQWxsIiwiaW5zZXJ0IiwiaWZyYW1lIiwiZWxlbWRpc3BsYXkiLCJhY3R1YWxEaXNwbGF5Iiwic3R5bGUiLCJkaXNwbGF5IiwiZ2V0RGVmYXVsdENvbXB1dGVkU3R5bGUiLCJkZWZhdWx0RGlzcGxheSIsIndyaXRlIiwiY2xvc2UiLCJybWFyZ2luIiwicm51bW5vbnB4IiwiZ2V0U3R5bGVzIiwib3BlbmVyIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImN1ckNTUyIsImNvbXB1dGVkIiwid2lkdGgiLCJtaW5XaWR0aCIsIm1heFdpZHRoIiwiZ2V0UHJvcGVydHlWYWx1ZSIsImFkZEdldEhvb2tJZiIsImNvbmRpdGlvbkZuIiwiaG9va0ZuIiwicGl4ZWxQb3NpdGlvblZhbCIsImJveFNpemluZ1JlbGlhYmxlVmFsIiwiY29udGFpbmVyIiwiYmFja2dyb3VuZENsaXAiLCJjbGVhckNsb25lU3R5bGUiLCJjc3NUZXh0IiwiY29tcHV0ZVBpeGVsUG9zaXRpb25BbmRCb3hTaXppbmdSZWxpYWJsZSIsImRpdlN0eWxlIiwicGl4ZWxQb3NpdGlvbiIsImJveFNpemluZ1JlbGlhYmxlIiwicmVsaWFibGVNYXJnaW5SaWdodCIsIm1hcmdpbkRpdiIsIm1hcmdpblJpZ2h0Iiwic3dhcCIsInJkaXNwbGF5c3dhcCIsInJudW1zcGxpdCIsInJyZWxOdW0iLCJjc3NTaG93IiwicG9zaXRpb24iLCJ2aXNpYmlsaXR5IiwiY3NzTm9ybWFsVHJhbnNmb3JtIiwibGV0dGVyU3BhY2luZyIsImZvbnRXZWlnaHQiLCJjc3NQcmVmaXhlcyIsInZlbmRvclByb3BOYW1lIiwiY2FwTmFtZSIsIm9yaWdOYW1lIiwic2V0UG9zaXRpdmVOdW1iZXIiLCJzdWJ0cmFjdCIsIm1heCIsImF1Z21lbnRXaWR0aE9ySGVpZ2h0IiwiZXh0cmEiLCJpc0JvcmRlckJveCIsInN0eWxlcyIsImdldFdpZHRoT3JIZWlnaHQiLCJ2YWx1ZUlzQm9yZGVyQm94Iiwib2Zmc2V0V2lkdGgiLCJvZmZzZXRIZWlnaHQiLCJzaG93SGlkZSIsInNob3ciLCJoaWRkZW4iLCJjc3NIb29rcyIsIm9wYWNpdHkiLCJjc3NOdW1iZXIiLCJjb2x1bW5Db3VudCIsImZpbGxPcGFjaXR5IiwiZmxleEdyb3ciLCJmbGV4U2hyaW5rIiwibGluZUhlaWdodCIsIm9yZGVyIiwib3JwaGFucyIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJjc3NQcm9wcyIsImZsb2F0IiwibWFyZ2luIiwicGFkZGluZyIsImJvcmRlciIsInByZWZpeCIsInN1ZmZpeCIsImV4cGFuZCIsImV4cGFuZGVkIiwicGFydHMiLCJoaWRlIiwidG9nZ2xlIiwiVHdlZW4iLCJlYXNpbmciLCJ1bml0IiwicHJvcEhvb2tzIiwicnVuIiwicGVyY2VudCIsImVhc2VkIiwiZHVyYXRpb24iLCJzdGVwIiwidHdlZW4iLCJmeCIsImxpbmVhciIsInAiLCJzd2luZyIsImNvcyIsIlBJIiwiZnhOb3ciLCJ0aW1lcklkIiwicmZ4dHlwZXMiLCJyZnhudW0iLCJycnVuIiwiYW5pbWF0aW9uUHJlZmlsdGVycyIsImRlZmF1bHRQcmVmaWx0ZXIiLCJ0d2VlbmVycyIsIioiLCJjcmVhdGVUd2VlbiIsInNjYWxlIiwibWF4SXRlcmF0aW9ucyIsImNyZWF0ZUZ4Tm93IiwiZ2VuRngiLCJpbmNsdWRlV2lkdGgiLCJoZWlnaHQiLCJhbmltYXRpb24iLCJjb2xsZWN0aW9uIiwib3B0cyIsIm9sZGZpcmUiLCJjaGVja0Rpc3BsYXkiLCJhbmltIiwiZGF0YVNob3ciLCJ1bnF1ZXVlZCIsIm92ZXJmbG93Iiwib3ZlcmZsb3dYIiwib3ZlcmZsb3dZIiwicHJvcEZpbHRlciIsInNwZWNpYWxFYXNpbmciLCJBbmltYXRpb24iLCJwcm9wZXJ0aWVzIiwic3RvcHBlZCIsInRpY2siLCJjdXJyZW50VGltZSIsInN0YXJ0VGltZSIsInR3ZWVucyIsIm9yaWdpbmFsUHJvcGVydGllcyIsIm9yaWdpbmFsT3B0aW9ucyIsImdvdG9FbmQiLCJyZWplY3RXaXRoIiwidGltZXIiLCJjb21wbGV0ZSIsInR3ZWVuZXIiLCJwcmVmaWx0ZXIiLCJzcGVlZCIsIm9wdCIsInNwZWVkcyIsImZhZGVUbyIsInRvIiwiYW5pbWF0ZSIsIm9wdGFsbCIsImRvQW5pbWF0aW9uIiwiZmluaXNoIiwic3RvcFF1ZXVlIiwidGltZXJzIiwiY3NzRm4iLCJzbGlkZURvd24iLCJzbGlkZVVwIiwic2xpZGVUb2dnbGUiLCJmYWRlSW4iLCJmYWRlT3V0IiwiZmFkZVRvZ2dsZSIsImludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwic2xvdyIsImZhc3QiLCJkZWxheSIsInRpbWUiLCJ0aW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiY2hlY2tPbiIsIm9wdFNlbGVjdGVkIiwib3B0RGlzYWJsZWQiLCJyYWRpb1ZhbHVlIiwibm9kZUhvb2siLCJib29sSG9vayIsInJlbW92ZUF0dHIiLCJuVHlwZSIsImF0dHJIb29rcyIsInByb3BOYW1lIiwiYXR0ck5hbWVzIiwicHJvcEZpeCIsImdldHRlciIsInJmb2N1c2FibGUiLCJyZW1vdmVQcm9wIiwiZm9yIiwiY2xhc3MiLCJub3R4bWwiLCJoYXNBdHRyaWJ1dGUiLCJyY2xhc3MiLCJhZGRDbGFzcyIsImNsYXNzZXMiLCJjbGF6eiIsImZpbmFsVmFsdWUiLCJwcm9jZWVkIiwicmVtb3ZlQ2xhc3MiLCJ0b2dnbGVDbGFzcyIsInN0YXRlVmFsIiwiY2xhc3NOYW1lcyIsImhhc0NsYXNzIiwicnJldHVybiIsInZhbEhvb2tzIiwib3B0aW9uU2V0IiwiaG92ZXIiLCJmbk92ZXIiLCJmbk91dCIsImJpbmQiLCJ1bmJpbmQiLCJkZWxlZ2F0ZSIsInVuZGVsZWdhdGUiLCJub25jZSIsInJxdWVyeSIsIkpTT04iLCJwYXJzZSIsInBhcnNlWE1MIiwiRE9NUGFyc2VyIiwicGFyc2VGcm9tU3RyaW5nIiwicmhhc2giLCJydHMiLCJyaGVhZGVycyIsInJsb2NhbFByb3RvY29sIiwicm5vQ29udGVudCIsInJwcm90b2NvbCIsInJ1cmwiLCJwcmVmaWx0ZXJzIiwidHJhbnNwb3J0cyIsImFsbFR5cGVzIiwiYWpheExvY2F0aW9uIiwiYWpheExvY1BhcnRzIiwiYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzIiwic3RydWN0dXJlIiwiZGF0YVR5cGVFeHByZXNzaW9uIiwiZGF0YVR5cGUiLCJkYXRhVHlwZXMiLCJpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyIsImpxWEhSIiwiaW5zcGVjdGVkIiwic2Vla2luZ1RyYW5zcG9ydCIsImluc3BlY3QiLCJwcmVmaWx0ZXJPckZhY3RvcnkiLCJkYXRhVHlwZU9yVHJhbnNwb3J0IiwiYWpheEV4dGVuZCIsImZsYXRPcHRpb25zIiwiYWpheFNldHRpbmdzIiwiYWpheEhhbmRsZVJlc3BvbnNlcyIsInMiLCJyZXNwb25zZXMiLCJjdCIsImZpbmFsRGF0YVR5cGUiLCJmaXJzdERhdGFUeXBlIiwibWltZVR5cGUiLCJnZXRSZXNwb25zZUhlYWRlciIsImNvbnZlcnRlcnMiLCJhamF4Q29udmVydCIsInJlc3BvbnNlIiwiaXNTdWNjZXNzIiwiY29udjIiLCJjdXJyZW50IiwiY29udiIsInJlc3BvbnNlRmllbGRzIiwiZGF0YUZpbHRlciIsImFjdGl2ZSIsImxhc3RNb2RpZmllZCIsImV0YWciLCJ1cmwiLCJpc0xvY2FsIiwicHJvY2Vzc0RhdGEiLCJhc3luYyIsImNvbnRlbnRUeXBlIiwianNvbiIsIiogdGV4dCIsInRleHQgaHRtbCIsInRleHQganNvbiIsInRleHQgeG1sIiwiYWpheFNldHVwIiwic2V0dGluZ3MiLCJhamF4UHJlZmlsdGVyIiwiYWpheFRyYW5zcG9ydCIsImFqYXgiLCJ0cmFuc3BvcnQiLCJjYWNoZVVSTCIsInJlc3BvbnNlSGVhZGVyc1N0cmluZyIsInJlc3BvbnNlSGVhZGVycyIsInRpbWVvdXRUaW1lciIsImZpcmVHbG9iYWxzIiwiY2FsbGJhY2tDb250ZXh0IiwiZ2xvYmFsRXZlbnRDb250ZXh0IiwiY29tcGxldGVEZWZlcnJlZCIsInN0YXR1c0NvZGUiLCJyZXF1ZXN0SGVhZGVycyIsInJlcXVlc3RIZWFkZXJzTmFtZXMiLCJzdHJBYm9ydCIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInNldFJlcXVlc3RIZWFkZXIiLCJsbmFtZSIsIm92ZXJyaWRlTWltZVR5cGUiLCJzdGF0dXMiLCJhYm9ydCIsInN0YXR1c1RleHQiLCJmaW5hbFRleHQiLCJzdWNjZXNzIiwibWV0aG9kIiwiY3Jvc3NEb21haW4iLCJwYXJhbSIsInRyYWRpdGlvbmFsIiwiaGFzQ29udGVudCIsImlmTW9kaWZpZWQiLCJoZWFkZXJzIiwiYmVmb3JlU2VuZCIsInNlbmQiLCJuYXRpdmVTdGF0dXNUZXh0IiwibW9kaWZpZWQiLCJnZXRKU09OIiwiZ2V0U2NyaXB0IiwidGhyb3dzIiwid3JhcEFsbCIsImZpcnN0RWxlbWVudENoaWxkIiwid3JhcElubmVyIiwidW53cmFwIiwidmlzaWJsZSIsInIyMCIsInJicmFja2V0IiwickNSTEYiLCJyc3VibWl0dGVyVHlwZXMiLCJyc3VibWl0dGFibGUiLCJidWlsZFBhcmFtcyIsInYiLCJlbmNvZGVVUklDb21wb25lbnQiLCJzZXJpYWxpemUiLCJzZXJpYWxpemVBcnJheSIsInhociIsIlhNTEh0dHBSZXF1ZXN0IiwieGhySWQiLCJ4aHJDYWxsYmFja3MiLCJ4aHJTdWNjZXNzU3RhdHVzIiwxMjIzLCJ4aHJTdXBwb3J0ZWQiLCJjb3JzIiwib3BlbiIsInVzZXJuYW1lIiwieGhyRmllbGRzIiwib25sb2FkIiwib25lcnJvciIsInJlc3BvbnNlVGV4dCIsInRleHQgc2NyaXB0IiwiY2hhcnNldCIsInNjcmlwdENoYXJzZXQiLCJldnQiLCJvbGRDYWxsYmFja3MiLCJyanNvbnAiLCJqc29ucCIsImpzb25wQ2FsbGJhY2siLCJvcmlnaW5hbFNldHRpbmdzIiwiY2FsbGJhY2tOYW1lIiwib3ZlcndyaXR0ZW4iLCJyZXNwb25zZUNvbnRhaW5lciIsImpzb25Qcm9wIiwia2VlcFNjcmlwdHMiLCJwYXJzZWQiLCJfbG9hZCIsInBhcmFtcyIsImFuaW1hdGVkIiwiZ2V0V2luZG93Iiwib2Zmc2V0Iiwic2V0T2Zmc2V0IiwiY3VyUG9zaXRpb24iLCJjdXJMZWZ0IiwiY3VyQ1NTVG9wIiwiY3VyVG9wIiwiY3VyT2Zmc2V0IiwiY3VyQ1NTTGVmdCIsImNhbGN1bGF0ZVBvc2l0aW9uIiwiY3VyRWxlbSIsImxlZnQiLCJ1c2luZyIsIndpbiIsImJveCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInBhZ2VZT2Zmc2V0IiwicGFnZVhPZmZzZXQiLCJvZmZzZXRQYXJlbnQiLCJwYXJlbnRPZmZzZXQiLCJzY3JvbGxUbyIsIkhlaWdodCIsIldpZHRoIiwiZGVmYXVsdEV4dHJhIiwiZnVuY05hbWUiLCJzaXplIiwiYW5kU2VsZiIsImRlZmluZSIsImFtZCIsIl9qUXVlcnkiLCJfJCIsIiQiLCJub0NvbmZsaWN0Il0sIm1hcHBpbmdzIjoiO0NBY0MsU0FBVUEsRUFBUUMsR0FFSyxnQkFBWEMsU0FBaUQsZ0JBQW5CQSxRQUFPQyxRQVFoREQsT0FBT0MsUUFBVUgsRUFBT0ksU0FDdkJILEVBQVNELEdBQVEsR0FDakIsU0FBVUssR0FDVCxJQUFNQSxFQUFFRCxTQUNQLEtBQU0sSUFBSUUsT0FBTywyQ0FFbEIsT0FBT0wsR0FBU0ksSUFHbEJKLEVBQVNELElBSVMsbUJBQVhPLFFBQXlCQSxPQUFTQyxLQUFNLFNBQVVELEVBQVFFLEdBUW5FLEdBQUlDLE1BRUFDLEVBQVFELEVBQUlDLE1BRVpDLEVBQVNGLEVBQUlFLE9BRWJDLEVBQU9ILEVBQUlHLEtBRVhDLEVBQVVKLEVBQUlJLFFBRWRDLEtBRUFDLEVBQVdELEVBQVdDLFNBRXRCQyxFQUFTRixFQUFXRyxlQUVwQkMsS0FNSGYsRUFBV0csRUFBT0gsU0FFbEJnQixFQUFVLFFBR1ZDLEVBQVMsU0FBVUMsRUFBVUMsR0FHNUIsTUFBTyxJQUFJRixHQUFPRyxHQUFHQyxLQUFNSCxFQUFVQyxJQUt0Q0csRUFBUSxxQ0FHUkMsRUFBWSxRQUNaQyxFQUFhLGVBR2JDLEVBQWEsU0FBVUMsRUFBS0MsR0FDM0IsTUFBT0EsR0FBT0MsY0FHaEJYLEdBQU9HLEdBQUtILEVBQU9ZLFdBRWxCQyxPQUFRZCxFQUVSZSxZQUFhZCxFQUdiQyxTQUFVLEdBR1ZjLE9BQVEsRUFFUkMsUUFBUyxXQUNSLE1BQU8xQixHQUFNMkIsS0FBTTlCLE9BS3BCK0IsSUFBSyxTQUFVQyxHQUNkLE1BQWMsT0FBUEEsRUFH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",
          "content_type": "application/octet-stream"
        }
      },
      "_id": "_design/reports",
      "lib": {
        "mustacheOld": "/*\n  Shameless port of http://github.com/defunkt/mustache\n  by Jan Lehnardt <jan@apache.org>, \n     Alexander Lang <alex@upstream-berlin.com>,\n     Sebastian Cohnen <sebastian.cohnen@googlemail.com>\n\n  Thanks @defunkt for the awesome code.\n\n  See http://github.com/defunkt/mustache for more info.\n*/\n\nvar Mustache = function() {\n  var Renderer = function() {};\n\n  Renderer.prototype = {\n    otag: \"{{\",\n    ctag: \"}}\",\n    pragmas: {},\n    buffer: [],\n    pragmas_parsed: false,\n\n    render: function(template, context, partials, in_recursion) {\n      // fail fast\n      if(template.indexOf(this.otag) == -1) {\n        if(in_recursion) {\n          return template;\n        } else {\n          this.send(template);\n        }\n      }\n\n      if(!in_recursion) {\n        this.buffer = [];\n      }\n\n      if(!this.pragmas_parsed) {\n        template = this.render_pragmas(template);\n      }\n      var html = this.render_section(template, context, partials);\n      if(in_recursion) {\n        return this.render_tags(html, context, partials, in_recursion);\n      }\n\n      this.render_tags(html, context, partials, in_recursion);\n    },\n\n    /*\n      Sends parsed lines\n    */\n    send: function(line) {\n      if(line != \"\") {\n        this.buffer.push(line);\n      }\n    },\n\n    /*\n      Looks for %PRAGMAS\n    */\n    render_pragmas: function(template) {\n      this.pragmas_parsed = true;\n      // no pragmas\n      if(template.indexOf(this.otag + \"%\") == -1) {\n        return template;\n      }\n\n      var that = this;\n      var regex = new RegExp(this.otag + \"%([\\\\w_-]+) ?([\\\\w]+=[\\\\w]+)?\"\n        + this.ctag);\n      return template.replace(regex, function(match, pragma, options) {\n        that.pragmas[pragma] = {};\n        if(options) {\n          var opts = options.split(\"=\");\n          that.pragmas[pragma][opts[0]] = opts[1];\n        }\n        return \"\";\n        // ignore unknown pragmas silently\n      });\n    },\n\n    /*\n      Tries to find a partial in the global scope and render it\n    */\n    render_partial: function(name, context, partials) {\n      if(typeof(context[name]) != \"object\") {\n        throw({message: \"subcontext for '\" + name + \"' is not an object\"});\n      }\n      if(!partials || !partials[name]) {\n        throw({message: \"unknown_partial '\" + name + \"'\"});\n      }\n      return this.render(partials[name], context[name], partials, true);\n    },\n\n    /*\n      Renders boolean and enumerable sections\n    */\n    render_section: function(template, context, partials) {\n      if(template.indexOf(this.otag + \"#\") == -1) {\n        return template;\n      }\n      var that = this;\n      // CSW - Added \"+?\" so it finds the tighest bound, not the widest\n      var regex = new RegExp(this.otag + \"\\\\#(.+)\" + this.ctag +\n              \"\\\\s*([\\\\s\\\\S]+?)\" + this.otag + \"\\\\/\\\\1\" + this.ctag + \"\\\\s*\", \"mg\");\n\n      // for each {{#foo}}{{/foo}} section do...\n      return template.replace(regex, function(match, name, content) {\n        var value = that.find(name, context);\n        if(that.is_array(value)) { // Enumerable, Let's loop!\n          return that.map(value, function(row) {\n            return that.render(content, that.merge(context,\n                    that.create_context(row)), partials, true);\n          }).join(\"\");\n        } else if (that.is_iterator(value)) {\n          var result = [];\n          var row;\n          while (row = value()) {\n            result.push(that.render(content, that.merge(context,\n                          that.create_context(row)), partials, true));\n          } // fuck buffering, works for now though.\n          return result.join('');\n        } else if(value) { // boolean section\n          return that.render(content, context, partials, true);\n        } else {\n          return \"\";\n        }\n      });\n    },\n\n    /*\n      Replace {{foo}} and friends with values from our view\n    */\n    render_tags: function(template, context, partials, in_recursion) {\n      // tit for tat\n      var that = this;\n\n      var new_regex = function() {\n        return new RegExp(that.otag + \"(=|!|>|\\\\{|%)?([^\\/#]+?)\\\\1?\" +\n          that.ctag + \"+\", \"g\");\n      };\n\n      var regex = new_regex();\n      var lines = template.split(\"\\n\");\n       for (var i=0; i < lines.length; i++) {\n         lines[i] = lines[i].replace(regex, function(match, operator, name) {\n           switch(operator) {\n             case \"!\": // ignore comments\n               return match;\n             case \"=\": // set new delimiters, rebuild the replace regexp\n               that.set_delimiters(name);\n               regex = new_regex();\n               return \"\";\n             case \">\": // render partial\n               return that.render_partial(name, context, partials);\n             case \"{\": // the triple mustache is unescaped\n               return that.find(name, context);\n             default: // escape the value\n               return that.escape(that.find(name, context));\n           }\n         }, this);\n         if(!in_recursion) {\n           this.send(lines[i]);\n         }\n       }\n       return lines.join(\"\\n\");\n    },\n\n    set_delimiters: function(delimiters) {\n      var dels = delimiters.split(\" \");\n      this.otag = this.escape_regex(dels[0]);\n      this.ctag = this.escape_regex(dels[1]);\n    },\n\n    escape_regex: function(text) {\n      // thank you Simon Willison\n      if(!arguments.callee.sRE) {\n        var specials = [\n          '/', '.', '*', '+', '?', '|',\n          '(', ')', '[', ']', '{', '}', '\\\\'\n        ];\n        arguments.callee.sRE = new RegExp(\n          '(\\\\' + specials.join('|\\\\') + ')', 'g'\n        );\n      }\n    return text.replace(arguments.callee.sRE, '\\\\$1');\n    },\n\n    /*\n      find `name` in current `context`. That is find me a value\n      from the view object\n    */\n    find: function(name, context) {\n      name = this.trim(name);\n      if(typeof context[name] === \"function\" && !context[name].iterator) {\n        return context[name].apply(context);\n      }\n      if(context[name] !== undefined) {\n        return context[name];\n      }\n      // silently ignore unkown variables\n      return \"\";\n    },\n\n    // Utility methods\n\n    /*\n      Does away with nasty characters\n    */\n    escape: function(s) {\n      return ((s == null) ? \"\" : s).toString().replace(/[&\"<>\\\\]/g, function(s) {\n        switch(s) {\n          case \"&\": return \"&amp;\";\n          case \"\\\\\": return \"\\\\\\\\\";;\n          case '\"': return '\\\"';;\n          case \"<\": return \"&lt;\";\n          case \">\": return \"&gt;\";\n          default: return s;\n        }\n      });\n    },\n\n    /*\n      Merges all properties of object `b` into object `a`.\n      `b.property` overwrites a.property`\n    */\n    merge: function(a, b) {\n      var _new = {};\n      for(var name in a) {\n        if(a.hasOwnProperty(name)) {\n          _new[name] = a[name];\n        }\n      };\n      for(var name in b) {\n        if(b.hasOwnProperty(name)) {\n          _new[name] = b[name];\n        }\n      };\n      return _new;\n    },\n\n    // by @langalex, support for arrays of strings\n    create_context: function(_context) {\n      if(this.is_object(_context)) {\n        return _context;\n      } else if(this.pragmas[\"IMPLICIT-ITERATOR\"]) {\n        var iterator = this.pragmas[\"IMPLICIT-ITERATOR\"].iterator || \".\";\n        var ctx = {};\n        ctx[iterator] = _context\n        return ctx;\n      }\n    },\n\n    is_object: function(a) {\n      return a && typeof a == \"object\";\n    },\n\n    is_array: function(a) {\n      return Object.prototype.toString.call(a) === '[object Array]';\n    },\n\n    is_iterator : function(f) {\n      return (typeof f === 'function' && f.iterator);\n    },\n\n    /*\n      Gets rid of leading and trailing whitespace\n    */\n    trim: function(s) {\n      return s.replace(/^\\s*|\\s*$/g, \"\");\n    },\n\n    /*\n      Why, why, why? Because IE. Cry, cry cry.\n    */\n    map: function(array, fn) {\n      if (typeof array.map == \"function\") {\n        return array.map(fn)\n      } else {\n        var r = [];\n        var l = array.length;\n        for(i=0;i<l;i++) {\n          r.push(fn(array[i]));\n        }\n        return r;\n      }\n    }\n  };\n\n  return({\n    name: \"mustache.js\",\n    version: \"0.2.3-dev\",\n\n    /*\n      Turns a template and view into HTML\n    */\n    to_html: function(template, view, partials, send_fun) {\n      var renderer = new Renderer();\n      if(send_fun) {\n        renderer.send = send_fun;\n      }\n      renderer.render(template, view, partials);\n      if(!send_fun) {\n        return renderer.buffer.join(\"\\n\");\n      }\n    },\n    escape : function(string) {\n      var renderer = new Renderer();\n      return renderer.escape(string);\n    }\n  });\n}();\n// for CommonJS\nif (exports) {\n  exports.to_html = Mustache.to_html;\n  exports.escape = Mustache.escape;\n}",
        "mustache": "/*!\n * mustache.js - Logic-less {{mustache}} templates with JavaScript\n * http://github.com/janl/mustache.js\n */\n\n/*global define: false*/\n\n(function (global, factory) {\n  if (typeof exports === \"object\" && exports) {\n    factory(exports); // CommonJS\n  } else if (typeof define === \"function\" && define.amd) {\n    define(['exports'], factory); // AMD\n  } else {\n    factory(global.Mustache = {}); // <script>\n  }\n}(this, function (mustache) {\n\n  var Object_toString = Object.prototype.toString;\n  var isArray = Array.isArray || function (object) {\n    return Object_toString.call(object) === '[object Array]';\n  };\n\n  function isFunction(object) {\n    return typeof object === 'function';\n  }\n\n  function escapeRegExp(string) {\n    return string.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, \"\\\\$&\");\n  }\n\n  // Workaround for https://issues.apache.org/jira/browse/COUCHDB-577\n  // See https://github.com/janl/mustache.js/issues/189\n  var RegExp_test = RegExp.prototype.test;\n  function testRegExp(re, string) {\n    return RegExp_test.call(re, string);\n  }\n\n  var nonSpaceRe = /\\S/;\n  function isWhitespace(string) {\n    return !testRegExp(nonSpaceRe, string);\n  }\n\n  var entityMap = {\n    \"&\": \"&amp;\",\n    \"<\": \"&lt;\",\n    \">\": \"&gt;\",\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    \"/\": '&#x2F;'\n  };\n\n  function escapeHtml(string) {\n    return String(string).replace(/[&<>\"'\\/]/g, function (s) {\n      return entityMap[s];\n    });\n  }\n\n  var whiteRe = /\\s*/;\n  var spaceRe = /\\s+/;\n  var equalsRe = /\\s*=/;\n  var curlyRe = /\\s*\\}/;\n  var tagRe = /#|\\^|\\/|>|\\{|&|=|!/;\n\n  /**\n   * Breaks up the given `template` string into a tree of tokens. If the `tags`\n   * argument is given here it must be an array with two string values: the\n   * opening and closing tags used in the template (e.g. [ \"<%\", \"%>\" ]). Of\n   * course, the default is to use mustaches (i.e. mustache.tags).\n   *\n   * A token is an array with at least 4 elements. The first element is the\n   * mustache symbol that was used inside the tag, e.g. \"#\" or \"&\". If the tag\n   * did not contain a symbol (i.e. {{myValue}}) this element is \"name\". For\n   * all text that appears outside a symbol this element is \"text\".\n   *\n   * The second element of a token is its \"value\". For mustache tags this is\n   * whatever else was inside the tag besides the opening symbol. For text tokens\n   * this is the text itself.\n   *\n   * The third and fourth elements of the token are the start and end indices,\n   * respectively, of the token in the original template.\n   *\n   * Tokens that are the root node of a subtree contain two more elements: 1) an\n   * array of tokens in the subtree and 2) the index in the original template at\n   * which the closing tag for that section begins.\n   */\n  function parseTemplate(template, tags) {\n    if (!template)\n      return [];\n\n    var sections = [];     // Stack to hold section tokens\n    var tokens = [];       // Buffer to hold the tokens\n    var spaces = [];       // Indices of whitespace tokens on the current line\n    var hasTag = false;    // Is there a {{tag}} on the current line?\n    var nonSpace = false;  // Is there a non-space char on the current line?\n\n    // Strips all whitespace tokens array for the current line\n    // if there was a {{#tag}} on it and otherwise only space.\n    function stripSpace() {\n      if (hasTag && !nonSpace) {\n        while (spaces.length)\n          delete tokens[spaces.pop()];\n      } else {\n        spaces = [];\n      }\n\n      hasTag = false;\n      nonSpace = false;\n    }\n\n    var openingTagRe, closingTagRe, closingCurlyRe;\n    function compileTags(tags) {\n      if (typeof tags === 'string')\n        tags = tags.split(spaceRe, 2);\n\n      if (!isArray(tags) || tags.length !== 2)\n        throw new Error('Invalid tags: ' + tags);\n\n      openingTagRe = new RegExp(escapeRegExp(tags[0]) + '\\\\s*');\n      closingTagRe = new RegExp('\\\\s*' + escapeRegExp(tags[1]));\n      closingCurlyRe = new RegExp('\\\\s*' + escapeRegExp('}' + tags[1]));\n    }\n\n    compileTags(tags || mustache.tags);\n\n    var scanner = new Scanner(template);\n\n    var start, type, value, chr, token, openSection;\n    while (!scanner.eos()) {\n      start = scanner.pos;\n\n      // Match any text between tags.\n      value = scanner.scanUntil(openingTagRe);\n\n      if (value) {\n        for (var i = 0, valueLength = value.length; i < valueLength; ++i) {\n          chr = value.charAt(i);\n\n          if (isWhitespace(chr)) {\n            spaces.push(tokens.length);\n          } else {\n            nonSpace = true;\n          }\n\n          tokens.push([ 'text', chr, start, start + 1 ]);\n          start += 1;\n\n          // Check for whitespace on the current line.\n          if (chr === '\\n')\n            stripSpace();\n        }\n      }\n\n      // Match the opening tag.\n      if (!scanner.scan(openingTagRe))\n        break;\n\n      hasTag = true;\n\n      // Get the tag type.\n      type = scanner.scan(tagRe) || 'name';\n      scanner.scan(whiteRe);\n\n      // Get the tag value.\n      if (type === '=') {\n        value = scanner.scanUntil(equalsRe);\n        scanner.scan(equalsRe);\n        scanner.scanUntil(closingTagRe);\n      } else if (type === '{') {\n        value = scanner.scanUntil(closingCurlyRe);\n        scanner.scan(curlyRe);\n        scanner.scanUntil(closingTagRe);\n        type = '&';\n      } else {\n        value = scanner.scanUntil(closingTagRe);\n      }\n\n      // Match the closing tag.\n      if (!scanner.scan(closingTagRe))\n        throw new Error('Unclosed tag at ' + scanner.pos);\n\n      token = [ type, value, start, scanner.pos ];\n      tokens.push(token);\n\n      if (type === '#' || type === '^') {\n        sections.push(token);\n      } else if (type === '/') {\n        // Check section nesting.\n        openSection = sections.pop();\n\n        if (!openSection)\n          throw new Error('Unopened section \"' + value + '\" at ' + start);\n\n        if (openSection[1] !== value)\n          throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + start);\n      } else if (type === 'name' || type === '{' || type === '&') {\n        nonSpace = true;\n      } else if (type === '=') {\n        // Set the tags for the next time around.\n        compileTags(value);\n      }\n    }\n\n    // Make sure there are no open sections when we're done.\n    openSection = sections.pop();\n\n    if (openSection)\n      throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + scanner.pos);\n\n    return nestTokens(squashTokens(tokens));\n  }\n\n  /**\n   * Combines the values of consecutive text tokens in the given `tokens` array\n   * to a single token.\n   */\n  function squashTokens(tokens) {\n    var squashedTokens = [];\n\n    var token, lastToken;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      if (token) {\n        if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {\n          lastToken[1] += token[1];\n          lastToken[3] = token[3];\n        } else {\n          squashedTokens.push(token);\n          lastToken = token;\n        }\n      }\n    }\n\n    return squashedTokens;\n  }\n\n  /**\n   * Forms the given array of `tokens` into a nested tree structure where\n   * tokens that represent a section have two additional items: 1) an array of\n   * all tokens that appear in that section and 2) the index in the original\n   * template that represents the end of that section.\n   */\n  function nestTokens(tokens) {\n    var nestedTokens = [];\n    var collector = nestedTokens;\n    var sections = [];\n\n    var token, section;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      switch (token[0]) {\n      case '#':\n      case '^':\n        collector.push(token);\n        sections.push(token);\n        collector = token[4] = [];\n        break;\n      case '/':\n        section = sections.pop();\n        section[5] = token[2];\n        collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;\n        break;\n      default:\n        collector.push(token);\n      }\n    }\n\n    return nestedTokens;\n  }\n\n  /**\n   * A simple string scanner that is used by the template parser to find\n   * tokens in template strings.\n   */\n  function Scanner(string) {\n    this.string = string;\n    this.tail = string;\n    this.pos = 0;\n  }\n\n  /**\n   * Returns `true` if the tail is empty (end of string).\n   */\n  Scanner.prototype.eos = function () {\n    return this.tail === \"\";\n  };\n\n  /**\n   * Tries to match the given regular expression at the current position.\n   * Returns the matched text if it can match, the empty string otherwise.\n   */\n  Scanner.prototype.scan = function (re) {\n    var match = this.tail.match(re);\n\n    if (!match || match.index !== 0)\n      return '';\n\n    var string = match[0];\n\n    this.tail = this.tail.substring(string.length);\n    this.pos += string.length;\n\n    return string;\n  };\n\n  /**\n   * Skips all text until the given regular expression can be matched. Returns\n   * the skipped string, which is the entire tail if no match can be made.\n   */\n  Scanner.prototype.scanUntil = function (re) {\n    var index = this.tail.search(re), match;\n\n    switch (index) {\n    case -1:\n      match = this.tail;\n      this.tail = \"\";\n      break;\n    case 0:\n      match = \"\";\n      break;\n    default:\n      match = this.tail.substring(0, index);\n      this.tail = this.tail.substring(index);\n    }\n\n    this.pos += match.length;\n\n    return match;\n  };\n\n  /**\n   * Represents a rendering context by wrapping a view object and\n   * maintaining a reference to the parent context.\n   */\n  function Context(view, parentContext) {\n    this.view = view == null ? {} : view;\n    this.cache = { '.': this.view };\n    this.parent = parentContext;\n  }\n\n  /**\n   * Creates a new context using the given view with this context\n   * as the parent.\n   */\n  Context.prototype.push = function (view) {\n    return new Context(view, this);\n  };\n\n  /**\n   * Returns the value of the given name in this context, traversing\n   * up the context hierarchy if the value is absent in this context's view.\n   */\n  Context.prototype.lookup = function (name) {\n    var cache = this.cache;\n\n    var value;\n    if (name in cache) {\n      value = cache[name];\n    } else {\n      var context = this, names, index;\n\n      while (context) {\n        if (name.indexOf('.') > 0) {\n          value = context.view;\n          names = name.split('.');\n          index = 0;\n\n          while (value != null && index < names.length)\n            value = value[names[index++]];\n        } else if (typeof context.view == 'object') {\n          value = context.view[name];\n        }\n\n        if (value != null)\n          break;\n\n        context = context.parent;\n      }\n\n      cache[name] = value;\n    }\n\n    if (isFunction(value))\n      value = value.call(this.view);\n\n    return value;\n  };\n\n  /**\n   * A Writer knows how to take a stream of tokens and render them to a\n   * string, given a context. It also maintains a cache of templates to\n   * avoid the need to parse the same template twice.\n   */\n  function Writer() {\n    this.cache = {};\n  }\n\n  /**\n   * Clears all cached templates in this writer.\n   */\n  Writer.prototype.clearCache = function () {\n    this.cache = {};\n  };\n\n  /**\n   * Parses and caches the given `template` and returns the array of tokens\n   * that is generated from the parse.\n   */\n  Writer.prototype.parse = function (template, tags) {\n    var cache = this.cache;\n    var tokens = cache[template];\n\n    if (tokens == null)\n      tokens = cache[template] = parseTemplate(template, tags);\n\n    return tokens;\n  };\n\n  /**\n   * High-level method that is used to render the given `template` with\n   * the given `view`.\n   *\n   * The optional `partials` argument may be an object that contains the\n   * names and templates of partials that are used in the template. It may\n   * also be a function that is used to load partial templates on the fly\n   * that takes a single argument: the name of the partial.\n   */\n  Writer.prototype.render = function (template, view, partials) {\n    var tokens = this.parse(template);\n    var context = (view instanceof Context) ? view : new Context(view);\n    return this.renderTokens(tokens, context, partials, template);\n  };\n\n  /**\n   * Low-level method that renders the given array of `tokens` using\n   * the given `context` and `partials`.\n   *\n   * Note: The `originalTemplate` is only ever used to extract the portion\n   * of the original template that was contained in a higher-order section.\n   * If the template doesn't use higher-order sections, this argument may\n   * be omitted.\n   */\n  Writer.prototype.renderTokens = function (tokens, context, partials, originalTemplate) {\n    var buffer = '';\n\n    var token, symbol, value;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      value = undefined;\n      token = tokens[i];\n      symbol = token[0];\n\n      if (symbol === '#') value = this._renderSection(token, context, partials, originalTemplate);\n      else if (symbol === '^') value = this._renderInverted(token, context, partials, originalTemplate);\n      else if (symbol === '>') value = this._renderPartial(token, context, partials, originalTemplate);\n      else if (symbol === '&') value = this._unescapedValue(token, context);\n      else if (symbol === 'name') value = this._escapedValue(token, context);\n      else if (symbol === 'text') value = this._rawValue(token);\n\n      if (value !== undefined)\n        buffer += value;\n    }\n\n    return buffer;\n  };\n\n  Writer.prototype._renderSection = function (token, context, partials, originalTemplate) {\n    var self = this;\n    var buffer = '';\n    var value = context.lookup(token[1]);\n\n    // This function is used to render an arbitrary template\n    // in the current context by higher-order sections.\n    function subRender(template) {\n      return self.render(template, context, partials);\n    }\n\n    if (!value) return;\n\n    if (isArray(value)) {\n      for (var j = 0, valueLength = value.length; j < valueLength; ++j) {\n        buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate);\n      }\n    } else if (typeof value === 'object' || typeof value === 'string') {\n      buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate);\n    } else if (isFunction(value)) {\n      if (typeof originalTemplate !== 'string')\n        throw new Error('Cannot use higher-order sections without the original template');\n\n      // Extract the portion of the original template that the section contains.\n      value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);\n\n      if (value != null)\n        buffer += value;\n    } else {\n      buffer += this.renderTokens(token[4], context, partials, originalTemplate);\n    }\n    return buffer;\n  };\n\n  Writer.prototype._renderInverted = function(token, context, partials, originalTemplate) {\n    var value = context.lookup(token[1]);\n\n    // Use JavaScript's definition of falsy. Include empty arrays.\n    // See https://github.com/janl/mustache.js/issues/186\n    if (!value || (isArray(value) && value.length === 0))\n      return this.renderTokens(token[4], context, partials, originalTemplate);\n  };\n\n  Writer.prototype._renderPartial = function(token, context, partials) {\n    if (!partials) return;\n\n    var value = isFunction(partials) ? partials(token[1]) : partials[token[1]];\n    if (value != null)\n      return this.renderTokens(this.parse(value), context, partials, value);\n  };\n\n  Writer.prototype._unescapedValue = function(token, context) {\n    var value = context.lookup(token[1]);\n    if (value != null)\n      return value;\n  };\n\n  Writer.prototype._escapedValue = function(token, context) {\n    var value = context.lookup(token[1]);\n    if (value != null)\n      return mustache.escape(value);\n  };\n\n  Writer.prototype._rawValue = function(token) {\n    return token[1];\n  };\n\n  mustache.name = \"mustache.js\";\n  mustache.version = \"1.1.0\";\n  mustache.tags = [ \"{{\", \"}}\" ];\n\n  // All high-level mustache.* functions use this writer.\n  var defaultWriter = new Writer();\n\n  /**\n   * Clears all cached templates in the default writer.\n   */\n  mustache.clearCache = function () {\n    return defaultWriter.clearCache();\n  };\n\n  /**\n   * Parses and caches the given template in the default writer and returns the\n   * array of tokens it contains. Doing this ahead of time avoids the need to\n   * parse templates on the fly as they are rendered.\n   */\n  mustache.parse = function (template, tags) {\n    return defaultWriter.parse(template, tags);\n  };\n\n  /**\n   * Renders the `template` with the given `view` and `partials` using the\n   * default writer.\n   */\n  mustache.render = function (template, view, partials) {\n    return defaultWriter.render(template, view, partials);\n  };\n\n  // This is here for backwards compatibility with 0.4.x.\n  mustache.to_html = function (template, view, partials, send) {\n    var result = mustache.render(template, view, partials);\n\n    if (isFunction(send)) {\n      send(result);\n    } else {\n      return result;\n    }\n  };\n\n  // Export the escaping function so that the user may override it.\n  // See https://github.com/janl/mustache.js/issues/244\n  mustache.escape = escapeHtml;\n\n  // Export these mainly for testing, but also for advanced usage.\n  mustache.Scanner = Scanner;\n  mustache.Context = Context;\n  mustache.Writer = Writer;\n\n}));",
        "jquery": "/*!\n * jQuery JavaScript Library v2.1.3\n * http://jquery.com/\n *\n * Includes Sizzle.js\n * http://sizzlejs.com/\n *\n * Copyright 2005, 2014 jQuery Foundation, Inc. and other contributors\n * Released under the MIT license\n * http://jquery.org/license\n *\n * Date: 2014-12-18T15:11Z\n */\n\n(function( global, factory ) {\n\n\tif ( typeof module === \"object\" && typeof module.exports === \"object\" ) {\n\t\t// For CommonJS and CommonJS-like environments where a proper `window`\n\t\t// is present, execute the factory and get jQuery.\n\t\t// For environments that do not have a `window` with a `document`\n\t\t// (such as Node.js), expose a factory as module.exports.\n\t\t// This accentuates the need for the creation of a real `window`.\n\t\t// e.g. var jQuery = require(\"jquery\")(window);\n\t\t// See ticket #14549 for more info.\n\t\tmodule.exports = global.document ?\n\t\t\tfactory( global, true ) :\n\t\t\tfunction( w ) {\n\t\t\t\tif ( !w.document ) {\n\t\t\t\t\tthrow new Error( \"jQuery requires a window with a document\" );\n\t\t\t\t}\n\t\t\t\treturn factory( w );\n\t\t\t};\n\t} else {\n\t\tfactory( global );\n\t}\n\n// Pass this if window is not defined yet\n}(typeof window !== \"undefined\" ? window : this, function( window, noGlobal ) {\n\n// Support: Firefox 18+\n// Can't be in strict mode, several libs including ASP.NET trace\n// the stack via arguments.caller.callee and Firefox dies if\n// you try to trace through \"use strict\" call chains. (#13335)\n//\n\nvar arr = [];\n\nvar slice = arr.slice;\n\nvar concat = arr.concat;\n\nvar push = arr.push;\n\nvar indexOf = arr.indexOf;\n\nvar class2type = {};\n\nvar toString = class2type.toString;\n\nvar hasOwn = class2type.hasOwnProperty;\n\nvar support = {};\n\n\n\nvar\n\t// Use the correct document accordingly with window argument (sandbox)\n\tdocument = window.document,\n\n\tversion = \"2.1.3\",\n\n\t// Define a local copy of jQuery\n\tjQuery = function( selector, context ) {\n\t\t// The jQuery object is actually just the init constructor 'enhanced'\n\t\t// Need init if jQuery is called (just allow error to be thrown if not included)\n\t\treturn new jQuery.fn.init( selector, context );\n\t},\n\n\t// Support: Android<4.1\n\t// Make sure we trim BOM and NBSP\n\trtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g,\n\n\t// Matches dashed string for camelizing\n\trmsPrefix = /^-ms-/,\n\trdashAlpha = /-([\\da-z])/gi,\n\n\t// Used by jQuery.camelCase as callback to replace()\n\tfcamelCase = function( all, letter ) {\n\t\treturn letter.toUpperCase();\n\t};\n\njQuery.fn = jQuery.prototype = {\n\t// The current version of jQuery being used\n\tjquery: version,\n\n\tconstructor: jQuery,\n\n\t// Start with an empty selector\n\tselector: \"\",\n\n\t// The default length of a jQuery object is 0\n\tlength: 0,\n\n\ttoArray: function() {\n\t\treturn slice.call( this );\n\t},\n\n\t// Get the Nth element in the matched element set OR\n\t// Get the whole matched element set as a clean array\n\tget: function( num ) {\n\t\treturn num != null ?\n\n\t\t\t// Return just the one element from the set\n\t\t\t( num < 0 ? this[ num + this.length ] : this[ num ] ) :\n\n\t\t\t// Return all the elements in a clean array\n\t\t\tslice.call( this );\n\t},\n\n\t// Take an array of elements and push it onto the stack\n\t// (returning the new matched element set)\n\tpushStack: function( elems ) {\n\n\t\t// Build a new jQuery matched element set\n\t\tvar ret = jQuery.merge( this.constructor(), elems );\n\n\t\t// Add the old object onto the stack (as a reference)\n\t\tret.prevObject = this;\n\t\tret.context = this.context;\n\n\t\t// Return the newly-formed element set\n\t\treturn ret;\n\t},\n\n\t// Execute a callback for every element in the matched set.\n\t// (You can seed the arguments with an array of args, but this is\n\t// only used internally.)\n\teach: function( callback, args ) {\n\t\treturn jQuery.each( this, callback, args );\n\t},\n\n\tmap: function( callback ) {\n\t\treturn this.pushStack( jQuery.map(this, function( elem, i ) {\n\t\t\treturn callback.call( elem, i, elem );\n\t\t}));\n\t},\n\n\tslice: function() {\n\t\treturn this.pushStack( slice.apply( this, arguments ) );\n\t},\n\n\tfirst: function() {\n\t\treturn this.eq( 0 );\n\t},\n\n\tlast: function() {\n\t\treturn this.eq( -1 );\n\t},\n\n\teq: function( i ) {\n\t\tvar len = this.length,\n\t\t\tj = +i + ( i < 0 ? len : 0 );\n\t\treturn this.pushStack( j >= 0 && j < len ? [ this[j] ] : [] );\n\t},\n\n\tend: function() {\n\t\treturn this.prevObject || this.constructor(null);\n\t},\n\n\t// For internal use only.\n\t// Behaves like an Array's method, not like a jQuery method.\n\tpush: push,\n\tsort: arr.sort,\n\tsplice: arr.splice\n};\n\njQuery.extend = jQuery.fn.extend = function() {\n\tvar options, name, src, copy, copyIsArray, clone,\n\t\ttarget = arguments[0] || {},\n\t\ti = 1,\n\t\tlength = arguments.length,\n\t\tdeep = false;\n\n\t// Handle a deep copy situation\n\tif ( typeof target === \"boolean\" ) {\n\t\tdeep = target;\n\n\t\t// Skip the boolean and the target\n\t\ttarget = arguments[ i ] || {};\n\t\ti++;\n\t}\n\n\t// Handle case when target is a string or something (possible in deep copy)\n\tif ( typeof target !== \"object\" && !jQuery.isFunction(target) ) {\n\t\ttarget = {};\n\t}\n\n\t// Extend jQuery itself if only one argument is passed\n\tif ( i === length ) {\n\t\ttarget = this;\n\t\ti--;\n\t}\n\n\tfor ( ; i < length; i++ ) {\n\t\t// Only deal with non-null/undefined values\n\t\tif ( (options = arguments[ i ]) != null ) {\n\t\t\t// Extend the base object\n\t\t\tfor ( name in options ) {\n\t\t\t\tsrc = target[ name ];\n\t\t\t\tcopy = options[ name ];\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif ( target === copy ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\tif ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {\n\t\t\t\t\tif ( copyIsArray ) {\n\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\tclone = src && jQuery.isArray(src) ? src : [];\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclone = src && jQuery.isPlainObject(src) ? src : {};\n\t\t\t\t\t}\n\n\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\ttarget[ name ] = jQuery.extend( deep, clone, copy );\n\n\t\t\t\t// Don't bring in undefined values\n\t\t\t\t} else if ( copy !== undefined ) {\n\t\t\t\t\ttarget[ name ] = copy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\njQuery.extend({\n\t// Unique for each copy of jQuery on the page\n\texpando: \"jQuery\" + ( version + Math.random() ).replace( /\\D/g, \"\" ),\n\n\t// Assume jQuery is ready without the ready module\n\tisReady: true,\n\n\terror: function( msg ) {\n\t\tthrow new Error( msg );\n\t},\n\n\tnoop: function() {},\n\n\tisFunction: function( obj ) {\n\t\treturn jQuery.type(obj) === \"function\";\n\t},\n\n\tisArray: Array.isArray,\n\n\tisWindow: function( obj ) {\n\t\treturn obj != null && obj === obj.window;\n\t},\n\n\tisNumeric: function( obj ) {\n\t\t// parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n\t\t// ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n\t\t// subtraction forces infinities to NaN\n\t\t// adding 1 corrects loss of precision from parseFloat (#15100)\n\t\treturn !jQuery.isArray( obj ) && (obj - parseFloat( obj ) + 1) >= 0;\n\t},\n\n\tisPlainObject: function( obj ) {\n\t\t// Not plain objects:\n\t\t// - Any object or value whose internal [[Class]] property is not \"[object Object]\"\n\t\t// - DOM nodes\n\t\t// - window\n\t\tif ( jQuery.type( obj ) !== \"object\" || obj.nodeType || jQuery.isWindow( obj ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( obj.constructor &&\n\t\t\t\t!hasOwn.call( obj.constructor.prototype, \"isPrototypeOf\" ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// If the function hasn't returned already, we're confident that\n\t\t// |obj| is a plain object, created by {} or constructed with new Object\n\t\treturn true;\n\t},\n\n\tisEmptyObject: function( obj ) {\n\t\tvar name;\n\t\tfor ( name in obj ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t},\n\n\ttype: function( obj ) {\n\t\tif ( obj == null ) {\n\t\t\treturn obj + \"\";\n\t\t}\n\t\t// Support: Android<4.0, iOS<6 (functionish RegExp)\n\t\treturn typeof obj === \"object\" || typeof obj === \"function\" ?\n\t\t\tclass2type[ toString.call(obj) ] || \"object\" :\n\t\t\ttypeof obj;\n\t},\n\n\t// Evaluates a script in a global context\n\tglobalEval: function( code ) {\n\t\tvar script,\n\t\t\tindirect = eval;\n\n\t\tcode = jQuery.trim( code );\n\n\t\tif ( code ) {\n\t\t\t// If the code includes a valid, prologue position\n\t\t\t// strict mode pragma, execute code by injecting a\n\t\t\t// script tag into the document.\n\t\t\tif ( code.indexOf(\"use strict\") === 1 ) {\n\t\t\t\tscript = document.createElement(\"script\");\n\t\t\t\tscript.text = code;\n\t\t\t\tdocument.head.appendChild( script ).parentNode.removeChild( script );\n\t\t\t} else {\n\t\t\t// Otherwise, avoid the DOM node creation, insertion\n\t\t\t// and removal by using an indirect global eval\n\t\t\t\tindirect( code );\n\t\t\t}\n\t\t}\n\t},\n\n\t// Convert dashed to camelCase; used by the css and data modules\n\t// Support: IE9-11+\n\t// Microsoft forgot to hump their vendor prefix (#9572)\n\tcamelCase: function( string ) {\n\t\treturn string.replace( rmsPrefix, \"ms-\" ).replace( rdashAlpha, fcamelCase );\n\t},\n\n\tnodeName: function( elem, name ) {\n\t\treturn elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\n\t},\n\n\t// args is for internal usage only\n\teach: function( obj, callback, args ) {\n\t\tvar value,\n\t\t\ti = 0,\n\t\t\tlength = obj.length,\n\t\t\tisArray = isArraylike( obj );\n\n\t\tif ( args ) {\n\t\t\tif ( isArray ) {\n\t\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\t\tvalue = callback.apply( obj[ i ], args );\n\n\t\t\t\t\tif ( value === false ) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor ( i in obj ) {\n\t\t\t\t\tvalue = callback.apply( obj[ i ], args );\n\n\t\t\t\t\tif ( value === false ) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t// A special, fast, case for the most common use of each\n\t\t} else {\n\t\t\tif ( isArray ) {\n\t\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\t\tvalue = callback.call( obj[ i ], i, obj[ i ] );\n\n\t\t\t\t\tif ( value === false ) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor ( i in obj ) {\n\t\t\t\t\tvalue = callback.call( obj[ i ], i, obj[ i ] );\n\n\t\t\t\t\tif ( value === false ) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn obj;\n\t},\n\n\t// Support: Android<4.1\n\ttrim: function( text ) {\n\t\treturn text == null ?\n\t\t\t\"\" :\n\t\t\t( text + \"\" ).replace( rtrim, \"\" );\n\t},\n\n\t// results is for internal usage only\n\tmakeArray: function( arr, results ) {\n\t\tvar ret = results || [];\n\n\t\tif ( arr != null ) {\n\t\t\tif ( isArraylike( Object(arr) ) ) {\n\t\t\t\tjQuery.merge( ret,\n\t\t\t\t\ttypeof arr === \"string\" ?\n\t\t\t\t\t[ arr ] : arr\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tpush.call( ret, arr );\n\t\t\t}\n\t\t}\n\n\t\treturn ret;\n\t},\n\n\tinArray: function( elem, arr, i ) {\n\t\treturn arr == null ? -1 : indexOf.call( arr, elem, i );\n\t},\n\n\tmerge: function( first, second ) {\n\t\tvar len = +second.length,\n\t\t\tj = 0,\n\t\t\ti = first.length;\n\n\t\tfor ( ; j < len; j++ ) {\n\t\t\tfirst[ i++ ] = second[ j ];\n\t\t}\n\n\t\tfirst.length = i;\n\n\t\treturn first;\n\t},\n\n\tgrep: function( elems, callback, invert ) {\n\t\tvar callbackInverse,\n\t\t\tmatches = [],\n\t\t\ti = 0,\n\t\t\tlength = elems.length,\n\t\t\tcallbackExpect = !invert;\n\n\t\t// Go through the array, only saving the items\n\t\t// that pass the validator function\n\t\tfor ( ; i < length; i++ ) {\n\t\t\tcallbackInverse = !callback( elems[ i ], i );\n\t\t\tif ( callbackInverse !== callbackExpect ) {\n\t\t\t\tmatches.push( elems[ i ] );\n\t\t\t}\n\t\t}\n\n\t\treturn matches;\n\t},\n\n\t// arg is for internal usage only\n\tmap: function( elems, callback, arg ) {\n\t\tvar value,\n\t\t\ti = 0,\n\t\t\tlength = elems.length,\n\t\t\tisArray = isArraylike( elems ),\n\t\t\tret = [];\n\n\t\t// Go through the array, translating each of the items to their new values\n\t\tif ( isArray ) {\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Go through every key on the object,\n\t\t} else {\n\t\t\tfor ( i in elems ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Flatten any nested arrays\n\t\treturn concat.apply( [], ret );\n\t},\n\n\t// A global GUID counter for objects\n\tguid: 1,\n\n\t// Bind a function to a context, optionally partially applying any\n\t// arguments.\n\tproxy: function( fn, context ) {\n\t\tvar tmp, args, proxy;\n\n\t\tif ( typeof context === \"string\" ) {\n\t\t\ttmp = fn[ context ];\n\t\t\tcontext = fn;\n\t\t\tfn = tmp;\n\t\t}\n\n\t\t// Quick check to determine if target is callable, in the spec\n\t\t// this throws a TypeError, but we will just return undefined.\n\t\tif ( !jQuery.isFunction( fn ) ) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Simulated bind\n\t\targs = slice.call( arguments, 2 );\n\t\tproxy = function() {\n\t\t\treturn fn.apply( context || this, args.concat( slice.call( arguments ) ) );\n\t\t};\n\n\t\t// Set the guid of unique handler to the same of original handler, so it can be removed\n\t\tproxy.guid = fn.guid = fn.guid || jQuery.guid++;\n\n\t\treturn proxy;\n\t},\n\n\tnow: Date.now,\n\n\t// jQuery.support is not used in Core but other projects attach their\n\t// properties to it so it needs to exist.\n\tsupport: support\n});\n\n// Populate the class2type map\njQuery.each(\"Boolean Number String Function Array Date RegExp Object Error\".split(\" \"), function(i, name) {\n\tclass2type[ \"[object \" + name + \"]\" ] = name.toLowerCase();\n});\n\nfunction isArraylike( obj ) {\n\tvar length = obj.length,\n\t\ttype = jQuery.type( obj );\n\n\tif ( type === \"function\" || jQuery.isWindow( obj ) ) {\n\t\treturn false;\n\t}\n\n\tif ( obj.nodeType === 1 && length ) {\n\t\treturn true;\n\t}\n\n\treturn type === \"array\" || length === 0 ||\n\t\ttypeof length === \"number\" && length > 0 && ( length - 1 ) in obj;\n}\nvar Sizzle =\n/*!\n * Sizzle CSS Selector Engine v2.2.0-pre\n * http://sizzlejs.com/\n *\n * Copyright 2008, 2014 jQuery Foundation, Inc. and other contributors\n * Released under the MIT license\n * http://jquery.org/license\n *\n * Date: 2014-12-16\n */\n(function( window ) {\n\nvar i,\n\tsupport,\n\tExpr,\n\tgetText,\n\tisXML,\n\ttokenize,\n\tcompile,\n\tselect,\n\toutermostContext,\n\tsortInput,\n\thasDuplicate,\n\n\t// Local document vars\n\tsetDocument,\n\tdocument,\n\tdocElem,\n\tdocumentIsHTML,\n\trbuggyQSA,\n\trbuggyMatches,\n\tmatches,\n\tcontains,\n\n\t// Instance-specific data\n\texpando = \"sizzle\" + 1 * new Date(),\n\tpreferredDoc = window.document,\n\tdirruns = 0,\n\tdone = 0,\n\tclassCache = createCache(),\n\ttokenCache = createCache(),\n\tcompilerCache = createCache(),\n\tsortOrder = function( a, b ) {\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t}\n\t\treturn 0;\n\t},\n\n\t// General-purpose constants\n\tMAX_NEGATIVE = 1 << 31,\n\n\t// Instance methods\n\thasOwn = ({}).hasOwnProperty,\n\tarr = [],\n\tpop = arr.pop,\n\tpush_native = arr.push,\n\tpush = arr.push,\n\tslice = arr.slice,\n\t// Use a stripped-down indexOf as it's faster than native\n\t// http://jsperf.com/thor-indexof-vs-for/5\n\tindexOf = function( list, elem ) {\n\t\tvar i = 0,\n\t\t\tlen = list.length;\n\t\tfor ( ; i < len; i++ ) {\n\t\t\tif ( list[i] === elem ) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t},\n\n\tbooleans = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\",\n\n\t// Regular expressions\n\n\t// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace\n\twhitespace = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",\n\t// http://www.w3.org/TR/css3-syntax/#characters\n\tcharacterEncoding = \"(?:\\\\\\\\.|[\\\\w-]|[^\\\\x00-\\\\xa0])+\",\n\n\t// Loosely modeled on CSS identifier characters\n\t// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors\n\t// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier\n\tidentifier = characterEncoding.replace( \"w\", \"w#\" ),\n\n\t// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors\n\tattributes = \"\\\\[\" + whitespace + \"*(\" + characterEncoding + \")(?:\" + whitespace +\n\t\t// Operator (capture 2)\n\t\t\"*([*^$|!~]?=)\" + whitespace +\n\t\t// \"Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]\"\n\t\t\"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\" + identifier + \"))|)\" + whitespace +\n\t\t\"*\\\\]\",\n\n\tpseudos = \":(\" + characterEncoding + \")(?:\\\\((\" +\n\t\t// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\n\t\t// 1. quoted (capture 3; capture 4 or capture 5)\n\t\t\"('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|\" +\n\t\t// 2. simple (capture 6)\n\t\t\"((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + attributes + \")*)|\" +\n\t\t// 3. anything else (capture 2)\n\t\t\".*\" +\n\t\t\")\\\\)|)\",\n\n\t// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\n\trwhitespace = new RegExp( whitespace + \"+\", \"g\" ),\n\trtrim = new RegExp( \"^\" + whitespace + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" + whitespace + \"+$\", \"g\" ),\n\n\trcomma = new RegExp( \"^\" + whitespace + \"*,\" + whitespace + \"*\" ),\n\trcombinators = new RegExp( \"^\" + whitespace + \"*([>+~]|\" + whitespace + \")\" + whitespace + \"*\" ),\n\n\trattributeQuotes = new RegExp( \"=\" + whitespace + \"*([^\\\\]'\\\"]*?)\" + whitespace + \"*\\\\]\", \"g\" ),\n\n\trpseudo = new RegExp( pseudos ),\n\tridentifier = new RegExp( \"^\" + identifier + \"$\" ),\n\n\tmatchExpr = {\n\t\t\"ID\": new RegExp( \"^#(\" + characterEncoding + \")\" ),\n\t\t\"CLASS\": new RegExp( \"^\\\\.(\" + characterEncoding + \")\" ),\n\t\t\"TAG\": new RegExp( \"^(\" + characterEncoding.replace( \"w\", \"w*\" ) + \")\" ),\n\t\t\"ATTR\": new RegExp( \"^\" + attributes ),\n\t\t\"PSEUDO\": new RegExp( \"^\" + pseudos ),\n\t\t\"CHILD\": new RegExp( \"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" + whitespace +\n\t\t\t\"*(even|odd|(([+-]|)(\\\\d*)n|)\" + whitespace + \"*(?:([+-]|)\" + whitespace +\n\t\t\t\"*(\\\\d+)|))\" + whitespace + \"*\\\\)|)\", \"i\" ),\n\t\t\"bool\": new RegExp( \"^(?:\" + booleans + \")$\", \"i\" ),\n\t\t// For use in libraries implementing .is()\n\t\t// We use this for POS matching in `select`\n\t\t\"needsContext\": new RegExp( \"^\" + whitespace + \"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" +\n\t\t\twhitespace + \"*((?:-\\\\d)?\\\\d*)\" + whitespace + \"*\\\\)|)(?=[^-]|$)\", \"i\" )\n\t},\n\n\trinputs = /^(?:input|select|textarea|button)$/i,\n\trheader = /^h\\d$/i,\n\n\trnative = /^[^{]+\\{\\s*\\[native \\w/,\n\n\t// Easily-parseable/retrievable ID or TAG or CLASS selectors\n\trquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n\n\trsibling = /[+~]/,\n\trescape = /'|\\\\/g,\n\n\t// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters\n\trunescape = new RegExp( \"\\\\\\\\([\\\\da-f]{1,6}\" + whitespace + \"?|(\" + whitespace + \")|.)\", \"ig\" ),\n\tfunescape = function( _, escaped, escapedWhitespace ) {\n\t\tvar high = \"0x\" + escaped - 0x10000;\n\t\t// NaN means non-codepoint\n\t\t// Support: Firefox<24\n\t\t// Workaround erroneous numeric interpretation of +\"0x\"\n\t\treturn high !== high || escapedWhitespace ?\n\t\t\tescaped :\n\t\t\thigh < 0 ?\n\t\t\t\t// BMP codepoint\n\t\t\t\tString.fromCharCode( high + 0x10000 ) :\n\t\t\t\t// Supplemental Plane codepoint (surrogate pair)\n\t\t\t\tString.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );\n\t},\n\n\t// Used for iframes\n\t// See setDocument()\n\t// Removing the function wrapper causes a \"Permission Denied\"\n\t// error in IE\n\tunloadHandler = function() {\n\t\tsetDocument();\n\t};\n\n// Optimize for push.apply( _, NodeList )\ntry {\n\tpush.apply(\n\t\t(arr = slice.call( preferredDoc.childNodes )),\n\t\tpreferredDoc.childNodes\n\t);\n\t// Support: Android<4.0\n\t// Detect silently failing push.apply\n\tarr[ preferredDoc.childNodes.length ].nodeType;\n} catch ( e ) {\n\tpush = { apply: arr.length ?\n\n\t\t// Leverage slice if possible\n\t\tfunction( target, els ) {\n\t\t\tpush_native.apply( target, slice.call(els) );\n\t\t} :\n\n\t\t// Support: IE<9\n\t\t// Otherwise append directly\n\t\tfunction( target, els ) {\n\t\t\tvar j = target.length,\n\t\t\t\ti = 0;\n\t\t\t// Can't trust NodeList.length\n\t\t\twhile ( (target[j++] = els[i++]) ) {}\n\t\t\ttarget.length = j - 1;\n\t\t}\n\t};\n}\n\nfunction Sizzle( selector, context, results, seed ) {\n\tvar match, elem, m, nodeType,\n\t\t// QSA vars\n\t\ti, groups, old, nid, newContext, newSelector;\n\n\tif ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {\n\t\tsetDocument( context );\n\t}\n\n\tcontext = context || document;\n\tresults = results || [];\n\tnodeType = context.nodeType;\n\n\tif ( typeof selector !== \"string\" || !selector ||\n\t\tnodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {\n\n\t\treturn results;\n\t}\n\n\tif ( !seed && documentIsHTML ) {\n\n\t\t// Try to shortcut find operations when possible (e.g., not under DocumentFragment)\n\t\tif ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {\n\t\t\t// Speed-up: Sizzle(\"#ID\")\n\t\t\tif ( (m = match[1]) ) {\n\t\t\t\tif ( nodeType === 9 ) {\n\t\t\t\t\telem = context.getElementById( m );\n\t\t\t\t\t// Check parentNode to catch when Blackberry 4.6 returns\n\t\t\t\t\t// nodes that are no longer in the document (jQuery #6963)\n\t\t\t\t\tif ( elem && elem.parentNode ) {\n\t\t\t\t\t\t// Handle the case where IE, Opera, and Webkit return items\n\t\t\t\t\t\t// by name instead of ID\n\t\t\t\t\t\tif ( elem.id === m ) {\n\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// Context is not a document\n\t\t\t\t\tif ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&\n\t\t\t\t\t\tcontains( context, elem ) && elem.id === m ) {\n\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t// Speed-up: Sizzle(\"TAG\")\n\t\t\t} else if ( match[2] ) {\n\t\t\t\tpush.apply( results, context.getElementsByTagName( selector ) );\n\t\t\t\treturn results;\n\n\t\t\t// Speed-up: Sizzle(\".CLASS\")\n\t\t\t} else if ( (m = match[3]) && support.getElementsByClassName ) {\n\t\t\t\tpush.apply( results, context.getElementsByClassName( m ) );\n\t\t\t\treturn results;\n\t\t\t}\n\t\t}\n\n\t\t// QSA path\n\t\tif ( support.qsa && (!rbuggyQSA || !rbuggyQSA.test( selector )) ) {\n\t\t\tnid = old = expando;\n\t\t\tnewContext = context;\n\t\t\tnewSelector = nodeType !== 1 && selector;\n\n\t\t\t// qSA works strangely on Element-rooted queries\n\t\t\t// We can work around this by specifying an extra ID on the root\n\t\t\t// and working up from there (Thanks to Andrew Dupont for the technique)\n\t\t\t// IE 8 doesn't work on object elements\n\t\t\tif ( nodeType === 1 && context.nodeName.toLowerCase() !== \"object\" ) {\n\t\t\t\tgroups = tokenize( selector );\n\n\t\t\t\tif ( (old = context.getAttribute(\"id\")) ) {\n\t\t\t\t\tnid = old.replace( rescape, \"\\\\$&\" );\n\t\t\t\t} else {\n\t\t\t\t\tcontext.setAttribute( \"id\", nid );\n\t\t\t\t}\n\t\t\t\tnid = \"[id='\" + nid + \"'] \";\n\n\t\t\t\ti = groups.length;\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\tgroups[i] = nid + toSelector( groups[i] );\n\t\t\t\t}\n\t\t\t\tnewContext = rsibling.test( selector ) && testContext( context.parentNode ) || context;\n\t\t\t\tnewSelector = groups.join(\",\");\n\t\t\t}\n\n\t\t\tif ( newSelector ) {\n\t\t\t\ttry {\n\t\t\t\t\tpush.apply( results,\n\t\t\t\t\t\tnewContext.querySelectorAll( newSelector )\n\t\t\t\t\t);\n\t\t\t\t\treturn results;\n\t\t\t\t} catch(qsaError) {\n\t\t\t\t} finally {\n\t\t\t\t\tif ( !old ) {\n\t\t\t\t\t\tcontext.removeAttribute(\"id\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// All others\n\treturn select( selector.replace( rtrim, \"$1\" ), context, results, seed );\n}\n\n/**\n * Create key-value caches of limited size\n * @returns {Function(string, Object)} Returns the Object data after storing it on itself with\n *\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n *\tdeleting the oldest entry\n */\nfunction createCache() {\n\tvar keys = [];\n\n\tfunction cache( key, value ) {\n\t\t// Use (key + \" \") to avoid collision with native prototype properties (see Issue #157)\n\t\tif ( keys.push( key + \" \" ) > Expr.cacheLength ) {\n\t\t\t// Only keep the most recent entries\n\t\t\tdelete cache[ keys.shift() ];\n\t\t}\n\t\treturn (cache[ key + \" \" ] = value);\n\t}\n\treturn cache;\n}\n\n/**\n * Mark a function for special use by Sizzle\n * @param {Function} fn The function to mark\n */\nfunction markFunction( fn ) {\n\tfn[ expando ] = true;\n\treturn fn;\n}\n\n/**\n * Support testing using an element\n * @param {Function} fn Passed the created div and expects a boolean result\n */\nfunction assert( fn ) {\n\tvar div = document.createElement(\"div\");\n\n\ttry {\n\t\treturn !!fn( div );\n\t} catch (e) {\n\t\treturn false;\n\t} finally {\n\t\t// Remove from its parent by default\n\t\tif ( div.parentNode ) {\n\t\t\tdiv.parentNode.removeChild( div );\n\t\t}\n\t\t// release memory in IE\n\t\tdiv = null;\n\t}\n}\n\n/**\n * Adds the same handler for all of the specified attrs\n * @param {String} attrs Pipe-separated list of attributes\n * @param {Function} handler The method that will be applied\n */\nfunction addHandle( attrs, handler ) {\n\tvar arr = attrs.split(\"|\"),\n\t\ti = attrs.length;\n\n\twhile ( i-- ) {\n\t\tExpr.attrHandle[ arr[i] ] = handler;\n\t}\n}\n\n/**\n * Checks document order of two siblings\n * @param {Element} a\n * @param {Element} b\n * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b\n */\nfunction siblingCheck( a, b ) {\n\tvar cur = b && a,\n\t\tdiff = cur && a.nodeType === 1 && b.nodeType === 1 &&\n\t\t\t( ~b.sourceIndex || MAX_NEGATIVE ) -\n\t\t\t( ~a.sourceIndex || MAX_NEGATIVE );\n\n\t// Use IE sourceIndex if available on both nodes\n\tif ( diff ) {\n\t\treturn diff;\n\t}\n\n\t// Check if b follows a\n\tif ( cur ) {\n\t\twhile ( (cur = cur.nextSibling) ) {\n\t\t\tif ( cur === b ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn a ? 1 : -1;\n}\n\n/**\n * Returns a function to use in pseudos for input types\n * @param {String} type\n */\nfunction createInputPseudo( type ) {\n\treturn function( elem ) {\n\t\tvar name = elem.nodeName.toLowerCase();\n\t\treturn name === \"input\" && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for buttons\n * @param {String} type\n */\nfunction createButtonPseudo( type ) {\n\treturn function( elem ) {\n\t\tvar name = elem.nodeName.toLowerCase();\n\t\treturn (name === \"input\" || name === \"button\") && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for positionals\n * @param {Function} fn\n */\nfunction createPositionalPseudo( fn ) {\n\treturn markFunction(function( argument ) {\n\t\targument = +argument;\n\t\treturn markFunction(function( seed, matches ) {\n\t\t\tvar j,\n\t\t\t\tmatchIndexes = fn( [], seed.length, argument ),\n\t\t\t\ti = matchIndexes.length;\n\n\t\t\t// Match elements found at the specified indexes\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( seed[ (j = matchIndexes[i]) ] ) {\n\t\t\t\t\tseed[j] = !(matches[j] = seed[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n}\n\n/**\n * Checks a node for validity as a Sizzle context\n * @param {Element|Object=} context\n * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\n */\nfunction testContext( context ) {\n\treturn context && typeof context.getElementsByTagName !== \"undefined\" && context;\n}\n\n// Expose support vars for convenience\nsupport = Sizzle.support = {};\n\n/**\n * Detects XML nodes\n * @param {Element|Object} elem An element or a document\n * @returns {Boolean} True iff elem is a non-HTML XML node\n */\nisXML = Sizzle.isXML = function( elem ) {\n\t// documentElement is verified for cases where it doesn't yet exist\n\t// (such as loading iframes in IE - #4833)\n\tvar documentElement = elem && (elem.ownerDocument || elem).documentElement;\n\treturn documentElement ? documentElement.nodeName !== \"HTML\" : false;\n};\n\n/**\n * Sets document-related variables once based on the current document\n * @param {Element|Object} [doc] An element or document object to use to set the document\n * @returns {Object} Returns the current document\n */\nsetDocument = Sizzle.setDocument = function( node ) {\n\tvar hasCompare, parent,\n\t\tdoc = node ? node.ownerDocument || node : preferredDoc;\n\n\t// If no document and documentElement is available, return\n\tif ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {\n\t\treturn document;\n\t}\n\n\t// Set our document\n\tdocument = doc;\n\tdocElem = doc.documentElement;\n\tparent = doc.defaultView;\n\n\t// Support: IE>8\n\t// If iframe document is assigned to \"document\" variable and if iframe has been reloaded,\n\t// IE will throw \"permission denied\" error when accessing \"document\" variable, see jQuery #13936\n\t// IE6-8 do not support the defaultView property so parent will be undefined\n\tif ( parent && parent !== parent.top ) {\n\t\t// IE11 does not have attachEvent, so all must suffer\n\t\tif ( parent.addEventListener ) {\n\t\t\tparent.addEventListener( \"unload\", unloadHandler, false );\n\t\t} else if ( parent.attachEvent ) {\n\t\t\tparent.attachEvent( \"onunload\", unloadHandler );\n\t\t}\n\t}\n\n\t/* Support tests\n\t---------------------------------------------------------------------- */\n\tdocumentIsHTML = !isXML( doc );\n\n\t/* Attributes\n\t---------------------------------------------------------------------- */\n\n\t// Support: IE<8\n\t// Verify that getAttribute really returns attributes and not properties\n\t// (excepting IE8 booleans)\n\tsupport.attributes = assert(function( div ) {\n\t\tdiv.className = \"i\";\n\t\treturn !div.getAttribute(\"className\");\n\t});\n\n\t/* getElement(s)By*\n\t---------------------------------------------------------------------- */\n\n\t// Check if getElementsByTagName(\"*\") returns only elements\n\tsupport.getElementsByTagName = assert(function( div ) {\n\t\tdiv.appendChild( doc.createComment(\"\") );\n\t\treturn !div.getElementsByTagName(\"*\").length;\n\t});\n\n\t// Support: IE<9\n\tsupport.getElementsByClassName = rnative.test( doc.getElementsByClassName );\n\n\t// Support: IE<10\n\t// Check if getElementById returns elements by name\n\t// The broken getElementById methods don't pick up programatically-set names,\n\t// so use a roundabout getElementsByName test\n\tsupport.getById = assert(function( div ) {\n\t\tdocElem.appendChild( div ).id = expando;\n\t\treturn !doc.getElementsByName || !doc.getElementsByName( expando ).length;\n\t});\n\n\t// ID find and filter\n\tif ( support.getById ) {\n\t\tExpr.find[\"ID\"] = function( id, context ) {\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n\t\t\t\tvar m = context.getElementById( id );\n\t\t\t\t// Check parentNode to catch when Blackberry 4.6 returns\n\t\t\t\t// nodes that are no longer in the document #6963\n\t\t\t\treturn m && m.parentNode ? [ m ] : [];\n\t\t\t}\n\t\t};\n\t\tExpr.filter[\"ID\"] = function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn elem.getAttribute(\"id\") === attrId;\n\t\t\t};\n\t\t};\n\t} else {\n\t\t// Support: IE6/7\n\t\t// getElementById is not reliable as a find shortcut\n\t\tdelete Expr.find[\"ID\"];\n\n\t\tExpr.filter[\"ID\"] =  function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\tvar node = typeof elem.getAttributeNode !== \"undefined\" && elem.getAttributeNode(\"id\");\n\t\t\t\treturn node && node.value === attrId;\n\t\t\t};\n\t\t};\n\t}\n\n\t// Tag\n\tExpr.find[\"TAG\"] = support.getElementsByTagName ?\n\t\tfunction( tag, context ) {\n\t\t\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\n\t\t\t\treturn context.getElementsByTagName( tag );\n\n\t\t\t// DocumentFragment nodes don't have gEBTN\n\t\t\t} else if ( support.qsa ) {\n\t\t\t\treturn context.querySelectorAll( tag );\n\t\t\t}\n\t\t} :\n\n\t\tfunction( tag, context ) {\n\t\t\tvar elem,\n\t\t\t\ttmp = [],\n\t\t\t\ti = 0,\n\t\t\t\t// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too\n\t\t\t\tresults = context.getElementsByTagName( tag );\n\n\t\t\t// Filter out possible comments\n\t\t\tif ( tag === \"*\" ) {\n\t\t\t\twhile ( (elem = results[i++]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\ttmp.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn tmp;\n\t\t\t}\n\t\t\treturn results;\n\t\t};\n\n\t// Class\n\tExpr.find[\"CLASS\"] = support.getElementsByClassName && function( className, context ) {\n\t\tif ( documentIsHTML ) {\n\t\t\treturn context.getElementsByClassName( className );\n\t\t}\n\t};\n\n\t/* QSA/matchesSelector\n\t---------------------------------------------------------------------- */\n\n\t// QSA and matchesSelector support\n\n\t// matchesSelector(:active) reports false when true (IE9/Opera 11.5)\n\trbuggyMatches = [];\n\n\t// qSa(:focus) reports false when true (Chrome 21)\n\t// We allow this because of a bug in IE8/9 that throws an error\n\t// whenever `document.activeElement` is accessed on an iframe\n\t// So, we allow :focus to pass through QSA all the time to avoid the IE error\n\t// See http://bugs.jquery.com/ticket/13378\n\trbuggyQSA = [];\n\n\tif ( (support.qsa = rnative.test( doc.querySelectorAll )) ) {\n\t\t// Build QSA regex\n\t\t// Regex strategy adopted from Diego Perini\n\t\tassert(function( div ) {\n\t\t\t// Select is set to empty string on purpose\n\t\t\t// This is to test IE's treatment of not explicitly\n\t\t\t// setting a boolean content attribute,\n\t\t\t// since its presence should be enough\n\t\t\t// http://bugs.jquery.com/ticket/12359\n\t\t\tdocElem.appendChild( div ).innerHTML = \"<a id='\" + expando + \"'></a>\" +\n\t\t\t\t\"<select id='\" + expando + \"-\\f]' msallowcapture=''>\" +\n\t\t\t\t\"<option selected=''></option></select>\";\n\n\t\t\t// Support: IE8, Opera 11-12.16\n\t\t\t// Nothing should be selected when empty strings follow ^= or $= or *=\n\t\t\t// The test attribute must be unknown in Opera but \"safe\" for WinRT\n\t\t\t// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section\n\t\t\tif ( div.querySelectorAll(\"[msallowcapture^='']\").length ) {\n\t\t\t\trbuggyQSA.push( \"[*^$]=\" + whitespace + \"*(?:''|\\\"\\\")\" );\n\t\t\t}\n\n\t\t\t// Support: IE8\n\t\t\t// Boolean attributes and \"value\" are not treated correctly\n\t\t\tif ( !div.querySelectorAll(\"[selected]\").length ) {\n\t\t\t\trbuggyQSA.push( \"\\\\[\" + whitespace + \"*(?:value|\" + booleans + \")\" );\n\t\t\t}\n\n\t\t\t// Support: Chrome<29, Android<4.2+, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.7+\n\t\t\tif ( !div.querySelectorAll( \"[id~=\" + expando + \"-]\" ).length ) {\n\t\t\t\trbuggyQSA.push(\"~=\");\n\t\t\t}\n\n\t\t\t// Webkit/Opera - :checked should return selected option elements\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\t// IE8 throws error here and will not see later tests\n\t\t\tif ( !div.querySelectorAll(\":checked\").length ) {\n\t\t\t\trbuggyQSA.push(\":checked\");\n\t\t\t}\n\n\t\t\t// Support: Safari 8+, iOS 8+\n\t\t\t// https://bugs.webkit.org/show_bug.cgi?id=136851\n\t\t\t// In-page `selector#id sibing-combinator selector` fails\n\t\t\tif ( !div.querySelectorAll( \"a#\" + expando + \"+*\" ).length ) {\n\t\t\t\trbuggyQSA.push(\".#.+[+~]\");\n\t\t\t}\n\t\t});\n\n\t\tassert(function( div ) {\n\t\t\t// Support: Windows 8 Native Apps\n\t\t\t// The type and name attributes are restricted during .innerHTML assignment\n\t\t\tvar input = doc.createElement(\"input\");\n\t\t\tinput.setAttribute( \"type\", \"hidden\" );\n\t\t\tdiv.appendChild( input ).setAttribute( \"name\", \"D\" );\n\n\t\t\t// Support: IE8\n\t\t\t// Enforce case-sensitivity of name attribute\n\t\t\tif ( div.querySelectorAll(\"[name=d]\").length ) {\n\t\t\t\trbuggyQSA.push( \"name\" + whitespace + \"*[*^$|!~]?=\" );\n\t\t\t}\n\n\t\t\t// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)\n\t\t\t// IE8 throws error here and will not see later tests\n\t\t\tif ( !div.querySelectorAll(\":enabled\").length ) {\n\t\t\t\trbuggyQSA.push( \":enabled\", \":disabled\" );\n\t\t\t}\n\n\t\t\t// Opera 10-11 does not throw on post-comma invalid pseudos\n\t\t\tdiv.querySelectorAll(\"*,:x\");\n\t\t\trbuggyQSA.push(\",.*:\");\n\t\t});\n\t}\n\n\tif ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||\n\t\tdocElem.webkitMatchesSelector ||\n\t\tdocElem.mozMatchesSelector ||\n\t\tdocElem.oMatchesSelector ||\n\t\tdocElem.msMatchesSelector) )) ) {\n\n\t\tassert(function( div ) {\n\t\t\t// Check to see if it's possible to do matchesSelector\n\t\t\t// on a disconnected node (IE 9)\n\t\t\tsupport.disconnectedMatch = matches.call( div, \"div\" );\n\n\t\t\t// This should fail with an exception\n\t\t\t// Gecko does not error, returns false instead\n\t\t\tmatches.call( div, \"[s!='']:x\" );\n\t\t\trbuggyMatches.push( \"!=\", pseudos );\n\t\t});\n\t}\n\n\trbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join(\"|\") );\n\trbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join(\"|\") );\n\n\t/* Contains\n\t---------------------------------------------------------------------- */\n\thasCompare = rnative.test( docElem.compareDocumentPosition );\n\n\t// Element contains another\n\t// Purposefully does not implement inclusive descendent\n\t// As in, an element does not contain itself\n\tcontains = hasCompare || rnative.test( docElem.contains ) ?\n\t\tfunction( a, b ) {\n\t\t\tvar adown = a.nodeType === 9 ? a.documentElement : a,\n\t\t\t\tbup = b && b.parentNode;\n\t\t\treturn a === bup || !!( bup && bup.nodeType === 1 && (\n\t\t\t\tadown.contains ?\n\t\t\t\t\tadown.contains( bup ) :\n\t\t\t\t\ta.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16\n\t\t\t));\n\t\t} :\n\t\tfunction( a, b ) {\n\t\t\tif ( b ) {\n\t\t\t\twhile ( (b = b.parentNode) ) {\n\t\t\t\t\tif ( b === a ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\n\t/* Sorting\n\t---------------------------------------------------------------------- */\n\n\t// Document order sorting\n\tsortOrder = hasCompare ?\n\tfunction( a, b ) {\n\n\t\t// Flag for duplicate removal\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\t// Sort on method existence if only one input has compareDocumentPosition\n\t\tvar compare = !a.compareDocumentPosition - !b.compareDocumentPosition;\n\t\tif ( compare ) {\n\t\t\treturn compare;\n\t\t}\n\n\t\t// Calculate position if both inputs belong to the same document\n\t\tcompare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?\n\t\t\ta.compareDocumentPosition( b ) :\n\n\t\t\t// Otherwise we know they are disconnected\n\t\t\t1;\n\n\t\t// Disconnected nodes\n\t\tif ( compare & 1 ||\n\t\t\t(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {\n\n\t\t\t// Choose the first element that is related to our preferred document\n\t\t\tif ( a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tif ( b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\t// Maintain original order\n\t\t\treturn sortInput ?\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n\t\t\t\t0;\n\t\t}\n\n\t\treturn compare & 4 ? -1 : 1;\n\t} :\n\tfunction( a, b ) {\n\t\t// Exit early if the nodes are identical\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\taup = a.parentNode,\n\t\t\tbup = b.parentNode,\n\t\t\tap = [ a ],\n\t\t\tbp = [ b ];\n\n\t\t// Parentless nodes are either documents or disconnected\n\t\tif ( !aup || !bup ) {\n\t\t\treturn a === doc ? -1 :\n\t\t\t\tb === doc ? 1 :\n\t\t\t\taup ? -1 :\n\t\t\t\tbup ? 1 :\n\t\t\t\tsortInput ?\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n\t\t\t\t0;\n\n\t\t// If the nodes are siblings, we can do a quick check\n\t\t} else if ( aup === bup ) {\n\t\t\treturn siblingCheck( a, b );\n\t\t}\n\n\t\t// Otherwise we need full lists of their ancestors for comparison\n\t\tcur = a;\n\t\twhile ( (cur = cur.parentNode) ) {\n\t\t\tap.unshift( cur );\n\t\t}\n\t\tcur = b;\n\t\twhile ( (cur = cur.parentNode) ) {\n\t\t\tbp.unshift( cur );\n\t\t}\n\n\t\t// Walk down the tree looking for a discrepancy\n\t\twhile ( ap[i] === bp[i] ) {\n\t\t\ti++;\n\t\t}\n\n\t\treturn i ?\n\t\t\t// Do a sibling check if the nodes have a common ancestor\n\t\t\tsiblingCheck( ap[i], bp[i] ) :\n\n\t\t\t// Otherwise nodes in our document sort first\n\t\t\tap[i] === preferredDoc ? -1 :\n\t\t\tbp[i] === preferredDoc ? 1 :\n\t\t\t0;\n\t};\n\n\treturn doc;\n};\n\nSizzle.matches = function( expr, elements ) {\n\treturn Sizzle( expr, null, null, elements );\n};\n\nSizzle.matchesSelector = function( elem, expr ) {\n\t// Set document vars if needed\n\tif ( ( elem.ownerDocument || elem ) !== document ) {\n\t\tsetDocument( elem );\n\t}\n\n\t// Make sure that attribute selectors are quoted\n\texpr = expr.replace( rattributeQuotes, \"='$1']\" );\n\n\tif ( support.matchesSelector && documentIsHTML &&\n\t\t( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&\n\t\t( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {\n\n\t\ttry {\n\t\t\tvar ret = matches.call( elem, expr );\n\n\t\t\t// IE 9's matchesSelector returns false on disconnected nodes\n\t\t\tif ( ret || support.disconnectedMatch ||\n\t\t\t\t\t// As well, disconnected nodes are said to be in a document\n\t\t\t\t\t// fragment in IE 9\n\t\t\t\t\telem.document && elem.document.nodeType !== 11 ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t} catch (e) {}\n\t}\n\n\treturn Sizzle( expr, document, null, [ elem ] ).length > 0;\n};\n\nSizzle.contains = function( context, elem ) {\n\t// Set document vars if needed\n\tif ( ( context.ownerDocument || context ) !== document ) {\n\t\tsetDocument( context );\n\t}\n\treturn contains( context, elem );\n};\n\nSizzle.attr = function( elem, name ) {\n\t// Set document vars if needed\n\tif ( ( elem.ownerDocument || elem ) !== document ) {\n\t\tsetDocument( elem );\n\t}\n\n\tvar fn = Expr.attrHandle[ name.toLowerCase() ],\n\t\t// Don't get fooled by Object.prototype properties (jQuery #13807)\n\t\tval = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?\n\t\t\tfn( elem, name, !documentIsHTML ) :\n\t\t\tundefined;\n\n\treturn val !== undefined ?\n\t\tval :\n\t\tsupport.attributes || !documentIsHTML ?\n\t\t\telem.getAttribute( name ) :\n\t\t\t(val = elem.getAttributeNode(name)) && val.specified ?\n\t\t\t\tval.value :\n\t\t\t\tnull;\n};\n\nSizzle.error = function( msg ) {\n\tthrow new Error( \"Syntax error, unrecognized expression: \" + msg );\n};\n\n/**\n * Document sorting and removing duplicates\n * @param {ArrayLike} results\n */\nSizzle.uniqueSort = function( results ) {\n\tvar elem,\n\t\tduplicates = [],\n\t\tj = 0,\n\t\ti = 0;\n\n\t// Unless we *know* we can detect duplicates, assume their presence\n\thasDuplicate = !support.detectDuplicates;\n\tsortInput = !support.sortStable && results.slice( 0 );\n\tresults.sort( sortOrder );\n\n\tif ( hasDuplicate ) {\n\t\twhile ( (elem = results[i++]) ) {\n\t\t\tif ( elem === results[ i ] ) {\n\t\t\t\tj = duplicates.push( i );\n\t\t\t}\n\t\t}\n\t\twhile ( j-- ) {\n\t\t\tresults.splice( duplicates[ j ], 1 );\n\t\t}\n\t}\n\n\t// Clear input after sorting to release objects\n\t// See https://github.com/jquery/sizzle/pull/225\n\tsortInput = null;\n\n\treturn results;\n};\n\n/**\n * Utility function for retrieving the text value of an array of DOM nodes\n * @param {Array|Element} elem\n */\ngetText = Sizzle.getText = function( elem ) {\n\tvar node,\n\t\tret = \"\",\n\t\ti = 0,\n\t\tnodeType = elem.nodeType;\n\n\tif ( !nodeType ) {\n\t\t// If no nodeType, this is expected to be an array\n\t\twhile ( (node = elem[i++]) ) {\n\t\t\t// Do not traverse comment nodes\n\t\t\tret += getText( node );\n\t\t}\n\t} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {\n\t\t// Use textContent for elements\n\t\t// innerText usage removed for consistency of new lines (jQuery #11153)\n\t\tif ( typeof elem.textContent === \"string\" ) {\n\t\t\treturn elem.textContent;\n\t\t} else {\n\t\t\t// Traverse its children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tret += getText( elem );\n\t\t\t}\n\t\t}\n\t} else if ( nodeType === 3 || nodeType === 4 ) {\n\t\treturn elem.nodeValue;\n\t}\n\t// Do not include comment or processing instruction nodes\n\n\treturn ret;\n};\n\nExpr = Sizzle.selectors = {\n\n\t// Can be adjusted by the user\n\tcacheLength: 50,\n\n\tcreatePseudo: markFunction,\n\n\tmatch: matchExpr,\n\n\tattrHandle: {},\n\n\tfind: {},\n\n\trelative: {\n\t\t\">\": { dir: \"parentNode\", first: true },\n\t\t\" \": { dir: \"parentNode\" },\n\t\t\"+\": { dir: \"previousSibling\", first: true },\n\t\t\"~\": { dir: \"previousSibling\" }\n\t},\n\n\tpreFilter: {\n\t\t\"ATTR\": function( match ) {\n\t\t\tmatch[1] = match[1].replace( runescape, funescape );\n\n\t\t\t// Move the given value to match[3] whether quoted or unquoted\n\t\t\tmatch[3] = ( match[3] || match[4] || match[5] || \"\" ).replace( runescape, funescape );\n\n\t\t\tif ( match[2] === \"~=\" ) {\n\t\t\t\tmatch[3] = \" \" + match[3] + \" \";\n\t\t\t}\n\n\t\t\treturn match.slice( 0, 4 );\n\t\t},\n\n\t\t\"CHILD\": function( match ) {\n\t\t\t/* matches from matchExpr[\"CHILD\"]\n\t\t\t\t1 type (only|nth|...)\n\t\t\t\t2 what (child|of-type)\n\t\t\t\t3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\n\t\t\t\t4 xn-component of xn+y argument ([+-]?\\d*n|)\n\t\t\t\t5 sign of xn-component\n\t\t\t\t6 x of xn-component\n\t\t\t\t7 sign of y-component\n\t\t\t\t8 y of y-component\n\t\t\t*/\n\t\t\tmatch[1] = match[1].toLowerCase();\n\n\t\t\tif ( match[1].slice( 0, 3 ) === \"nth\" ) {\n\t\t\t\t// nth-* requires argument\n\t\t\t\tif ( !match[3] ) {\n\t\t\t\t\tSizzle.error( match[0] );\n\t\t\t\t}\n\n\t\t\t\t// numeric x and y parameters for Expr.filter.CHILD\n\t\t\t\t// remember that false/true cast respectively to 0/1\n\t\t\t\tmatch[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === \"even\" || match[3] === \"odd\" ) );\n\t\t\t\tmatch[5] = +( ( match[7] + match[8] ) || match[3] === \"odd\" );\n\n\t\t\t// other types prohibit arguments\n\t\t\t} else if ( match[3] ) {\n\t\t\t\tSizzle.error( match[0] );\n\t\t\t}\n\n\t\t\treturn match;\n\t\t},\n\n\t\t\"PSEUDO\": function( match ) {\n\t\t\tvar excess,\n\t\t\t\tunquoted = !match[6] && match[2];\n\n\t\t\tif ( matchExpr[\"CHILD\"].test( match[0] ) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t// Accept quoted arguments as-is\n\t\t\tif ( match[3] ) {\n\t\t\t\tmatch[2] = match[4] || match[5] || \"\";\n\n\t\t\t// Strip excess characters from unquoted arguments\n\t\t\t} else if ( unquoted && rpseudo.test( unquoted ) &&\n\t\t\t\t// Get excess from tokenize (recursively)\n\t\t\t\t(excess = tokenize( unquoted, true )) &&\n\t\t\t\t// advance to the next closing parenthesis\n\t\t\t\t(excess = unquoted.indexOf( \")\", unquoted.length - excess ) - unquoted.length) ) {\n\n\t\t\t\t// excess is a negative index\n\t\t\t\tmatch[0] = match[0].slice( 0, excess );\n\t\t\t\tmatch[2] = unquoted.slice( 0, excess );\n\t\t\t}\n\n\t\t\t// Return only captures needed by the pseudo filter method (type and argument)\n\t\t\treturn match.slice( 0, 3 );\n\t\t}\n\t},\n\n\tfilter: {\n\n\t\t\"TAG\": function( nodeNameSelector ) {\n\t\t\tvar nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn nodeNameSelector === \"*\" ?\n\t\t\t\tfunction() { return true; } :\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn elem.nodeName && elem.nodeName.toLowerCase() === nodeName;\n\t\t\t\t};\n\t\t},\n\n\t\t\"CLASS\": function( className ) {\n\t\t\tvar pattern = classCache[ className + \" \" ];\n\n\t\t\treturn pattern ||\n\t\t\t\t(pattern = new RegExp( \"(^|\" + whitespace + \")\" + className + \"(\" + whitespace + \"|$)\" )) &&\n\t\t\t\tclassCache( className, function( elem ) {\n\t\t\t\t\treturn pattern.test( typeof elem.className === \"string\" && elem.className || typeof elem.getAttribute !== \"undefined\" && elem.getAttribute(\"class\") || \"\" );\n\t\t\t\t});\n\t\t},\n\n\t\t\"ATTR\": function( name, operator, check ) {\n\t\t\treturn function( elem ) {\n\t\t\t\tvar result = Sizzle.attr( elem, name );\n\n\t\t\t\tif ( result == null ) {\n\t\t\t\t\treturn operator === \"!=\";\n\t\t\t\t}\n\t\t\t\tif ( !operator ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tresult += \"\";\n\n\t\t\t\treturn operator === \"=\" ? result === check :\n\t\t\t\t\toperator === \"!=\" ? result !== check :\n\t\t\t\t\toperator === \"^=\" ? check && result.indexOf( check ) === 0 :\n\t\t\t\t\toperator === \"*=\" ? check && result.indexOf( check ) > -1 :\n\t\t\t\t\toperator === \"$=\" ? check && result.slice( -check.length ) === check :\n\t\t\t\t\toperator === \"~=\" ? ( \" \" + result.replace( rwhitespace, \" \" ) + \" \" ).indexOf( check ) > -1 :\n\t\t\t\t\toperator === \"|=\" ? result === check || result.slice( 0, check.length + 1 ) === check + \"-\" :\n\t\t\t\t\tfalse;\n\t\t\t};\n\t\t},\n\n\t\t\"CHILD\": function( type, what, argument, first, last ) {\n\t\t\tvar simple = type.slice( 0, 3 ) !== \"nth\",\n\t\t\t\tforward = type.slice( -4 ) !== \"last\",\n\t\t\t\tofType = what === \"of-type\";\n\n\t\t\treturn first === 1 && last === 0 ?\n\n\t\t\t\t// Shortcut for :nth-*(n)\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn !!elem.parentNode;\n\t\t\t\t} :\n\n\t\t\t\tfunction( elem, context, xml ) {\n\t\t\t\t\tvar cache, outerCache, node, diff, nodeIndex, start,\n\t\t\t\t\t\tdir = simple !== forward ? \"nextSibling\" : \"previousSibling\",\n\t\t\t\t\t\tparent = elem.parentNode,\n\t\t\t\t\t\tname = ofType && elem.nodeName.toLowerCase(),\n\t\t\t\t\t\tuseCache = !xml && !ofType;\n\n\t\t\t\t\tif ( parent ) {\n\n\t\t\t\t\t\t// :(first|last|only)-(child|of-type)\n\t\t\t\t\t\tif ( simple ) {\n\t\t\t\t\t\t\twhile ( dir ) {\n\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\twhile ( (node = node[ dir ]) ) {\n\t\t\t\t\t\t\t\t\tif ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {\n\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Reverse direction for :only-* (if we haven't yet done so)\n\t\t\t\t\t\t\t\tstart = dir = type === \"only\" && !start && \"nextSibling\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tstart = [ forward ? parent.firstChild : parent.lastChild ];\n\n\t\t\t\t\t\t// non-xml :nth-child(...) stores cache data on `parent`\n\t\t\t\t\t\tif ( forward && useCache ) {\n\t\t\t\t\t\t\t// Seek `elem` from a previously-cached index\n\t\t\t\t\t\t\touterCache = parent[ expando ] || (parent[ expando ] = {});\n\t\t\t\t\t\t\tcache = outerCache[ type ] || [];\n\t\t\t\t\t\t\tnodeIndex = cache[0] === dirruns && cache[1];\n\t\t\t\t\t\t\tdiff = cache[0] === dirruns && cache[2];\n\t\t\t\t\t\t\tnode = nodeIndex && parent.childNodes[ nodeIndex ];\n\n\t\t\t\t\t\t\twhile ( (node = ++nodeIndex && node && node[ dir ] ||\n\n\t\t\t\t\t\t\t\t// Fallback to seeking `elem` from the start\n\t\t\t\t\t\t\t\t(diff = nodeIndex = 0) || start.pop()) ) {\n\n\t\t\t\t\t\t\t\t// When found, cache indexes on `parent` and break\n\t\t\t\t\t\t\t\tif ( node.nodeType === 1 && ++diff && node === elem ) {\n\t\t\t\t\t\t\t\t\touterCache[ type ] = [ dirruns, nodeIndex, diff ];\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Use previously-cached element index if available\n\t\t\t\t\t\t} else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {\n\t\t\t\t\t\t\tdiff = cache[1];\n\n\t\t\t\t\t\t// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Use the same loop as above to seek `elem` from the start\n\t\t\t\t\t\t\twhile ( (node = ++nodeIndex && node && node[ dir ] ||\n\t\t\t\t\t\t\t\t(diff = nodeIndex = 0) || start.pop()) ) {\n\n\t\t\t\t\t\t\t\tif ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {\n\t\t\t\t\t\t\t\t\t// Cache the index of each encountered element\n\t\t\t\t\t\t\t\t\tif ( useCache ) {\n\t\t\t\t\t\t\t\t\t\t(node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tif ( node === elem ) {\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Incorporate the offset, then check against cycle size\n\t\t\t\t\t\tdiff -= last;\n\t\t\t\t\t\treturn diff === first || ( diff % first === 0 && diff / first >= 0 );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t},\n\n\t\t\"PSEUDO\": function( pseudo, argument ) {\n\t\t\t// pseudo-class names are case-insensitive\n\t\t\t// http://www.w3.org/TR/selectors/#pseudo-classes\n\t\t\t// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\n\t\t\t// Remember that setFilters inherits from pseudos\n\t\t\tvar args,\n\t\t\t\tfn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||\n\t\t\t\t\tSizzle.error( \"unsupported pseudo: \" + pseudo );\n\n\t\t\t// The user may use createPseudo to indicate that\n\t\t\t// arguments are needed to create the filter function\n\t\t\t// just as Sizzle does\n\t\t\tif ( fn[ expando ] ) {\n\t\t\t\treturn fn( argument );\n\t\t\t}\n\n\t\t\t// But maintain support for old signatures\n\t\t\tif ( fn.length > 1 ) {\n\t\t\t\targs = [ pseudo, pseudo, \"\", argument ];\n\t\t\t\treturn Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?\n\t\t\t\t\tmarkFunction(function( seed, matches ) {\n\t\t\t\t\t\tvar idx,\n\t\t\t\t\t\t\tmatched = fn( seed, argument ),\n\t\t\t\t\t\t\ti = matched.length;\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tidx = indexOf( seed, matched[i] );\n\t\t\t\t\t\t\tseed[ idx ] = !( matches[ idx ] = matched[i] );\n\t\t\t\t\t\t}\n\t\t\t\t\t}) :\n\t\t\t\t\tfunction( elem ) {\n\t\t\t\t\t\treturn fn( elem, 0, args );\n\t\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn fn;\n\t\t}\n\t},\n\n\tpseudos: {\n\t\t// Potentially complex pseudos\n\t\t\"not\": markFunction(function( selector ) {\n\t\t\t// Trim the selector passed to compile\n\t\t\t// to avoid treating leading and trailing\n\t\t\t// spaces as combinators\n\t\t\tvar input = [],\n\t\t\t\tresults = [],\n\t\t\t\tmatcher = compile( selector.replace( rtrim, \"$1\" ) );\n\n\t\t\treturn matcher[ expando ] ?\n\t\t\t\tmarkFunction(function( seed, matches, context, xml ) {\n\t\t\t\t\tvar elem,\n\t\t\t\t\t\tunmatched = matcher( seed, null, xml, [] ),\n\t\t\t\t\t\ti = seed.length;\n\n\t\t\t\t\t// Match elements unmatched by `matcher`\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( (elem = unmatched[i]) ) {\n\t\t\t\t\t\t\tseed[i] = !(matches[i] = elem);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}) :\n\t\t\t\tfunction( elem, context, xml ) {\n\t\t\t\t\tinput[0] = elem;\n\t\t\t\t\tmatcher( input, null, xml, results );\n\t\t\t\t\t// Don't keep the element (issue #299)\n\t\t\t\t\tinput[0] = null;\n\t\t\t\t\treturn !results.pop();\n\t\t\t\t};\n\t\t}),\n\n\t\t\"has\": markFunction(function( selector ) {\n\t\t\treturn function( elem ) {\n\t\t\t\treturn Sizzle( selector, elem ).length > 0;\n\t\t\t};\n\t\t}),\n\n\t\t\"contains\": markFunction(function( text ) {\n\t\t\ttext = text.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;\n\t\t\t};\n\t\t}),\n\n\t\t// \"Whether an element is represented by a :lang() selector\n\t\t// is based solely on the element's language value\n\t\t// being equal to the identifier C,\n\t\t// or beginning with the identifier C immediately followed by \"-\".\n\t\t// The matching of C against the element's language value is performed case-insensitively.\n\t\t// The identifier C does not have to be a valid language name.\"\n\t\t// http://www.w3.org/TR/selectors/#lang-pseudo\n\t\t\"lang\": markFunction( function( lang ) {\n\t\t\t// lang value must be a valid identifier\n\t\t\tif ( !ridentifier.test(lang || \"\") ) {\n\t\t\t\tSizzle.error( \"unsupported lang: \" + lang );\n\t\t\t}\n\t\t\tlang = lang.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn function( elem ) {\n\t\t\t\tvar elemLang;\n\t\t\t\tdo {\n\t\t\t\t\tif ( (elemLang = documentIsHTML ?\n\t\t\t\t\t\telem.lang :\n\t\t\t\t\t\telem.getAttribute(\"xml:lang\") || elem.getAttribute(\"lang\")) ) {\n\n\t\t\t\t\t\telemLang = elemLang.toLowerCase();\n\t\t\t\t\t\treturn elemLang === lang || elemLang.indexOf( lang + \"-\" ) === 0;\n\t\t\t\t\t}\n\t\t\t\t} while ( (elem = elem.parentNode) && elem.nodeType === 1 );\n\t\t\t\treturn false;\n\t\t\t};\n\t\t}),\n\n\t\t// Miscellaneous\n\t\t\"target\": function( elem ) {\n\t\t\tvar hash = window.location && window.location.hash;\n\t\t\treturn hash && hash.slice( 1 ) === elem.id;\n\t\t},\n\n\t\t\"root\": function( elem ) {\n\t\t\treturn elem === docElem;\n\t\t},\n\n\t\t\"focus\": function( elem ) {\n\t\t\treturn elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);\n\t\t},\n\n\t\t// Boolean properties\n\t\t\"enabled\": function( elem ) {\n\t\t\treturn elem.disabled === false;\n\t\t},\n\n\t\t\"disabled\": function( elem ) {\n\t\t\treturn elem.disabled === true;\n\t\t},\n\n\t\t\"checked\": function( elem ) {\n\t\t\t// In CSS3, :checked should return both checked and selected elements\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\tvar nodeName = elem.nodeName.toLowerCase();\n\t\t\treturn (nodeName === \"input\" && !!elem.checked) || (nodeName === \"option\" && !!elem.selected);\n\t\t},\n\n\t\t\"selected\": function( elem ) {\n\t\t\t// Accessing this property makes selected-by-default\n\t\t\t// options in Safari work properly\n\t\t\tif ( elem.parentNode ) {\n\t\t\t\telem.parentNode.selectedIndex;\n\t\t\t}\n\n\t\t\treturn elem.selected === true;\n\t\t},\n\n\t\t// Contents\n\t\t\"empty\": function( elem ) {\n\t\t\t// http://www.w3.org/TR/selectors/#empty-pseudo\n\t\t\t// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\n\t\t\t//   but not by others (comment: 8; processing instruction: 7; etc.)\n\t\t\t// nodeType < 6 works because attributes (2) do not appear as children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tif ( elem.nodeType < 6 ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\n\t\t\"parent\": function( elem ) {\n\t\t\treturn !Expr.pseudos[\"empty\"]( elem );\n\t\t},\n\n\t\t// Element/input types\n\t\t\"header\": function( elem ) {\n\t\t\treturn rheader.test( elem.nodeName );\n\t\t},\n\n\t\t\"input\": function( elem ) {\n\t\t\treturn rinputs.test( elem.nodeName );\n\t\t},\n\n\t\t\"button\": function( elem ) {\n\t\t\tvar name = elem.nodeName.toLowerCase();\n\t\t\treturn name === \"input\" && elem.type === \"button\" || name === \"button\";\n\t\t},\n\n\t\t\"text\": function( elem ) {\n\t\t\tvar attr;\n\t\t\treturn elem.nodeName.toLowerCase() === \"input\" &&\n\t\t\t\telem.type === \"text\" &&\n\n\t\t\t\t// Support: IE<8\n\t\t\t\t// New HTML5 attribute values (e.g., \"search\") appear with elem.type === \"text\"\n\t\t\t\t( (attr = elem.getAttribute(\"type\")) == null || attr.toLowerCase() === \"text\" );\n\t\t},\n\n\t\t// Position-in-collection\n\t\t\"first\": createPositionalPseudo(function() {\n\t\t\treturn [ 0 ];\n\t\t}),\n\n\t\t\"last\": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\treturn [ length - 1 ];\n\t\t}),\n\n\t\t\"eq\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\treturn [ argument < 0 ? argument + length : argument ];\n\t\t}),\n\n\t\t\"even\": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t\"odd\": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\tvar i = 1;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t\"lt\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ? argument + length : argument;\n\t\t\tfor ( ; --i >= 0; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t\"gt\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ? argument + length : argument;\n\t\t\tfor ( ; ++i < length; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t})\n\t}\n};\n\nExpr.pseudos[\"nth\"] = Expr.pseudos[\"eq\"];\n\n// Add button/input type pseudos\nfor ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {\n\tExpr.pseudos[ i ] = createInputPseudo( i );\n}\nfor ( i in { submit: true, reset: true } ) {\n\tExpr.pseudos[ i ] = createButtonPseudo( i );\n}\n\n// Easy API for creating new setFilters\nfunction setFilters() {}\nsetFilters.prototype = Expr.filters = Expr.pseudos;\nExpr.setFilters = new setFilters();\n\ntokenize = Sizzle.tokenize = function( selector, parseOnly ) {\n\tvar matched, match, tokens, type,\n\t\tsoFar, groups, preFilters,\n\t\tcached = tokenCache[ selector + \" \" ];\n\n\tif ( cached ) {\n\t\treturn parseOnly ? 0 : cached.slice( 0 );\n\t}\n\n\tsoFar = selector;\n\tgroups = [];\n\tpreFilters = Expr.preFilter;\n\n\twhile ( soFar ) {\n\n\t\t// Comma and first run\n\t\tif ( !matched || (match = rcomma.exec( soFar )) ) {\n\t\t\tif ( match ) {\n\t\t\t\t// Don't consume trailing commas as valid\n\t\t\t\tsoFar = soFar.slice( match[0].length ) || soFar;\n\t\t\t}\n\t\t\tgroups.push( (tokens = []) );\n\t\t}\n\n\t\tmatched = false;\n\n\t\t// Combinators\n\t\tif ( (match = rcombinators.exec( soFar )) ) {\n\t\t\tmatched = match.shift();\n\t\t\ttokens.push({\n\t\t\t\tvalue: matched,\n\t\t\t\t// Cast descendant combinators to space\n\t\t\t\ttype: match[0].replace( rtrim, \" \" )\n\t\t\t});\n\t\t\tsoFar = soFar.slice( matched.length );\n\t\t}\n\n\t\t// Filters\n\t\tfor ( type in Expr.filter ) {\n\t\t\tif ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||\n\t\t\t\t(match = preFilters[ type ]( match ))) ) {\n\t\t\t\tmatched = match.shift();\n\t\t\t\ttokens.push({\n\t\t\t\t\tvalue: matched,\n\t\t\t\t\ttype: type,\n\t\t\t\t\tmatches: match\n\t\t\t\t});\n\t\t\t\tsoFar = soFar.slice( matched.length );\n\t\t\t}\n\t\t}\n\n\t\tif ( !matched ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Return the length of the invalid excess\n\t// if we're just parsing\n\t// Otherwise, throw an error or return tokens\n\treturn parseOnly ?\n\t\tsoFar.length :\n\t\tsoFar ?\n\t\t\tSizzle.error( selector ) :\n\t\t\t// Cache the tokens\n\t\t\ttokenCache( selector, groups ).slice( 0 );\n};\n\nfunction toSelector( tokens ) {\n\tvar i = 0,\n\t\tlen = tokens.length,\n\t\tselector = \"\";\n\tfor ( ; i < len; i++ ) {\n\t\tselector += tokens[i].value;\n\t}\n\treturn selector;\n}\n\nfunction addCombinator( matcher, combinator, base ) {\n\tvar dir = combinator.dir,\n\t\tcheckNonElements = base && dir === \"parentNode\",\n\t\tdoneName = done++;\n\n\treturn combinator.first ?\n\t\t// Check against closest ancestor/preceding element\n\t\tfunction( elem, context, xml ) {\n\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\treturn matcher( elem, context, xml );\n\t\t\t\t}\n\t\t\t}\n\t\t} :\n\n\t\t// Check against all ancestor/preceding elements\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar oldCache, outerCache,\n\t\t\t\tnewCache = [ dirruns, doneName ];\n\n\t\t\t// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching\n\t\t\tif ( xml ) {\n\t\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\tif ( matcher( elem, context, xml ) ) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\touterCache = elem[ expando ] || (elem[ expando ] = {});\n\t\t\t\t\t\tif ( (oldCache = outerCache[ dir ]) &&\n\t\t\t\t\t\t\toldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {\n\n\t\t\t\t\t\t\t// Assign to newCache so results back-propagate to previous elements\n\t\t\t\t\t\t\treturn (newCache[ 2 ] = oldCache[ 2 ]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Reuse newcache so results back-propagate to previous elements\n\t\t\t\t\t\t\touterCache[ dir ] = newCache;\n\n\t\t\t\t\t\t\t// A match means we're done; a fail means we have to keep checking\n\t\t\t\t\t\t\tif ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n}\n\nfunction elementMatcher( matchers ) {\n\treturn matchers.length > 1 ?\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar i = matchers.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( !matchers[i]( elem, context, xml ) ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t} :\n\t\tmatchers[0];\n}\n\nfunction multipleContexts( selector, contexts, results ) {\n\tvar i = 0,\n\t\tlen = contexts.length;\n\tfor ( ; i < len; i++ ) {\n\t\tSizzle( selector, contexts[i], results );\n\t}\n\treturn results;\n}\n\nfunction condense( unmatched, map, filter, context, xml ) {\n\tvar elem,\n\t\tnewUnmatched = [],\n\t\ti = 0,\n\t\tlen = unmatched.length,\n\t\tmapped = map != null;\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( (elem = unmatched[i]) ) {\n\t\t\tif ( !filter || filter( elem, context, xml ) ) {\n\t\t\t\tnewUnmatched.push( elem );\n\t\t\t\tif ( mapped ) {\n\t\t\t\t\tmap.push( i );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn newUnmatched;\n}\n\nfunction setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {\n\tif ( postFilter && !postFilter[ expando ] ) {\n\t\tpostFilter = setMatcher( postFilter );\n\t}\n\tif ( postFinder && !postFinder[ expando ] ) {\n\t\tpostFinder = setMatcher( postFinder, postSelector );\n\t}\n\treturn markFunction(function( seed, results, context, xml ) {\n\t\tvar temp, i, elem,\n\t\t\tpreMap = [],\n\t\t\tpostMap = [],\n\t\t\tpreexisting = results.length,\n\n\t\t\t// Get initial elements from seed or context\n\t\t\telems = seed || multipleContexts( selector || \"*\", context.nodeType ? [ context ] : context, [] ),\n\n\t\t\t// Prefilter to get matcher input, preserving a map for seed-results synchronization\n\t\t\tmatcherIn = preFilter && ( seed || !selector ) ?\n\t\t\t\tcondense( elems, preMap, preFilter, context, xml ) :\n\t\t\t\telems,\n\n\t\t\tmatcherOut = matcher ?\n\t\t\t\t// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,\n\t\t\t\tpostFinder || ( seed ? preFilter : preexisting || postFilter ) ?\n\n\t\t\t\t\t// ...intermediate processing is necessary\n\t\t\t\t\t[] :\n\n\t\t\t\t\t// ...otherwise use results directly\n\t\t\t\t\tresults :\n\t\t\t\tmatcherIn;\n\n\t\t// Find primary matches\n\t\tif ( matcher ) {\n\t\t\tmatcher( matcherIn, matcherOut, context, xml );\n\t\t}\n\n\t\t// Apply postFilter\n\t\tif ( postFilter ) {\n\t\t\ttemp = condense( matcherOut, postMap );\n\t\t\tpostFilter( temp, [], context, xml );\n\n\t\t\t// Un-match failing elements by moving them back to matcherIn\n\t\t\ti = temp.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( (elem = temp[i]) ) {\n\t\t\t\t\tmatcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( seed ) {\n\t\t\tif ( postFinder || preFilter ) {\n\t\t\t\tif ( postFinder ) {\n\t\t\t\t\t// Get the final matcherOut by condensing this intermediate into postFinder contexts\n\t\t\t\t\ttemp = [];\n\t\t\t\t\ti = matcherOut.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( (elem = matcherOut[i]) ) {\n\t\t\t\t\t\t\t// Restore matcherIn since elem is not yet a final match\n\t\t\t\t\t\t\ttemp.push( (matcherIn[i] = elem) );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tpostFinder( null, (matcherOut = []), temp, xml );\n\t\t\t\t}\n\n\t\t\t\t// Move matched elements from seed to results to keep them synchronized\n\t\t\t\ti = matcherOut.length;\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\tif ( (elem = matcherOut[i]) &&\n\t\t\t\t\t\t(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {\n\n\t\t\t\t\t\tseed[temp] = !(results[temp] = elem);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Add elements to results, through postFinder if defined\n\t\t} else {\n\t\t\tmatcherOut = condense(\n\t\t\t\tmatcherOut === results ?\n\t\t\t\t\tmatcherOut.splice( preexisting, matcherOut.length ) :\n\t\t\t\t\tmatcherOut\n\t\t\t);\n\t\t\tif ( postFinder ) {\n\t\t\t\tpostFinder( null, results, matcherOut, xml );\n\t\t\t} else {\n\t\t\t\tpush.apply( results, matcherOut );\n\t\t\t}\n\t\t}\n\t});\n}\n\nfunction matcherFromTokens( tokens ) {\n\tvar checkContext, matcher, j,\n\t\tlen = tokens.length,\n\t\tleadingRelative = Expr.relative[ tokens[0].type ],\n\t\timplicitRelative = leadingRelative || Expr.relative[\" \"],\n\t\ti = leadingRelative ? 1 : 0,\n\n\t\t// The foundational matcher ensures that elements are reachable from top-level context(s)\n\t\tmatchContext = addCombinator( function( elem ) {\n\t\t\treturn elem === checkContext;\n\t\t}, implicitRelative, true ),\n\t\tmatchAnyContext = addCombinator( function( elem ) {\n\t\t\treturn indexOf( checkContext, elem ) > -1;\n\t\t}, implicitRelative, true ),\n\t\tmatchers = [ function( elem, context, xml ) {\n\t\t\tvar ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (\n\t\t\t\t(checkContext = context).nodeType ?\n\t\t\t\t\tmatchContext( elem, context, xml ) :\n\t\t\t\t\tmatchAnyContext( elem, context, xml ) );\n\t\t\t// Avoid hanging onto element (issue #299)\n\t\t\tcheckContext = null;\n\t\t\treturn ret;\n\t\t} ];\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( (matcher = Expr.relative[ tokens[i].type ]) ) {\n\t\t\tmatchers = [ addCombinator(elementMatcher( matchers ), matcher) ];\n\t\t} else {\n\t\t\tmatcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );\n\n\t\t\t// Return special upon seeing a positional matcher\n\t\t\tif ( matcher[ expando ] ) {\n\t\t\t\t// Find the next relative operator (if any) for proper handling\n\t\t\t\tj = ++i;\n\t\t\t\tfor ( ; j < len; j++ ) {\n\t\t\t\t\tif ( Expr.relative[ tokens[j].type ] ) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn setMatcher(\n\t\t\t\t\ti > 1 && elementMatcher( matchers ),\n\t\t\t\t\ti > 1 && toSelector(\n\t\t\t\t\t\t// If the preceding token was a descendant combinator, insert an implicit any-element `*`\n\t\t\t\t\t\ttokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === \" \" ? \"*\" : \"\" })\n\t\t\t\t\t).replace( rtrim, \"$1\" ),\n\t\t\t\t\tmatcher,\n\t\t\t\t\ti < j && matcherFromTokens( tokens.slice( i, j ) ),\n\t\t\t\t\tj < len && matcherFromTokens( (tokens = tokens.slice( j )) ),\n\t\t\t\t\tj < len && toSelector( tokens )\n\t\t\t\t);\n\t\t\t}\n\t\t\tmatchers.push( matcher );\n\t\t}\n\t}\n\n\treturn elementMatcher( matchers );\n}\n\nfunction matcherFromGroupMatchers( elementMatchers, setMatchers ) {\n\tvar bySet = setMatchers.length > 0,\n\t\tbyElement = elementMatchers.length > 0,\n\t\tsuperMatcher = function( seed, context, xml, results, outermost ) {\n\t\t\tvar elem, j, matcher,\n\t\t\t\tmatchedCount = 0,\n\t\t\t\ti = \"0\",\n\t\t\t\tunmatched = seed && [],\n\t\t\t\tsetMatched = [],\n\t\t\t\tcontextBackup = outermostContext,\n\t\t\t\t// We must always have either seed elements or outermost context\n\t\t\t\telems = seed || byElement && Expr.find[\"TAG\"]( \"*\", outermost ),\n\t\t\t\t// Use integer dirruns iff this is the outermost matcher\n\t\t\t\tdirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),\n\t\t\t\tlen = elems.length;\n\n\t\t\tif ( outermost ) {\n\t\t\t\toutermostContext = context !== document && context;\n\t\t\t}\n\n\t\t\t// Add elements passing elementMatchers directly to results\n\t\t\t// Keep `i` a string if there are no elements so `matchedCount` will be \"00\" below\n\t\t\t// Support: IE<9, Safari\n\t\t\t// Tolerate NodeList properties (IE: \"length\"; Safari: <number>) matching elements by id\n\t\t\tfor ( ; i !== len && (elem = elems[i]) != null; i++ ) {\n\t\t\t\tif ( byElement && elem ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( (matcher = elementMatchers[j++]) ) {\n\t\t\t\t\t\tif ( matcher( elem, context, xml ) ) {\n\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( outermost ) {\n\t\t\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Track unmatched elements for set filters\n\t\t\t\tif ( bySet ) {\n\t\t\t\t\t// They will have gone through all possible matchers\n\t\t\t\t\tif ( (elem = !matcher && elem) ) {\n\t\t\t\t\t\tmatchedCount--;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Lengthen the array for every element, matched or not\n\t\t\t\t\tif ( seed ) {\n\t\t\t\t\t\tunmatched.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Apply set filters to unmatched elements\n\t\t\tmatchedCount += i;\n\t\t\tif ( bySet && i !== matchedCount ) {\n\t\t\t\tj = 0;\n\t\t\t\twhile ( (matcher = setMatchers[j++]) ) {\n\t\t\t\t\tmatcher( unmatched, setMatched, context, xml );\n\t\t\t\t}\n\n\t\t\t\tif ( seed ) {\n\t\t\t\t\t// Reintegrate element matches to eliminate the need for sorting\n\t\t\t\t\tif ( matchedCount > 0 ) {\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tif ( !(unmatched[i] || setMatched[i]) ) {\n\t\t\t\t\t\t\t\tsetMatched[i] = pop.call( results );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Discard index placeholder values to get only actual matches\n\t\t\t\t\tsetMatched = condense( setMatched );\n\t\t\t\t}\n\n\t\t\t\t// Add matches to results\n\t\t\t\tpush.apply( results, setMatched );\n\n\t\t\t\t// Seedless set matches succeeding multiple successful matchers stipulate sorting\n\t\t\t\tif ( outermost && !seed && setMatched.length > 0 &&\n\t\t\t\t\t( matchedCount + setMatchers.length ) > 1 ) {\n\n\t\t\t\t\tSizzle.uniqueSort( results );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Override manipulation of globals by nested matchers\n\t\t\tif ( outermost ) {\n\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\toutermostContext = contextBackup;\n\t\t\t}\n\n\t\t\treturn unmatched;\n\t\t};\n\n\treturn bySet ?\n\t\tmarkFunction( superMatcher ) :\n\t\tsuperMatcher;\n}\n\ncompile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {\n\tvar i,\n\t\tsetMatchers = [],\n\t\telementMatchers = [],\n\t\tcached = compilerCache[ selector + \" \" ];\n\n\tif ( !cached ) {\n\t\t// Generate a function of recursive functions that can be used to check each element\n\t\tif ( !match ) {\n\t\t\tmatch = tokenize( selector );\n\t\t}\n\t\ti = match.length;\n\t\twhile ( i-- ) {\n\t\t\tcached = matcherFromTokens( match[i] );\n\t\t\tif ( cached[ expando ] ) {\n\t\t\t\tsetMatchers.push( cached );\n\t\t\t} else {\n\t\t\t\telementMatchers.push( cached );\n\t\t\t}\n\t\t}\n\n\t\t// Cache the compiled function\n\t\tcached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );\n\n\t\t// Save selector and tokenization\n\t\tcached.selector = selector;\n\t}\n\treturn cached;\n};\n\n/**\n * A low-level selection function that works with Sizzle's compiled\n *  selector functions\n * @param {String|Function} selector A selector or a pre-compiled\n *  selector function built with Sizzle.compile\n * @param {Element} context\n * @param {Array} [results]\n * @param {Array} [seed] A set of elements to match against\n */\nselect = Sizzle.select = function( selector, context, results, seed ) {\n\tvar i, tokens, token, type, find,\n\t\tcompiled = typeof selector === \"function\" && selector,\n\t\tmatch = !seed && tokenize( (selector = compiled.selector || selector) );\n\n\tresults = results || [];\n\n\t// Try to minimize operations if there is no seed and only one group\n\tif ( match.length === 1 ) {\n\n\t\t// Take a shortcut and set the context if the root selector is an ID\n\t\ttokens = match[0] = match[0].slice( 0 );\n\t\tif ( tokens.length > 2 && (token = tokens[0]).type === \"ID\" &&\n\t\t\t\tsupport.getById && context.nodeType === 9 && documentIsHTML &&\n\t\t\t\tExpr.relative[ tokens[1].type ] ) {\n\n\t\t\tcontext = ( Expr.find[\"ID\"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];\n\t\t\tif ( !context ) {\n\t\t\t\treturn results;\n\n\t\t\t// Precompiled matchers will still verify ancestry, so step up a level\n\t\t\t} else if ( compiled ) {\n\t\t\t\tcontext = context.parentNode;\n\t\t\t}\n\n\t\t\tselector = selector.slice( tokens.shift().value.length );\n\t\t}\n\n\t\t// Fetch a seed set for right-to-left matching\n\t\ti = matchExpr[\"needsContext\"].test( selector ) ? 0 : tokens.length;\n\t\twhile ( i-- ) {\n\t\t\ttoken = tokens[i];\n\n\t\t\t// Abort if we hit a combinator\n\t\t\tif ( Expr.relative[ (type = token.type) ] ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( (find = Expr.find[ type ]) ) {\n\t\t\t\t// Search, expanding context for leading sibling combinators\n\t\t\t\tif ( (seed = find(\n\t\t\t\t\ttoken.matches[0].replace( runescape, funescape ),\n\t\t\t\t\trsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context\n\t\t\t\t)) ) {\n\n\t\t\t\t\t// If seed is empty or no tokens remain, we can return early\n\t\t\t\t\ttokens.splice( i, 1 );\n\t\t\t\t\tselector = seed.length && toSelector( tokens );\n\t\t\t\t\tif ( !selector ) {\n\t\t\t\t\t\tpush.apply( results, seed );\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Compile and execute a filtering function if one is not provided\n\t// Provide `match` to avoid retokenization if we modified the selector above\n\t( compiled || compile( selector, match ) )(\n\t\tseed,\n\t\tcontext,\n\t\t!documentIsHTML,\n\t\tresults,\n\t\trsibling.test( selector ) && testContext( context.parentNode ) || context\n\t);\n\treturn results;\n};\n\n// One-time assignments\n\n// Sort stability\nsupport.sortStable = expando.split(\"\").sort( sortOrder ).join(\"\") === expando;\n\n// Support: Chrome 14-35+\n// Always assume duplicates if they aren't passed to the comparison function\nsupport.detectDuplicates = !!hasDuplicate;\n\n// Initialize against the default document\nsetDocument();\n\n// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)\n// Detached nodes confoundingly follow *each other*\nsupport.sortDetached = assert(function( div1 ) {\n\t// Should return 1, but returns 4 (following)\n\treturn div1.compareDocumentPosition( document.createElement(\"div\") ) & 1;\n});\n\n// Support: IE<8\n// Prevent attribute/property \"interpolation\"\n// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx\nif ( !assert(function( div ) {\n\tdiv.innerHTML = \"<a href='#'></a>\";\n\treturn div.firstChild.getAttribute(\"href\") === \"#\" ;\n}) ) {\n\taddHandle( \"type|href|height|width\", function( elem, name, isXML ) {\n\t\tif ( !isXML ) {\n\t\t\treturn elem.getAttribute( name, name.toLowerCase() === \"type\" ? 1 : 2 );\n\t\t}\n\t});\n}\n\n// Support: IE<9\n// Use defaultValue in place of getAttribute(\"value\")\nif ( !support.attributes || !assert(function( div ) {\n\tdiv.innerHTML = \"<input/>\";\n\tdiv.firstChild.setAttribute( \"value\", \"\" );\n\treturn div.firstChild.getAttribute( \"value\" ) === \"\";\n}) ) {\n\taddHandle( \"value\", function( elem, name, isXML ) {\n\t\tif ( !isXML && elem.nodeName.toLowerCase() === \"input\" ) {\n\t\t\treturn elem.defaultValue;\n\t\t}\n\t});\n}\n\n// Support: IE<9\n// Use getAttributeNode to fetch booleans when getAttribute lies\nif ( !assert(function( div ) {\n\treturn div.getAttribute(\"disabled\") == null;\n}) ) {\n\taddHandle( booleans, function( elem, name, isXML ) {\n\t\tvar val;\n\t\tif ( !isXML ) {\n\t\t\treturn elem[ name ] === true ? name.toLowerCase() :\n\t\t\t\t\t(val = elem.getAttributeNode( name )) && val.specified ?\n\t\t\t\t\tval.value :\n\t\t\t\tnull;\n\t\t}\n\t});\n}\n\nreturn Sizzle;\n\n})( window );\n\n\n\njQuery.find = Sizzle;\njQuery.expr = Sizzle.selectors;\njQuery.expr[\":\"] = jQuery.expr.pseudos;\njQuery.unique = Sizzle.uniqueSort;\njQuery.text = Sizzle.getText;\njQuery.isXMLDoc = Sizzle.isXML;\njQuery.contains = Sizzle.contains;\n\n\n\nvar rneedsContext = jQuery.expr.match.needsContext;\n\nvar rsingleTag = (/^<(\\w+)\\s*\\/?>(?:<\\/\\1>|)$/);\n\n\n\nvar risSimple = /^.[^:#\\[\\.,]*$/;\n\n// Implement the identical functionality for filter and not\nfunction winnow( elements, qualifier, not ) {\n\tif ( jQuery.isFunction( qualifier ) ) {\n\t\treturn jQuery.grep( elements, function( elem, i ) {\n\t\t\t/* jshint -W018 */\n\t\t\treturn !!qualifier.call( elem, i, elem ) !== not;\n\t\t});\n\n\t}\n\n\tif ( qualifier.nodeType ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( elem === qualifier ) !== not;\n\t\t});\n\n\t}\n\n\tif ( typeof qualifier === \"string\" ) {\n\t\tif ( risSimple.test( qualifier ) ) {\n\t\t\treturn jQuery.filter( qualifier, elements, not );\n\t\t}\n\n\t\tqualifier = jQuery.filter( qualifier, elements );\n\t}\n\n\treturn jQuery.grep( elements, function( elem ) {\n\t\treturn ( indexOf.call( qualifier, elem ) >= 0 ) !== not;\n\t});\n}\n\njQuery.filter = function( expr, elems, not ) {\n\tvar elem = elems[ 0 ];\n\n\tif ( not ) {\n\t\texpr = \":not(\" + expr + \")\";\n\t}\n\n\treturn elems.length === 1 && elem.nodeType === 1 ?\n\t\tjQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :\n\t\tjQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {\n\t\t\treturn elem.nodeType === 1;\n\t\t}));\n};\n\njQuery.fn.extend({\n\tfind: function( selector ) {\n\t\tvar i,\n\t\t\tlen = this.length,\n\t\t\tret = [],\n\t\t\tself = this;\n\n\t\tif ( typeof selector !== \"string\" ) {\n\t\t\treturn this.pushStack( jQuery( selector ).filter(function() {\n\t\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\t\tif ( jQuery.contains( self[ i ], this ) ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}) );\n\t\t}\n\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tjQuery.find( selector, self[ i ], ret );\n\t\t}\n\n\t\t// Needed because $( selector, context ) becomes $( context ).find( selector )\n\t\tret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );\n\t\tret.selector = this.selector ? this.selector + \" \" + selector : selector;\n\t\treturn ret;\n\t},\n\tfilter: function( selector ) {\n\t\treturn this.pushStack( winnow(this, selector || [], false) );\n\t},\n\tnot: function( selector ) {\n\t\treturn this.pushStack( winnow(this, selector || [], true) );\n\t},\n\tis: function( selector ) {\n\t\treturn !!winnow(\n\t\t\tthis,\n\n\t\t\t// If this is a positional/relative selector, check membership in the returned set\n\t\t\t// so $(\"p:first\").is(\"p:last\") won't return true for a doc with two \"p\".\n\t\t\ttypeof selector === \"string\" && rneedsContext.test( selector ) ?\n\t\t\t\tjQuery( selector ) :\n\t\t\t\tselector || [],\n\t\t\tfalse\n\t\t).length;\n\t}\n});\n\n\n// Initialize a jQuery object\n\n\n// A central reference to the root jQuery(document)\nvar rootjQuery,\n\n\t// A simple way to check for HTML strings\n\t// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)\n\t// Strict HTML recognition (#11290: must start with <)\n\trquickExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]*))$/,\n\n\tinit = jQuery.fn.init = function( selector, context ) {\n\t\tvar match, elem;\n\n\t\t// HANDLE: $(\"\"), $(null), $(undefined), $(false)\n\t\tif ( !selector ) {\n\t\t\treturn this;\n\t\t}\n\n\t\t// Handle HTML strings\n\t\tif ( typeof selector === \"string\" ) {\n\t\t\tif ( selector[0] === \"<\" && selector[ selector.length - 1 ] === \">\" && selector.length >= 3 ) {\n\t\t\t\t// Assume that strings that start and end with <> are HTML and skip the regex check\n\t\t\t\tmatch = [ null, selector, null ];\n\n\t\t\t} else {\n\t\t\t\tmatch = rquickExpr.exec( selector );\n\t\t\t}\n\n\t\t\t// Match html or make sure no context is specified for #id\n\t\t\tif ( match && (match[1] || !context) ) {\n\n\t\t\t\t// HANDLE: $(html) -> $(array)\n\t\t\t\tif ( match[1] ) {\n\t\t\t\t\tcontext = context instanceof jQuery ? context[0] : context;\n\n\t\t\t\t\t// Option to run scripts is true for back-compat\n\t\t\t\t\t// Intentionally let the error be thrown if parseHTML is not present\n\t\t\t\t\tjQuery.merge( this, jQuery.parseHTML(\n\t\t\t\t\t\tmatch[1],\n\t\t\t\t\t\tcontext && context.nodeType ? context.ownerDocument || context : document,\n\t\t\t\t\t\ttrue\n\t\t\t\t\t) );\n\n\t\t\t\t\t// HANDLE: $(html, props)\n\t\t\t\t\tif ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {\n\t\t\t\t\t\tfor ( match in context ) {\n\t\t\t\t\t\t\t// Properties of context are called as methods if possible\n\t\t\t\t\t\t\tif ( jQuery.isFunction( this[ match ] ) ) {\n\t\t\t\t\t\t\t\tthis[ match ]( context[ match ] );\n\n\t\t\t\t\t\t\t// ...and otherwise set as attributes\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.attr( match, context[ match ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t// HANDLE: $(#id)\n\t\t\t\t} else {\n\t\t\t\t\telem = document.getElementById( match[2] );\n\n\t\t\t\t\t// Support: Blackberry 4.6\n\t\t\t\t\t// gEBID returns nodes no longer in the document (#6963)\n\t\t\t\t\tif ( elem && elem.parentNode ) {\n\t\t\t\t\t\t// Inject the element directly into the jQuery object\n\t\t\t\t\t\tthis.length = 1;\n\t\t\t\t\t\tthis[0] = elem;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.context = document;\n\t\t\t\t\tthis.selector = selector;\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\t\t\t// HANDLE: $(expr, $(...))\n\t\t\t} else if ( !context || context.jquery ) {\n\t\t\t\treturn ( context || rootjQuery ).find( selector );\n\n\t\t\t// HANDLE: $(expr, context)\n\t\t\t// (which is just equivalent to: $(context).find(expr)\n\t\t\t} else {\n\t\t\t\treturn this.constructor( context ).find( selector );\n\t\t\t}\n\n\t\t// HANDLE: $(DOMElement)\n\t\t} else if ( selector.nodeType ) {\n\t\t\tthis.context = this[0] = selector;\n\t\t\tthis.length = 1;\n\t\t\treturn this;\n\n\t\t// HANDLE: $(function)\n\t\t// Shortcut for document ready\n\t\t} else if ( jQuery.isFunction( selector ) ) {\n\t\t\treturn typeof rootjQuery.ready !== \"undefined\" ?\n\t\t\t\trootjQuery.ready( selector ) :\n\t\t\t\t// Execute immediately if ready is not present\n\t\t\t\tselector( jQuery );\n\t\t}\n\n\t\tif ( selector.selector !== undefined ) {\n\t\t\tthis.selector = selector.selector;\n\t\t\tthis.context = selector.context;\n\t\t}\n\n\t\treturn jQuery.makeArray( selector, this );\n\t};\n\n// Give the init function the jQuery prototype for later instantiation\ninit.prototype = jQuery.fn;\n\n// Initialize central reference\nrootjQuery = jQuery( document );\n\n\nvar rparentsprev = /^(?:parents|prev(?:Until|All))/,\n\t// Methods guaranteed to produce a unique set when starting from a unique set\n\tguaranteedUnique = {\n\t\tchildren: true,\n\t\tcontents: true,\n\t\tnext: true,\n\t\tprev: true\n\t};\n\njQuery.extend({\n\tdir: function( elem, dir, until ) {\n\t\tvar matched = [],\n\t\t\ttruncate = until !== undefined;\n\n\t\twhile ( (elem = elem[ dir ]) && elem.nodeType !== 9 ) {\n\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\tif ( truncate && jQuery( elem ).is( until ) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tmatched.push( elem );\n\t\t\t}\n\t\t}\n\t\treturn matched;\n\t},\n\n\tsibling: function( n, elem ) {\n\t\tvar matched = [];\n\n\t\tfor ( ; n; n = n.nextSibling ) {\n\t\t\tif ( n.nodeType === 1 && n !== elem ) {\n\t\t\t\tmatched.push( n );\n\t\t\t}\n\t\t}\n\n\t\treturn matched;\n\t}\n});\n\njQuery.fn.extend({\n\thas: function( target ) {\n\t\tvar targets = jQuery( target, this ),\n\t\t\tl = targets.length;\n\n\t\treturn this.filter(function() {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tif ( jQuery.contains( this, targets[i] ) ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t},\n\n\tclosest: function( selectors, context ) {\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\tl = this.length,\n\t\t\tmatched = [],\n\t\t\tpos = rneedsContext.test( selectors ) || typeof selectors !== \"string\" ?\n\t\t\t\tjQuery( selectors, context || this.context ) :\n\t\t\t\t0;\n\n\t\tfor ( ; i < l; i++ ) {\n\t\t\tfor ( cur = this[i]; cur && cur !== context; cur = cur.parentNode ) {\n\t\t\t\t// Always skip document fragments\n\t\t\t\tif ( cur.nodeType < 11 && (pos ?\n\t\t\t\t\tpos.index(cur) > -1 :\n\n\t\t\t\t\t// Don't pass non-elements to Sizzle\n\t\t\t\t\tcur.nodeType === 1 &&\n\t\t\t\t\t\tjQuery.find.matchesSelector(cur, selectors)) ) {\n\n\t\t\t\t\tmatched.push( cur );\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched.length > 1 ? jQuery.unique( matched ) : matched );\n\t},\n\n\t// Determine the position of an element within the set\n\tindex: function( elem ) {\n\n\t\t// No argument, return index in parent\n\t\tif ( !elem ) {\n\t\t\treturn ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;\n\t\t}\n\n\t\t// Index in selector\n\t\tif ( typeof elem === \"string\" ) {\n\t\t\treturn indexOf.call( jQuery( elem ), this[ 0 ] );\n\t\t}\n\n\t\t// Locate the position of the desired element\n\t\treturn indexOf.call( this,\n\n\t\t\t// If it receives a jQuery object, the first element is used\n\t\t\telem.jquery ? elem[ 0 ] : elem\n\t\t);\n\t},\n\n\tadd: function( selector, context ) {\n\t\treturn this.pushStack(\n\t\t\tjQuery.unique(\n\t\t\t\tjQuery.merge( this.get(), jQuery( selector, context ) )\n\t\t\t)\n\t\t);\n\t},\n\n\taddBack: function( selector ) {\n\t\treturn this.add( selector == null ?\n\t\t\tthis.prevObject : this.prevObject.filter(selector)\n\t\t);\n\t}\n});\n\nfunction sibling( cur, dir ) {\n\twhile ( (cur = cur[dir]) && cur.nodeType !== 1 ) {}\n\treturn cur;\n}\n\njQuery.each({\n\tparent: function( elem ) {\n\t\tvar parent = elem.parentNode;\n\t\treturn parent && parent.nodeType !== 11 ? parent : null;\n\t},\n\tparents: function( elem ) {\n\t\treturn jQuery.dir( elem, \"parentNode\" );\n\t},\n\tparentsUntil: function( elem, i, until ) {\n\t\treturn jQuery.dir( elem, \"parentNode\", until );\n\t},\n\tnext: function( elem ) {\n\t\treturn sibling( elem, \"nextSibling\" );\n\t},\n\tprev: function( elem ) {\n\t\treturn sibling( elem, \"previousSibling\" );\n\t},\n\tnextAll: function( elem ) {\n\t\treturn jQuery.dir( elem, \"nextSibling\" );\n\t},\n\tprevAll: function( elem ) {\n\t\treturn jQuery.dir( elem, \"previousSibling\" );\n\t},\n\tnextUntil: function( elem, i, until ) {\n\t\treturn jQuery.dir( elem, \"nextSibling\", until );\n\t},\n\tprevUntil: function( elem, i, until ) {\n\t\treturn jQuery.dir( elem, \"previousSibling\", until );\n\t},\n\tsiblings: function( elem ) {\n\t\treturn jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );\n\t},\n\tchildren: function( elem ) {\n\t\treturn jQuery.sibling( elem.firstChild );\n\t},\n\tcontents: function( elem ) {\n\t\treturn elem.contentDocument || jQuery.merge( [], elem.childNodes );\n\t}\n}, function( name, fn ) {\n\tjQuery.fn[ name ] = function( until, selector ) {\n\t\tvar matched = jQuery.map( this, fn, until );\n\n\t\tif ( name.slice( -5 ) !== \"Until\" ) {\n\t\t\tselector = until;\n\t\t}\n\n\t\tif ( selector && typeof selector === \"string\" ) {\n\t\t\tmatched = jQuery.filter( selector, matched );\n\t\t}\n\n\t\tif ( this.length > 1 ) {\n\t\t\t// Remove duplicates\n\t\t\tif ( !guaranteedUnique[ name ] ) {\n\t\t\t\tjQuery.unique( matched );\n\t\t\t}\n\n\t\t\t// Reverse order for parents* and prev-derivatives\n\t\t\tif ( rparentsprev.test( name ) ) {\n\t\t\t\tmatched.reverse();\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched );\n\t};\n});\nvar rnotwhite = (/\\S+/g);\n\n\n\n// String to Object options format cache\nvar optionsCache = {};\n\n// Convert String-formatted options into Object-formatted ones and store in cache\nfunction createOptions( options ) {\n\tvar object = optionsCache[ options ] = {};\n\tjQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {\n\t\tobject[ flag ] = true;\n\t});\n\treturn object;\n}\n\n/*\n * Create a callback list using the following parameters:\n *\n *\toptions: an optional list of space-separated options that will change how\n *\t\t\tthe callback list behaves or a more traditional option object\n *\n * By default a callback list will act like an event callback list and can be\n * \"fired\" multiple times.\n *\n * Possible options:\n *\n *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\n *\n *\tmemory:\t\t\twill keep track of previous values and will call any callback added\n *\t\t\t\t\tafter the list has been fired right away with the latest \"memorized\"\n *\t\t\t\t\tvalues (like a Deferred)\n *\n *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\n *\n *\tstopOnFalse:\tinterrupt callings when a callback returns false\n *\n */\njQuery.Callbacks = function( options ) {\n\n\t// Convert options from String-formatted to Object-formatted if needed\n\t// (we check in cache first)\n\toptions = typeof options === \"string\" ?\n\t\t( optionsCache[ options ] || createOptions( options ) ) :\n\t\tjQuery.extend( {}, options );\n\n\tvar // Last fire value (for non-forgettable lists)\n\t\tmemory,\n\t\t// Flag to know if list was already fired\n\t\tfired,\n\t\t// Flag to know if list is currently firing\n\t\tfiring,\n\t\t// First callback to fire (used internally by add and fireWith)\n\t\tfiringStart,\n\t\t// End of the loop when firing\n\t\tfiringLength,\n\t\t// Index of currently firing callback (modified by remove if needed)\n\t\tfiringIndex,\n\t\t// Actual callback list\n\t\tlist = [],\n\t\t// Stack of fire calls for repeatable lists\n\t\tstack = !options.once && [],\n\t\t// Fire callbacks\n\t\tfire = function( data ) {\n\t\t\tmemory = options.memory && data;\n\t\t\tfired = true;\n\t\t\tfiringIndex = firingStart || 0;\n\t\t\tfiringStart = 0;\n\t\t\tfiringLength = list.length;\n\t\t\tfiring = true;\n\t\t\tfor ( ; list && firingIndex < firingLength; firingIndex++ ) {\n\t\t\t\tif ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {\n\t\t\t\t\tmemory = false; // To prevent further calls using add\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfiring = false;\n\t\t\tif ( list ) {\n\t\t\t\tif ( stack ) {\n\t\t\t\t\tif ( stack.length ) {\n\t\t\t\t\t\tfire( stack.shift() );\n\t\t\t\t\t}\n\t\t\t\t} else if ( memory ) {\n\t\t\t\t\tlist = [];\n\t\t\t\t} else {\n\t\t\t\t\tself.disable();\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t// Actual Callbacks object\n\t\tself = {\n\t\t\t// Add a callback or a collection of callbacks to the list\n\t\t\tadd: function() {\n\t\t\t\tif ( list ) {\n\t\t\t\t\t// First, we save the current length\n\t\t\t\t\tvar start = list.length;\n\t\t\t\t\t(function add( args ) {\n\t\t\t\t\t\tjQuery.each( args, function( _, arg ) {\n\t\t\t\t\t\t\tvar type = jQuery.type( arg );\n\t\t\t\t\t\t\tif ( type === \"function\" ) {\n\t\t\t\t\t\t\t\tif ( !options.unique || !self.has( arg ) ) {\n\t\t\t\t\t\t\t\t\tlist.push( arg );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if ( arg && arg.length && type !== \"string\" ) {\n\t\t\t\t\t\t\t\t// Inspect recursively\n\t\t\t\t\t\t\t\tadd( arg );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t})( arguments );\n\t\t\t\t\t// Do we need to add the callbacks to the\n\t\t\t\t\t// current firing batch?\n\t\t\t\t\tif ( firing ) {\n\t\t\t\t\t\tfiringLength = list.length;\n\t\t\t\t\t// With memory, if we're not firing then\n\t\t\t\t\t// we should call right away\n\t\t\t\t\t} else if ( memory ) {\n\t\t\t\t\t\tfiringStart = start;\n\t\t\t\t\t\tfire( memory );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\t// Remove a callback from the list\n\t\t\tremove: function() {\n\t\t\t\tif ( list ) {\n\t\t\t\t\tjQuery.each( arguments, function( _, arg ) {\n\t\t\t\t\t\tvar index;\n\t\t\t\t\t\twhile ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {\n\t\t\t\t\t\t\tlist.splice( index, 1 );\n\t\t\t\t\t\t\t// Handle firing indexes\n\t\t\t\t\t\t\tif ( firing ) {\n\t\t\t\t\t\t\t\tif ( index <= firingLength ) {\n\t\t\t\t\t\t\t\t\tfiringLength--;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif ( index <= firingIndex ) {\n\t\t\t\t\t\t\t\t\tfiringIndex--;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\t// Check if a given callback is in the list.\n\t\t\t// If no argument is given, return whether or not list has callbacks attached.\n\t\t\thas: function( fn ) {\n\t\t\t\treturn fn ? jQuery.inArray( fn, list ) > -1 : !!( list && list.length );\n\t\t\t},\n\t\t\t// Remove all callbacks from the list\n\t\t\tempty: function() {\n\t\t\t\tlist = [];\n\t\t\t\tfiringLength = 0;\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\t// Have the list do nothing anymore\n\t\t\tdisable: function() {\n\t\t\t\tlist = stack = memory = undefined;\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\t// Is it disabled?\n\t\t\tdisabled: function() {\n\t\t\t\treturn !list;\n\t\t\t},\n\t\t\t// Lock the list in its current state\n\t\t\tlock: function() {\n\t\t\t\tstack = undefined;\n\t\t\t\tif ( !memory ) {\n\t\t\t\t\tself.disable();\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\t// Is it locked?\n\t\t\tlocked: function() {\n\t\t\t\treturn !stack;\n\t\t\t},\n\t\t\t// Call all callbacks with the given context and arguments\n\t\t\tfireWith: function( context, args ) {\n\t\t\t\tif ( list && ( !fired || stack ) ) {\n\t\t\t\t\targs = args || [];\n\t\t\t\t\targs = [ context, args.slice ? args.slice() : args ];\n\t\t\t\t\tif ( firing ) {\n\t\t\t\t\t\tstack.push( args );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfire( args );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\t// Call all the callbacks with the given arguments\n\t\t\tfire: function() {\n\t\t\t\tself.fireWith( this, arguments );\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\t// To know if the callbacks have already been called at least once\n\t\t\tfired: function() {\n\t\t\t\treturn !!fired;\n\t\t\t}\n\t\t};\n\n\treturn self;\n};\n\n\njQuery.extend({\n\n\tDeferred: function( func ) {\n\t\tvar tuples = [\n\t\t\t\t// action, add listener, listener list, final state\n\t\t\t\t[ \"resolve\", \"done\", jQuery.Callbacks(\"once memory\"), \"resolved\" ],\n\t\t\t\t[ \"reject\", \"fail\", jQuery.Callbacks(\"once memory\"), \"rejected\" ],\n\t\t\t\t[ \"notify\", \"progress\", jQuery.Callbacks(\"memory\") ]\n\t\t\t],\n\t\t\tstate = \"pending\",\n\t\t\tpromise = {\n\t\t\t\tstate: function() {\n\t\t\t\t\treturn state;\n\t\t\t\t},\n\t\t\t\talways: function() {\n\t\t\t\t\tdeferred.done( arguments ).fail( arguments );\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\t\t\t\tthen: function( /* fnDone, fnFail, fnProgress */ ) {\n\t\t\t\t\tvar fns = arguments;\n\t\t\t\t\treturn jQuery.Deferred(function( newDefer ) {\n\t\t\t\t\t\tjQuery.each( tuples, function( i, tuple ) {\n\t\t\t\t\t\t\tvar fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];\n\t\t\t\t\t\t\t// deferred[ done | fail | progress ] for forwarding actions to newDefer\n\t\t\t\t\t\t\tdeferred[ tuple[1] ](function() {\n\t\t\t\t\t\t\t\tvar returned = fn && fn.apply( this, arguments );\n\t\t\t\t\t\t\t\tif ( returned && jQuery.isFunction( returned.promise ) ) {\n\t\t\t\t\t\t\t\t\treturned.promise()\n\t\t\t\t\t\t\t\t\t\t.done( newDefer.resolve )\n\t\t\t\t\t\t\t\t\t\t.fail( newDefer.reject )\n\t\t\t\t\t\t\t\t\t\t.progress( newDefer.notify );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tnewDefer[ tuple[ 0 ] + \"With\" ]( this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t\tfns = null;\n\t\t\t\t\t}).promise();\n\t\t\t\t},\n\t\t\t\t// Get a promise for this deferred\n\t\t\t\t// If obj is provided, the promise aspect is added to the object\n\t\t\t\tpromise: function( obj ) {\n\t\t\t\t\treturn obj != null ? jQuery.extend( obj, promise ) : promise;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdeferred = {};\n\n\t\t// Keep pipe for back-compat\n\t\tpromise.pipe = promise.then;\n\n\t\t// Add list-specific methods\n\t\tjQuery.each( tuples, function( i, tuple ) {\n\t\t\tvar list = tuple[ 2 ],\n\t\t\t\tstateString = tuple[ 3 ];\n\n\t\t\t// promise[ done | fail | progress ] = list.add\n\t\t\tpromise[ tuple[1] ] = list.add;\n\n\t\t\t// Handle state\n\t\t\tif ( stateString ) {\n\t\t\t\tlist.add(function() {\n\t\t\t\t\t// state = [ resolved | rejected ]\n\t\t\t\t\tstate = stateString;\n\n\t\t\t\t// [ reject_list | resolve_list ].disable; progress_list.lock\n\t\t\t\t}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );\n\t\t\t}\n\n\t\t\t// deferred[ resolve | reject | notify ]\n\t\t\tdeferred[ tuple[0] ] = function() {\n\t\t\t\tdeferred[ tuple[0] + \"With\" ]( this === deferred ? promise : this, arguments );\n\t\t\t\treturn this;\n\t\t\t};\n\t\t\tdeferred[ tuple[0] + \"With\" ] = list.fireWith;\n\t\t});\n\n\t\t// Make the deferred a promise\n\t\tpromise.promise( deferred );\n\n\t\t// Call given func if any\n\t\tif ( func ) {\n\t\t\tfunc.call( deferred, deferred );\n\t\t}\n\n\t\t// All done!\n\t\treturn deferred;\n\t},\n\n\t// Deferred helper\n\twhen: function( subordinate /* , ..., subordinateN */ ) {\n\t\tvar i = 0,\n\t\t\tresolveValues = slice.call( arguments ),\n\t\t\tlength = resolveValues.length,\n\n\t\t\t// the count of uncompleted subordinates\n\t\t\tremaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,\n\n\t\t\t// the master Deferred. If resolveValues consist of only a single Deferred, just use that.\n\t\t\tdeferred = remaining === 1 ? subordinate : jQuery.Deferred(),\n\n\t\t\t// Update function for both resolve and progress values\n\t\t\tupdateFunc = function( i, contexts, values ) {\n\t\t\t\treturn function( value ) {\n\t\t\t\t\tcontexts[ i ] = this;\n\t\t\t\t\tvalues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;\n\t\t\t\t\tif ( values === progressValues ) {\n\t\t\t\t\t\tdeferred.notifyWith( contexts, values );\n\t\t\t\t\t} else if ( !( --remaining ) ) {\n\t\t\t\t\t\tdeferred.resolveWith( contexts, values );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t},\n\n\t\t\tprogressValues, progressContexts, resolveContexts;\n\n\t\t// Add listeners to Deferred subordinates; treat others as resolved\n\t\tif ( length > 1 ) {\n\t\t\tprogressValues = new Array( length );\n\t\t\tprogressContexts = new Array( length );\n\t\t\tresolveContexts = new Array( length );\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tif ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {\n\t\t\t\t\tresolveValues[ i ].promise()\n\t\t\t\t\t\t.done( updateFunc( i, resolveContexts, resolveValues ) )\n\t\t\t\t\t\t.fail( deferred.reject )\n\t\t\t\t\t\t.progress( updateFunc( i, progressContexts, progressValues ) );\n\t\t\t\t} else {\n\t\t\t\t\t--remaining;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// If we're not waiting on anything, resolve the master\n\t\tif ( !remaining ) {\n\t\t\tdeferred.resolveWith( resolveContexts, resolveValues );\n\t\t}\n\n\t\treturn deferred.promise();\n\t}\n});\n\n\n// The deferred used on DOM ready\nvar readyList;\n\njQuery.fn.ready = function( fn ) {\n\t// Add the callback\n\tjQuery.ready.promise().done( fn );\n\n\treturn this;\n};\n\njQuery.extend({\n\t// Is the DOM ready to be used? Set to true once it occurs.\n\tisReady: false,\n\n\t// A counter to track how many items to wait for before\n\t// the ready event fires. See #6781\n\treadyWait: 1,\n\n\t// Hold (or release) the ready event\n\tholdReady: function( hold ) {\n\t\tif ( hold ) {\n\t\t\tjQuery.readyWait++;\n\t\t} else {\n\t\t\tjQuery.ready( true );\n\t\t}\n\t},\n\n\t// Handle when the DOM is ready\n\tready: function( wait ) {\n\n\t\t// Abort if there are pending holds or we're already ready\n\t\tif ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Remember that the DOM is ready\n\t\tjQuery.isReady = true;\n\n\t\t// If a normal DOM Ready event fired, decrement, and wait if need be\n\t\tif ( wait !== true && --jQuery.readyWait > 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If there are functions bound, to execute\n\t\treadyList.resolveWith( document, [ jQuery ] );\n\n\t\t// Trigger any bound ready events\n\t\tif ( jQuery.fn.triggerHandler ) {\n\t\t\tjQuery( document ).triggerHandler( \"ready\" );\n\t\t\tjQuery( document ).off( \"ready\" );\n\t\t}\n\t}\n});\n\n/**\n * The ready event handler and self cleanup method\n */\nfunction completed() {\n\tdocument.removeEventListener( \"DOMContentLoaded\", completed, false );\n\twindow.removeEventListener( \"load\", completed, false );\n\tjQuery.ready();\n}\n\njQuery.ready.promise = function( obj ) {\n\tif ( !readyList ) {\n\n\t\treadyList = jQuery.Deferred();\n\n\t\t// Catch cases where $(document).ready() is called after the browser event has already occurred.\n\t\t// We once tried to use readyState \"interactive\" here, but it caused issues like the one\n\t\t// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15\n\t\tif ( document.readyState === \"complete\" ) {\n\t\t\t// Handle it asynchronously to allow scripts the opportunity to delay ready\n\t\t\tsetTimeout( jQuery.ready );\n\n\t\t} else {\n\n\t\t\t// Use the handy event callback\n\t\t\tdocument.addEventListener( \"DOMContentLoaded\", completed, false );\n\n\t\t\t// A fallback to window.onload, that will always work\n\t\t\twindow.addEventListener( \"load\", completed, false );\n\t\t}\n\t}\n\treturn readyList.promise( obj );\n};\n\n// Kick off the DOM ready check even if the user does not\njQuery.ready.promise();\n\n\n\n\n// Multifunctional method to get and set values of a collection\n// The value/s can optionally be executed if it's a function\nvar access = jQuery.access = function( elems, fn, key, value, chainable, emptyGet, raw ) {\n\tvar i = 0,\n\t\tlen = elems.length,\n\t\tbulk = key == null;\n\n\t// Sets many values\n\tif ( jQuery.type( key ) === \"object\" ) {\n\t\tchainable = true;\n\t\tfor ( i in key ) {\n\t\t\tjQuery.access( elems, fn, i, key[i], true, emptyGet, raw );\n\t\t}\n\n\t// Sets one value\n\t} else if ( value !== undefined ) {\n\t\tchainable = true;\n\n\t\tif ( !jQuery.isFunction( value ) ) {\n\t\t\traw = true;\n\t\t}\n\n\t\tif ( bulk ) {\n\t\t\t// Bulk operations run against the entire set\n\t\t\tif ( raw ) {\n\t\t\t\tfn.call( elems, value );\n\t\t\t\tfn = null;\n\n\t\t\t// ...except when executing function values\n\t\t\t} else {\n\t\t\t\tbulk = fn;\n\t\t\t\tfn = function( elem, key, value ) {\n\t\t\t\t\treturn bulk.call( jQuery( elem ), value );\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif ( fn ) {\n\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\tfn( elems[i], key, raw ? value : value.call( elems[i], i, fn( elems[i], key ) ) );\n\t\t\t}\n\t\t}\n\t}\n\n\treturn chainable ?\n\t\telems :\n\n\t\t// Gets\n\t\tbulk ?\n\t\t\tfn.call( elems ) :\n\t\t\tlen ? fn( elems[0], key ) : emptyGet;\n};\n\n\n/**\n * Determines whether an object can have data\n */\njQuery.acceptData = function( owner ) {\n\t// Accepts only:\n\t//  - Node\n\t//    - Node.ELEMENT_NODE\n\t//    - Node.DOCUMENT_NODE\n\t//  - Object\n\t//    - Any\n\t/* jshint -W018 */\n\treturn owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );\n};\n\n\nfunction Data() {\n\t// Support: Android<4,\n\t// Old WebKit does not have Object.preventExtensions/freeze method,\n\t// return new empty object instead with no [[set]] accessor\n\tObject.defineProperty( this.cache = {}, 0, {\n\t\tget: function() {\n\t\t\treturn {};\n\t\t}\n\t});\n\n\tthis.expando = jQuery.expando + Data.uid++;\n}\n\nData.uid = 1;\nData.accepts = jQuery.acceptData;\n\nData.prototype = {\n\tkey: function( owner ) {\n\t\t// We can accept data for non-element nodes in modern browsers,\n\t\t// but we should not, see #8335.\n\t\t// Always return the key for a frozen object.\n\t\tif ( !Data.accepts( owner ) ) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tvar descriptor = {},\n\t\t\t// Check if the owner object already has a cache key\n\t\t\tunlock = owner[ this.expando ];\n\n\t\t// If not, create one\n\t\tif ( !unlock ) {\n\t\t\tunlock = Data.uid++;\n\n\t\t\t// Secure it in a non-enumerable, non-writable property\n\t\t\ttry {\n\t\t\t\tdescriptor[ this.expando ] = { value: unlock };\n\t\t\t\tObject.defineProperties( owner, descriptor );\n\n\t\t\t// Support: Android<4\n\t\t\t// Fallback to a less secure definition\n\t\t\t} catch ( e ) {\n\t\t\t\tdescriptor[ this.expando ] = unlock;\n\t\t\t\tjQuery.extend( owner, descriptor );\n\t\t\t}\n\t\t}\n\n\t\t// Ensure the cache object\n\t\tif ( !this.cache[ unlock ] ) {\n\t\t\tthis.cache[ unlock ] = {};\n\t\t}\n\n\t\treturn unlock;\n\t},\n\tset: function( owner, data, value ) {\n\t\tvar prop,\n\t\t\t// There may be an unlock assigned to this node,\n\t\t\t// if there is no entry for this \"owner\", create one inline\n\t\t\t// and set the unlock as though an owner entry had always existed\n\t\t\tunlock = this.key( owner ),\n\t\t\tcache = this.cache[ unlock ];\n\n\t\t// Handle: [ owner, key, value ] args\n\t\tif ( typeof data === \"string\" ) {\n\t\t\tcache[ data ] = value;\n\n\t\t// Handle: [ owner, { properties } ] args\n\t\t} else {\n\t\t\t// Fresh assignments by object are shallow copied\n\t\t\tif ( jQuery.isEmptyObject( cache ) ) {\n\t\t\t\tjQuery.extend( this.cache[ unlock ], data );\n\t\t\t// Otherwise, copy the properties one-by-one to the cache object\n\t\t\t} else {\n\t\t\t\tfor ( prop in data ) {\n\t\t\t\t\tcache[ prop ] = data[ prop ];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn cache;\n\t},\n\tget: function( owner, key ) {\n\t\t// Either a valid cache is found, or will be created.\n\t\t// New caches will be created and the unlock returned,\n\t\t// allowing direct access to the newly created\n\t\t// empty data object. A valid owner object must be provided.\n\t\tvar cache = this.cache[ this.key( owner ) ];\n\n\t\treturn key === undefined ?\n\t\t\tcache : cache[ key ];\n\t},\n\taccess: function( owner, key, value ) {\n\t\tvar stored;\n\t\t// In cases where either:\n\t\t//\n\t\t//   1. No key was specified\n\t\t//   2. A string key was specified, but no value provided\n\t\t//\n\t\t// Take the \"read\" path and allow the get method to determine\n\t\t// which value to return, respectively either:\n\t\t//\n\t\t//   1. The entire cache object\n\t\t//   2. The data stored at the key\n\t\t//\n\t\tif ( key === undefined ||\n\t\t\t\t((key && typeof key === \"string\") && value === undefined) ) {\n\n\t\t\tstored = this.get( owner, key );\n\n\t\t\treturn stored !== undefined ?\n\t\t\t\tstored : this.get( owner, jQuery.camelCase(key) );\n\t\t}\n\n\t\t// [*]When the key is not a string, or both a key and value\n\t\t// are specified, set or extend (existing objects) with either:\n\t\t//\n\t\t//   1. An object of properties\n\t\t//   2. A key and value\n\t\t//\n\t\tthis.set( owner, key, value );\n\n\t\t// Since the \"set\" path can have two possible entry points\n\t\t// return the expected data based on which path was taken[*]\n\t\treturn value !== undefined ? value : key;\n\t},\n\tremove: function( owner, key ) {\n\t\tvar i, name, camel,\n\t\t\tunlock = this.key( owner ),\n\t\t\tcache = this.cache[ unlock ];\n\n\t\tif ( key === undefined ) {\n\t\t\tthis.cache[ unlock ] = {};\n\n\t\t} else {\n\t\t\t// Support array or space separated string of keys\n\t\t\tif ( jQuery.isArray( key ) ) {\n\t\t\t\t// If \"name\" is an array of keys...\n\t\t\t\t// When data is initially created, via (\"key\", \"val\") signature,\n\t\t\t\t// keys will be converted to camelCase.\n\t\t\t\t// Since there is no way to tell _how_ a key was added, remove\n\t\t\t\t// both plain key and camelCase key. #12786\n\t\t\t\t// This will only penalize the array argument path.\n\t\t\t\tname = key.concat( key.map( jQuery.camelCase ) );\n\t\t\t} else {\n\t\t\t\tcamel = jQuery.camelCase( key );\n\t\t\t\t// Try the string as a key before any manipulation\n\t\t\t\tif ( key in cache ) {\n\t\t\t\t\tname = [ key, camel ];\n\t\t\t\t} else {\n\t\t\t\t\t// If a key with the spaces exists, use it.\n\t\t\t\t\t// Otherwise, create an array by matching non-whitespace\n\t\t\t\t\tname = camel;\n\t\t\t\t\tname = name in cache ?\n\t\t\t\t\t\t[ name ] : ( name.match( rnotwhite ) || [] );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ti = name.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tdelete cache[ name[ i ] ];\n\t\t\t}\n\t\t}\n\t},\n\thasData: function( owner ) {\n\t\treturn !jQuery.isEmptyObject(\n\t\t\tthis.cache[ owner[ this.expando ] ] || {}\n\t\t);\n\t},\n\tdiscard: function( owner ) {\n\t\tif ( owner[ this.expando ] ) {\n\t\t\tdelete this.cache[ owner[ this.expando ] ];\n\t\t}\n\t}\n};\nvar data_priv = new Data();\n\nvar data_user = new Data();\n\n\n\n//\tImplementation Summary\n//\n//\t1. Enforce API surface and semantic compatibility with 1.9.x branch\n//\t2. Improve the module's maintainability by reducing the storage\n//\t\tpaths to a single mechanism.\n//\t3. Use the same single mechanism to support \"private\" and \"user\" data.\n//\t4. _Never_ expose \"private\" data to user code (TODO: Drop _data, _removeData)\n//\t5. Avoid exposing implementation details on user objects (eg. expando properties)\n//\t6. Provide a clear path for implementation upgrade to WeakMap in 2014\n\nvar rbrace = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\n\trmultiDash = /([A-Z])/g;\n\nfunction dataAttr( elem, key, data ) {\n\tvar name;\n\n\t// If nothing was found internally, try to fetch any\n\t// data from the HTML5 data-* attribute\n\tif ( data === undefined && elem.nodeType === 1 ) {\n\t\tname = \"data-\" + key.replace( rmultiDash, \"-$1\" ).toLowerCase();\n\t\tdata = elem.getAttribute( name );\n\n\t\tif ( typeof data === \"string\" ) {\n\t\t\ttry {\n\t\t\t\tdata = data === \"true\" ? true :\n\t\t\t\t\tdata === \"false\" ? false :\n\t\t\t\t\tdata === \"null\" ? null :\n\t\t\t\t\t// Only convert to a number if it doesn't change the string\n\t\t\t\t\t+data + \"\" === data ? +data :\n\t\t\t\t\trbrace.test( data ) ? jQuery.parseJSON( data ) :\n\t\t\t\t\tdata;\n\t\t\t} catch( e ) {}\n\n\t\t\t// Make sure we set the data so it isn't changed later\n\t\t\tdata_user.set( elem, key, data );\n\t\t} else {\n\t\t\tdata = undefined;\n\t\t}\n\t}\n\treturn data;\n}\n\njQuery.extend({\n\thasData: function( elem ) {\n\t\treturn data_user.hasData( elem ) || data_priv.hasData( elem );\n\t},\n\n\tdata: function( elem, name, data ) {\n\t\treturn data_user.access( elem, name, data );\n\t},\n\n\tremoveData: function( elem, name ) {\n\t\tdata_user.remove( elem, name );\n\t},\n\n\t// TODO: Now that all calls to _data and _removeData have been replaced\n\t// with direct calls to data_priv methods, these can be deprecated.\n\t_data: function( elem, name, data ) {\n\t\treturn data_priv.access( elem, name, data );\n\t},\n\n\t_removeData: function( elem, name ) {\n\t\tdata_priv.remove( elem, name );\n\t}\n});\n\njQuery.fn.extend({\n\tdata: function( key, value ) {\n\t\tvar i, name, data,\n\t\t\telem = this[ 0 ],\n\t\t\tattrs = elem && elem.attributes;\n\n\t\t// Gets all values\n\t\tif ( key === undefined ) {\n\t\t\tif ( this.length ) {\n\t\t\t\tdata = data_user.get( elem );\n\n\t\t\t\tif ( elem.nodeType === 1 && !data_priv.get( elem, \"hasDataAttrs\" ) ) {\n\t\t\t\t\ti = attrs.length;\n\t\t\t\t\twhile ( i-- ) {\n\n\t\t\t\t\t\t// Support: IE11+\n\t\t\t\t\t\t// The attrs elements can be null (#14894)\n\t\t\t\t\t\tif ( attrs[ i ] ) {\n\t\t\t\t\t\t\tname = attrs[ i ].name;\n\t\t\t\t\t\t\tif ( name.indexOf( \"data-\" ) === 0 ) {\n\t\t\t\t\t\t\t\tname = jQuery.camelCase( name.slice(5) );\n\t\t\t\t\t\t\t\tdataAttr( elem, name, data[ name ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tdata_priv.set( elem, \"hasDataAttrs\", true );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\t// Sets multiple values\n\t\tif ( typeof key === \"object\" ) {\n\t\t\treturn this.each(function() {\n\t\t\t\tdata_user.set( this, key );\n\t\t\t});\n\t\t}\n\n\t\treturn access( this, function( value ) {\n\t\t\tvar data,\n\t\t\t\tcamelKey = jQuery.camelCase( key );\n\n\t\t\t// The calling jQuery object (element matches) is not empty\n\t\t\t// (and therefore has an element appears at this[ 0 ]) and the\n\t\t\t// `value` parameter was not undefined. An empty jQuery object\n\t\t\t// will result in `undefined` for elem = this[ 0 ] which will\n\t\t\t// throw an exception if an attempt to read a data cache is made.\n\t\t\tif ( elem && value === undefined ) {\n\t\t\t\t// Attempt to get data from the cache\n\t\t\t\t// with the key as-is\n\t\t\t\tdata = data_user.get( elem, key );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// Attempt to get data from the cache\n\t\t\t\t// with the key camelized\n\t\t\t\tdata = data_user.get( elem, camelKey );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// Attempt to \"discover\" the data in\n\t\t\t\t// HTML5 custom data-* attrs\n\t\t\t\tdata = dataAttr( elem, camelKey, undefined );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// We tried really hard, but the data doesn't exist.\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Set the data...\n\t\t\tthis.each(function() {\n\t\t\t\t// First, attempt to store a copy or reference of any\n\t\t\t\t// data that might've been store with a camelCased key.\n\t\t\t\tvar data = data_user.get( this, camelKey );\n\n\t\t\t\t// For HTML5 data-* attribute interop, we have to\n\t\t\t\t// store property names with dashes in a camelCase form.\n\t\t\t\t// This might not apply to all properties...*\n\t\t\t\tdata_user.set( this, camelKey, value );\n\n\t\t\t\t// *... In the case of properties that might _actually_\n\t\t\t\t// have dashes, we need to also store a copy of that\n\t\t\t\t// unchanged property.\n\t\t\t\tif ( key.indexOf(\"-\") !== -1 && data !== undefined ) {\n\t\t\t\t\tdata_user.set( this, key, value );\n\t\t\t\t}\n\t\t\t});\n\t\t}, null, value, arguments.length > 1, null, true );\n\t},\n\n\tremoveData: function( key ) {\n\t\treturn this.each(function() {\n\t\t\tdata_user.remove( this, key );\n\t\t});\n\t}\n});\n\n\njQuery.extend({\n\tqueue: function( elem, type, data ) {\n\t\tvar queue;\n\n\t\tif ( elem ) {\n\t\t\ttype = ( type || \"fx\" ) + \"queue\";\n\t\t\tqueue = data_priv.get( elem, type );\n\n\t\t\t// Speed up dequeue by getting out quickly if this is just a lookup\n\t\t\tif ( data ) {\n\t\t\t\tif ( !queue || jQuery.isArray( data ) ) {\n\t\t\t\t\tqueue = data_priv.access( elem, type, jQuery.makeArray(data) );\n\t\t\t\t} else {\n\t\t\t\t\tqueue.push( data );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn queue || [];\n\t\t}\n\t},\n\n\tdequeue: function( elem, type ) {\n\t\ttype = type || \"fx\";\n\n\t\tvar queue = jQuery.queue( elem, type ),\n\t\t\tstartLength = queue.length,\n\t\t\tfn = queue.shift(),\n\t\t\thooks = jQuery._queueHooks( elem, type ),\n\t\t\tnext = function() {\n\t\t\t\tjQuery.dequeue( elem, type );\n\t\t\t};\n\n\t\t// If the fx queue is dequeued, always remove the progress sentinel\n\t\tif ( fn === \"inprogress\" ) {\n\t\t\tfn = queue.shift();\n\t\t\tstartLength--;\n\t\t}\n\n\t\tif ( fn ) {\n\n\t\t\t// Add a progress sentinel to prevent the fx queue from being\n\t\t\t// automatically dequeued\n\t\t\tif ( type === \"fx\" ) {\n\t\t\t\tqueue.unshift( \"inprogress\" );\n\t\t\t}\n\n\t\t\t// Clear up the last queue stop function\n\t\t\tdelete hooks.stop;\n\t\t\tfn.call( elem, next, hooks );\n\t\t}\n\n\t\tif ( !startLength && hooks ) {\n\t\t\thooks.empty.fire();\n\t\t}\n\t},\n\n\t// Not public - generate a queueHooks object, or return the current one\n\t_queueHooks: function( elem, type ) {\n\t\tvar key = type + \"queueHooks\";\n\t\treturn data_priv.get( elem, key ) || data_priv.access( elem, key, {\n\t\t\tempty: jQuery.Callbacks(\"once memory\").add(function() {\n\t\t\t\tdata_priv.remove( elem, [ type + \"queue\", key ] );\n\t\t\t})\n\t\t});\n\t}\n});\n\njQuery.fn.extend({\n\tqueue: function( type, data ) {\n\t\tvar setter = 2;\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tdata = type;\n\t\t\ttype = \"fx\";\n\t\t\tsetter--;\n\t\t}\n\n\t\tif ( arguments.length < setter ) {\n\t\t\treturn jQuery.queue( this[0], type );\n\t\t}\n\n\t\treturn data === undefined ?\n\t\t\tthis :\n\t\t\tthis.each(function() {\n\t\t\t\tvar queue = jQuery.queue( this, type, data );\n\n\t\t\t\t// Ensure a hooks for this queue\n\t\t\t\tjQuery._queueHooks( this, type );\n\n\t\t\t\tif ( type === \"fx\" && queue[0] !== \"inprogress\" ) {\n\t\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t\t}\n\t\t\t});\n\t},\n\tdequeue: function( type ) {\n\t\treturn this.each(function() {\n\t\t\tjQuery.dequeue( this, type );\n\t\t});\n\t},\n\tclearQueue: function( type ) {\n\t\treturn this.queue( type || \"fx\", [] );\n\t},\n\t// Get a promise resolved when queues of a certain type\n\t// are emptied (fx is the type by default)\n\tpromise: function( type, obj ) {\n\t\tvar tmp,\n\t\t\tcount = 1,\n\t\t\tdefer = jQuery.Deferred(),\n\t\t\telements = this,\n\t\t\ti = this.length,\n\t\t\tresolve = function() {\n\t\t\t\tif ( !( --count ) ) {\n\t\t\t\t\tdefer.resolveWith( elements, [ elements ] );\n\t\t\t\t}\n\t\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tobj = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\ttype = type || \"fx\";\n\n\t\twhile ( i-- ) {\n\t\t\ttmp = data_priv.get( elements[ i ], type + \"queueHooks\" );\n\t\t\tif ( tmp && tmp.empty ) {\n\t\t\t\tcount++;\n\t\t\t\ttmp.empty.add( resolve );\n\t\t\t}\n\t\t}\n\t\tresolve();\n\t\treturn defer.promise( obj );\n\t}\n});\nvar pnum = (/[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/).source;\n\nvar cssExpand = [ \"Top\", \"Right\", \"Bottom\", \"Left\" ];\n\nvar isHidden = function( elem, el ) {\n\t\t// isHidden might be called from jQuery#filter function;\n\t\t// in that case, element will be second argument\n\t\telem = el || elem;\n\t\treturn jQuery.css( elem, \"display\" ) === \"none\" || !jQuery.contains( elem.ownerDocument, elem );\n\t};\n\nvar rcheckableType = (/^(?:checkbox|radio)$/i);\n\n\n\n(function() {\n\tvar fragment = document.createDocumentFragment(),\n\t\tdiv = fragment.appendChild( document.createElement( \"div\" ) ),\n\t\tinput = document.createElement( \"input\" );\n\n\t// Support: Safari<=5.1\n\t// Check state lost if the name is set (#11217)\n\t// Support: Windows Web Apps (WWA)\n\t// `name` and `type` must use .setAttribute for WWA (#14901)\n\tinput.setAttribute( \"type\", \"radio\" );\n\tinput.setAttribute( \"checked\", \"checked\" );\n\tinput.setAttribute( \"name\", \"t\" );\n\n\tdiv.appendChild( input );\n\n\t// Support: Safari<=5.1, Android<4.2\n\t// Older WebKit doesn't clone checked state correctly in fragments\n\tsupport.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;\n\n\t// Support: IE<=11+\n\t// Make sure textarea (and checkbox) defaultValue is properly cloned\n\tdiv.innerHTML = \"<textarea>x</textarea>\";\n\tsupport.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;\n})();\nvar strundefined = typeof undefined;\n\n\n\nsupport.focusinBubbles = \"onfocusin\" in window;\n\n\nvar\n\trkeyEvent = /^key/,\n\trmouseEvent = /^(?:mouse|pointer|contextmenu)|click/,\n\trfocusMorph = /^(?:focusinfocus|focusoutblur)$/,\n\trtypenamespace = /^([^.]*)(?:\\.(.+)|)$/;\n\nfunction returnTrue() {\n\treturn true;\n}\n\nfunction returnFalse() {\n\treturn false;\n}\n\nfunction safeActiveElement() {\n\ttry {\n\t\treturn document.activeElement;\n\t} catch ( err ) { }\n}\n\n/*\n * Helper functions for managing events -- not part of the public interface.\n * Props to Dean Edwards' addEvent library for many of the ideas.\n */\njQuery.event = {\n\n\tglobal: {},\n\n\tadd: function( elem, types, handler, data, selector ) {\n\n\t\tvar handleObjIn, eventHandle, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = data_priv.get( elem );\n\n\t\t// Don't attach events to noData or text/comment nodes (but allow plain objects)\n\t\tif ( !elemData ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Caller can pass in an object of custom data in lieu of the handler\n\t\tif ( handler.handler ) {\n\t\t\thandleObjIn = handler;\n\t\t\thandler = handleObjIn.handler;\n\t\t\tselector = handleObjIn.selector;\n\t\t}\n\n\t\t// Make sure that the handler has a unique ID, used to find/remove it later\n\t\tif ( !handler.guid ) {\n\t\t\thandler.guid = jQuery.guid++;\n\t\t}\n\n\t\t// Init the element's event structure and main handler, if this is the first\n\t\tif ( !(events = elemData.events) ) {\n\t\t\tevents = elemData.events = {};\n\t\t}\n\t\tif ( !(eventHandle = elemData.handle) ) {\n\t\t\teventHandle = elemData.handle = function( e ) {\n\t\t\t\t// Discard the second event of a jQuery.event.trigger() and\n\t\t\t\t// when an event is called after a page has unloaded\n\t\t\t\treturn typeof jQuery !== strundefined && jQuery.event.triggered !== e.type ?\n\t\t\t\t\tjQuery.event.dispatch.apply( elem, arguments ) : undefined;\n\t\t\t};\n\t\t}\n\n\t\t// Handle multiple events separated by a space\n\t\ttypes = ( types || \"\" ).match( rnotwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[t] ) || [];\n\t\t\ttype = origType = tmp[1];\n\t\t\tnamespaces = ( tmp[2] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// There *must* be a type, no attaching namespace-only handlers\n\t\t\tif ( !type ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If event changes its type, use the special event handlers for the changed type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// If selector defined, determine special event api type, otherwise given type\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\n\t\t\t// Update special based on newly reset type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// handleObj is passed to all event handlers\n\t\t\thandleObj = jQuery.extend({\n\t\t\t\ttype: type,\n\t\t\t\torigType: origType,\n\t\t\t\tdata: data,\n\t\t\t\thandler: handler,\n\t\t\t\tguid: handler.guid,\n\t\t\t\tselector: selector,\n\t\t\t\tneedsContext: selector && jQuery.expr.match.needsContext.test( selector ),\n\t\t\t\tnamespace: namespaces.join(\".\")\n\t\t\t}, handleObjIn );\n\n\t\t\t// Init the event handler queue if we're the first\n\t\t\tif ( !(handlers = events[ type ]) ) {\n\t\t\t\thandlers = events[ type ] = [];\n\t\t\t\thandlers.delegateCount = 0;\n\n\t\t\t\t// Only use addEventListener if the special events handler returns false\n\t\t\t\tif ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {\n\t\t\t\t\tif ( elem.addEventListener ) {\n\t\t\t\t\t\telem.addEventListener( type, eventHandle, false );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( special.add ) {\n\t\t\t\tspecial.add.call( elem, handleObj );\n\n\t\t\t\tif ( !handleObj.handler.guid ) {\n\t\t\t\t\thandleObj.handler.guid = handler.guid;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add to the element's handler list, delegates in front\n\t\t\tif ( selector ) {\n\t\t\t\thandlers.splice( handlers.delegateCount++, 0, handleObj );\n\t\t\t} else {\n\t\t\t\thandlers.push( handleObj );\n\t\t\t}\n\n\t\t\t// Keep track of which events have ever been used, for event optimization\n\t\t\tjQuery.event.global[ type ] = true;\n\t\t}\n\n\t},\n\n\t// Detach an event or set of events from an element\n\tremove: function( elem, types, handler, selector, mappedTypes ) {\n\n\t\tvar j, origCount, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = data_priv.hasData( elem ) && data_priv.get( elem );\n\n\t\tif ( !elemData || !(events = elemData.events) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Once for each type.namespace in types; type may be omitted\n\t\ttypes = ( types || \"\" ).match( rnotwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[t] ) || [];\n\t\t\ttype = origType = tmp[1];\n\t\t\tnamespaces = ( tmp[2] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// Unbind all events (on this namespace, if provided) for the element\n\t\t\tif ( !type ) {\n\t\t\t\tfor ( type in events ) {\n\t\t\t\t\tjQuery.event.remove( elem, type + types[ t ], handler, selector, true );\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\t\t\thandlers = events[ type ] || [];\n\t\t\ttmp = tmp[2] && new RegExp( \"(^|\\\\.)\" + namespaces.join(\"\\\\.(?:.*\\\\.|)\") + \"(\\\\.|$)\" );\n\n\t\t\t// Remove matching events\n\t\t\torigCount = j = handlers.length;\n\t\t\twhile ( j-- ) {\n\t\t\t\thandleObj = handlers[ j ];\n\n\t\t\t\tif ( ( mappedTypes || origType === handleObj.origType ) &&\n\t\t\t\t\t( !handler || handler.guid === handleObj.guid ) &&\n\t\t\t\t\t( !tmp || tmp.test( handleObj.namespace ) ) &&\n\t\t\t\t\t( !selector || selector === handleObj.selector || selector === \"**\" && handleObj.selector ) ) {\n\t\t\t\t\thandlers.splice( j, 1 );\n\n\t\t\t\t\tif ( handleObj.selector ) {\n\t\t\t\t\t\thandlers.delegateCount--;\n\t\t\t\t\t}\n\t\t\t\t\tif ( special.remove ) {\n\t\t\t\t\t\tspecial.remove.call( elem, handleObj );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Remove generic event handler if we removed something and no more handlers exist\n\t\t\t// (avoids potential for endless recursion during removal of special event handlers)\n\t\t\tif ( origCount && !handlers.length ) {\n\t\t\t\tif ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {\n\t\t\t\t\tjQuery.removeEvent( elem, type, elemData.handle );\n\t\t\t\t}\n\n\t\t\t\tdelete events[ type ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove the expando if it's no longer used\n\t\tif ( jQuery.isEmptyObject( events ) ) {\n\t\t\tdelete elemData.handle;\n\t\t\tdata_priv.remove( elem, \"events\" );\n\t\t}\n\t},\n\n\ttrigger: function( event, data, elem, onlyHandlers ) {\n\n\t\tvar i, cur, tmp, bubbleType, ontype, handle, special,\n\t\t\teventPath = [ elem || document ],\n\t\t\ttype = hasOwn.call( event, \"type\" ) ? event.type : event,\n\t\t\tnamespaces = hasOwn.call( event, \"namespace\" ) ? event.namespace.split(\".\") : [];\n\n\t\tcur = tmp = elem = elem || document;\n\n\t\t// Don't do events on text and comment nodes\n\t\tif ( elem.nodeType === 3 || elem.nodeType === 8 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// focus/blur morphs to focusin/out; ensure we're not firing them right now\n\t\tif ( rfocusMorph.test( type + jQuery.event.triggered ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( type.indexOf(\".\") >= 0 ) {\n\t\t\t// Namespaced trigger; create a regexp to match event type in handle()\n\t\t\tnamespaces = type.split(\".\");\n\t\t\ttype = namespaces.shift();\n\t\t\tnamespaces.sort();\n\t\t}\n\t\tontype = type.indexOf(\":\") < 0 && \"on\" + type;\n\n\t\t// Caller can pass in a jQuery.Event object, Object, or just an event type string\n\t\tevent = event[ jQuery.expando ] ?\n\t\t\tevent :\n\t\t\tnew jQuery.Event( type, typeof event === \"object\" && event );\n\n\t\t// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)\n\t\tevent.isTrigger = onlyHandlers ? 2 : 3;\n\t\tevent.namespace = namespaces.join(\".\");\n\t\tevent.namespace_re = event.namespace ?\n\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join(\"\\\\.(?:.*\\\\.|)\") + \"(\\\\.|$)\" ) :\n\t\t\tnull;\n\n\t\t// Clean up the event in case it is being reused\n\t\tevent.result = undefined;\n\t\tif ( !event.target ) {\n\t\t\tevent.target = elem;\n\t\t}\n\n\t\t// Clone any incoming data and prepend the event, creating the handler arg list\n\t\tdata = data == null ?\n\t\t\t[ event ] :\n\t\t\tjQuery.makeArray( data, [ event ] );\n\n\t\t// Allow special events to draw outside the lines\n\t\tspecial = jQuery.event.special[ type ] || {};\n\t\tif ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine event propagation path in advance, per W3C events spec (#9951)\n\t\t// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)\n\t\tif ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {\n\n\t\t\tbubbleType = special.delegateType || type;\n\t\t\tif ( !rfocusMorph.test( bubbleType + type ) ) {\n\t\t\t\tcur = cur.parentNode;\n\t\t\t}\n\t\t\tfor ( ; cur; cur = cur.parentNode ) {\n\t\t\t\teventPath.push( cur );\n\t\t\t\ttmp = cur;\n\t\t\t}\n\n\t\t\t// Only add window if we got to document (e.g., not plain obj or detached DOM)\n\t\t\tif ( tmp === (elem.ownerDocument || document) ) {\n\t\t\t\teventPath.push( tmp.defaultView || tmp.parentWindow || window );\n\t\t\t}\n\t\t}\n\n\t\t// Fire handlers on the event path\n\t\ti = 0;\n\t\twhile ( (cur = eventPath[i++]) && !event.isPropagationStopped() ) {\n\n\t\t\tevent.type = i > 1 ?\n\t\t\t\tbubbleType :\n\t\t\t\tspecial.bindType || type;\n\n\t\t\t// jQuery handler\n\t\t\thandle = ( data_priv.get( cur, \"events\" ) || {} )[ event.type ] && data_priv.get( cur, \"handle\" );\n\t\t\tif ( handle ) {\n\t\t\t\thandle.apply( cur, data );\n\t\t\t}\n\n\t\t\t// Native handler\n\t\t\thandle = ontype && cur[ ontype ];\n\t\t\tif ( handle && handle.apply && jQuery.acceptData( cur ) ) {\n\t\t\t\tevent.result = handle.apply( cur, data );\n\t\t\t\tif ( event.result === false ) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tevent.type = type;\n\n\t\t// If nobody prevented the default action, do it now\n\t\tif ( !onlyHandlers && !event.isDefaultPrevented() ) {\n\n\t\t\tif ( (!special._default || special._default.apply( eventPath.pop(), data ) === false) &&\n\t\t\t\tjQuery.acceptData( elem ) ) {\n\n\t\t\t\t// Call a native DOM method on the target with the same name name as the event.\n\t\t\t\t// Don't do default actions on window, that's where global variables be (#6170)\n\t\t\t\tif ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {\n\n\t\t\t\t\t// Don't re-trigger an onFOO event when we call its FOO() method\n\t\t\t\t\ttmp = elem[ ontype ];\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = null;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prevent re-triggering of the same event, since we already bubbled it above\n\t\t\t\t\tjQuery.event.triggered = type;\n\t\t\t\t\telem[ type ]();\n\t\t\t\t\tjQuery.event.triggered = undefined;\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = tmp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\tdispatch: function( event ) {\n\n\t\t// Make a writable jQuery.Event from the native event object\n\t\tevent = jQuery.event.fix( event );\n\n\t\tvar i, j, ret, matched, handleObj,\n\t\t\thandlerQueue = [],\n\t\t\targs = slice.call( arguments ),\n\t\t\thandlers = ( data_priv.get( this, \"events\" ) || {} )[ event.type ] || [],\n\t\t\tspecial = jQuery.event.special[ event.type ] || {};\n\n\t\t// Use the fix-ed jQuery.Event rather than the (read-only) native event\n\t\targs[0] = event;\n\t\tevent.delegateTarget = this;\n\n\t\t// Call the preDispatch hook for the mapped type, and let it bail if desired\n\t\tif ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine handlers\n\t\thandlerQueue = jQuery.event.handlers.call( this, event, handlers );\n\n\t\t// Run delegates first; they may want to stop propagation beneath us\n\t\ti = 0;\n\t\twhile ( (matched = handlerQueue[ i++ ]) && !event.isPropagationStopped() ) {\n\t\t\tevent.currentTarget = matched.elem;\n\n\t\t\tj = 0;\n\t\t\twhile ( (handleObj = matched.handlers[ j++ ]) && !event.isImmediatePropagationStopped() ) {\n\n\t\t\t\t// Triggered event must either 1) have no namespace, or 2) have namespace(s)\n\t\t\t\t// a subset or equal to those in the bound event (both can have no namespace).\n\t\t\t\tif ( !event.namespace_re || event.namespace_re.test( handleObj.namespace ) ) {\n\n\t\t\t\t\tevent.handleObj = handleObj;\n\t\t\t\t\tevent.data = handleObj.data;\n\n\t\t\t\t\tret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )\n\t\t\t\t\t\t\t.apply( matched.elem, args );\n\n\t\t\t\t\tif ( ret !== undefined ) {\n\t\t\t\t\t\tif ( (event.result = ret) === false ) {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Call the postDispatch hook for the mapped type\n\t\tif ( special.postDispatch ) {\n\t\t\tspecial.postDispatch.call( this, event );\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\thandlers: function( event, handlers ) {\n\t\tvar i, matches, sel, handleObj,\n\t\t\thandlerQueue = [],\n\t\t\tdelegateCount = handlers.delegateCount,\n\t\t\tcur = event.target;\n\n\t\t// Find delegate handlers\n\t\t// Black-hole SVG <use> instance trees (#13180)\n\t\t// Avoid non-left-click bubbling in Firefox (#3861)\n\t\tif ( delegateCount && cur.nodeType && (!event.button || event.type !== \"click\") ) {\n\n\t\t\tfor ( ; cur !== this; cur = cur.parentNode || this ) {\n\n\t\t\t\t// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)\n\t\t\t\tif ( cur.disabled !== true || event.type !== \"click\" ) {\n\t\t\t\t\tmatches = [];\n\t\t\t\t\tfor ( i = 0; i < delegateCount; i++ ) {\n\t\t\t\t\t\thandleObj = handlers[ i ];\n\n\t\t\t\t\t\t// Don't conflict with Object.prototype properties (#13203)\n\t\t\t\t\t\tsel = handleObj.selector + \" \";\n\n\t\t\t\t\t\tif ( matches[ sel ] === undefined ) {\n\t\t\t\t\t\t\tmatches[ sel ] = handleObj.needsContext ?\n\t\t\t\t\t\t\t\tjQuery( sel, this ).index( cur ) >= 0 :\n\t\t\t\t\t\t\t\tjQuery.find( sel, this, null, [ cur ] ).length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( matches[ sel ] ) {\n\t\t\t\t\t\t\tmatches.push( handleObj );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( matches.length ) {\n\t\t\t\t\t\thandlerQueue.push({ elem: cur, handlers: matches });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Add the remaining (directly-bound) handlers\n\t\tif ( delegateCount < handlers.length ) {\n\t\t\thandlerQueue.push({ elem: this, handlers: handlers.slice( delegateCount ) });\n\t\t}\n\n\t\treturn handlerQueue;\n\t},\n\n\t// Includes some event props shared by KeyEvent and MouseEvent\n\tprops: \"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which\".split(\" \"),\n\n\tfixHooks: {},\n\n\tkeyHooks: {\n\t\tprops: \"char charCode key keyCode\".split(\" \"),\n\t\tfilter: function( event, original ) {\n\n\t\t\t// Add which for key events\n\t\t\tif ( event.which == null ) {\n\t\t\t\tevent.which = original.charCode != null ? original.charCode : original.keyCode;\n\t\t\t}\n\n\t\t\treturn event;\n\t\t}\n\t},\n\n\tmouseHooks: {\n\t\tprops: \"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement\".split(\" \"),\n\t\tfilter: function( event, original ) {\n\t\t\tvar eventDoc, doc, body,\n\t\t\t\tbutton = original.button;\n\n\t\t\t// Calculate pageX/Y if missing and clientX/Y available\n\t\t\tif ( event.pageX == null && original.clientX != null ) {\n\t\t\t\teventDoc = event.target.ownerDocument || document;\n\t\t\t\tdoc = eventDoc.documentElement;\n\t\t\t\tbody = eventDoc.body;\n\n\t\t\t\tevent.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );\n\t\t\t\tevent.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );\n\t\t\t}\n\n\t\t\t// Add which for click: 1 === left; 2 === middle; 3 === right\n\t\t\t// Note: button is not normalized, so don't use it\n\t\t\tif ( !event.which && button !== undefined ) {\n\t\t\t\tevent.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );\n\t\t\t}\n\n\t\t\treturn event;\n\t\t}\n\t},\n\n\tfix: function( event ) {\n\t\tif ( event[ jQuery.expando ] ) {\n\t\t\treturn event;\n\t\t}\n\n\t\t// Create a writable copy of the event object and normalize some properties\n\t\tvar i, prop, copy,\n\t\t\ttype = event.type,\n\t\t\toriginalEvent = event,\n\t\t\tfixHook = this.fixHooks[ type ];\n\n\t\tif ( !fixHook ) {\n\t\t\tthis.fixHooks[ type ] = fixHook =\n\t\t\t\trmouseEvent.test( type ) ? this.mouseHooks :\n\t\t\t\trkeyEvent.test( type ) ? this.keyHooks :\n\t\t\t\t{};\n\t\t}\n\t\tcopy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;\n\n\t\tevent = new jQuery.Event( originalEvent );\n\n\t\ti = copy.length;\n\t\twhile ( i-- ) {\n\t\t\tprop = copy[ i ];\n\t\t\tevent[ prop ] = originalEvent[ prop ];\n\t\t}\n\n\t\t// Support: Cordova 2.5 (WebKit) (#13255)\n\t\t// All events should have a target; Cordova deviceready doesn't\n\t\tif ( !event.target ) {\n\t\t\tevent.target = document;\n\t\t}\n\n\t\t// Support: Safari 6.0+, Chrome<28\n\t\t// Target should not be a text node (#504, #13143)\n\t\tif ( event.target.nodeType === 3 ) {\n\t\t\tevent.target = event.target.parentNode;\n\t\t}\n\n\t\treturn fixHook.filter ? fixHook.filter( event, originalEvent ) : event;\n\t},\n\n\tspecial: {\n\t\tload: {\n\t\t\t// Prevent triggered image.load events from bubbling to window.load\n\t\t\tnoBubble: true\n\t\t},\n\t\tfocus: {\n\t\t\t// Fire native event if possible so blur/focus sequence is correct\n\t\t\ttrigger: function() {\n\t\t\t\tif ( this !== safeActiveElement() && this.focus ) {\n\t\t\t\t\tthis.focus();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdelegateType: \"focusin\"\n\t\t},\n\t\tblur: {\n\t\t\ttrigger: function() {\n\t\t\t\tif ( this === safeActiveElement() && this.blur ) {\n\t\t\t\t\tthis.blur();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdelegateType: \"focusout\"\n\t\t},\n\t\tclick: {\n\t\t\t// For checkbox, fire native event so checked state will be right\n\t\t\ttrigger: function() {\n\t\t\t\tif ( this.type === \"checkbox\" && this.click && jQuery.nodeName( this, \"input\" ) ) {\n\t\t\t\t\tthis.click();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// For cross-browser consistency, don't fire native .click() on links\n\t\t\t_default: function( event ) {\n\t\t\t\treturn jQuery.nodeName( event.target, \"a\" );\n\t\t\t}\n\t\t},\n\n\t\tbeforeunload: {\n\t\t\tpostDispatch: function( event ) {\n\n\t\t\t\t// Support: Firefox 20+\n\t\t\t\t// Firefox doesn't alert if the returnValue field is not set.\n\t\t\t\tif ( event.result !== undefined && event.originalEvent ) {\n\t\t\t\t\tevent.originalEvent.returnValue = event.result;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\tsimulate: function( type, elem, event, bubble ) {\n\t\t// Piggyback on a donor event to simulate a different one.\n\t\t// Fake originalEvent to avoid donor's stopPropagation, but if the\n\t\t// simulated event prevents default then we do the same on the donor.\n\t\tvar e = jQuery.extend(\n\t\t\tnew jQuery.Event(),\n\t\t\tevent,\n\t\t\t{\n\t\t\t\ttype: type,\n\t\t\t\tisSimulated: true,\n\t\t\t\toriginalEvent: {}\n\t\t\t}\n\t\t);\n\t\tif ( bubble ) {\n\t\t\tjQuery.event.trigger( e, null, elem );\n\t\t} else {\n\t\t\tjQuery.event.dispatch.call( elem, e );\n\t\t}\n\t\tif ( e.isDefaultPrevented() ) {\n\t\t\tevent.preventDefault();\n\t\t}\n\t}\n};\n\njQuery.removeEvent = function( elem, type, handle ) {\n\tif ( elem.removeEventListener ) {\n\t\telem.removeEventListener( type, handle, false );\n\t}\n};\n\njQuery.Event = function( src, props ) {\n\t// Allow instantiation without the 'new' keyword\n\tif ( !(this instanceof jQuery.Event) ) {\n\t\treturn new jQuery.Event( src, props );\n\t}\n\n\t// Event object\n\tif ( src && src.type ) {\n\t\tthis.originalEvent = src;\n\t\tthis.type = src.type;\n\n\t\t// Events bubbling up the document may have been marked as prevented\n\t\t// by a handler lower down the tree; reflect the correct value.\n\t\tthis.isDefaultPrevented = src.defaultPrevented ||\n\t\t\t\tsrc.defaultPrevented === undefined &&\n\t\t\t\t// Support: Android<4.0\n\t\t\t\tsrc.returnValue === false ?\n\t\t\treturnTrue :\n\t\t\treturnFalse;\n\n\t// Event type\n\t} else {\n\t\tthis.type = src;\n\t}\n\n\t// Put explicitly provided properties onto the event object\n\tif ( props ) {\n\t\tjQuery.extend( this, props );\n\t}\n\n\t// Create a timestamp if incoming event doesn't have one\n\tthis.timeStamp = src && src.timeStamp || jQuery.now();\n\n\t// Mark it as fixed\n\tthis[ jQuery.expando ] = true;\n};\n\n// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\n// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\njQuery.Event.prototype = {\n\tisDefaultPrevented: returnFalse,\n\tisPropagationStopped: returnFalse,\n\tisImmediatePropagationStopped: returnFalse,\n\n\tpreventDefault: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isDefaultPrevented = returnTrue;\n\n\t\tif ( e && e.preventDefault ) {\n\t\t\te.preventDefault();\n\t\t}\n\t},\n\tstopPropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isPropagationStopped = returnTrue;\n\n\t\tif ( e && e.stopPropagation ) {\n\t\t\te.stopPropagation();\n\t\t}\n\t},\n\tstopImmediatePropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isImmediatePropagationStopped = returnTrue;\n\n\t\tif ( e && e.stopImmediatePropagation ) {\n\t\t\te.stopImmediatePropagation();\n\t\t}\n\n\t\tthis.stopPropagation();\n\t}\n};\n\n// Create mouseenter/leave events using mouseover/out and event-time checks\n// Support: Chrome 15+\njQuery.each({\n\tmouseenter: \"mouseover\",\n\tmouseleave: \"mouseout\",\n\tpointerenter: \"pointerover\",\n\tpointerleave: \"pointerout\"\n}, function( orig, fix ) {\n\tjQuery.event.special[ orig ] = {\n\t\tdelegateType: fix,\n\t\tbindType: fix,\n\n\t\thandle: function( event ) {\n\t\t\tvar ret,\n\t\t\t\ttarget = this,\n\t\t\t\trelated = event.relatedTarget,\n\t\t\t\thandleObj = event.handleObj;\n\n\t\t\t// For mousenter/leave call the handler if related is outside the target.\n\t\t\t// NB: No relatedTarget if the mouse left/entered the browser window\n\t\t\tif ( !related || (related !== target && !jQuery.contains( target, related )) ) {\n\t\t\t\tevent.type = handleObj.origType;\n\t\t\t\tret = handleObj.handler.apply( this, arguments );\n\t\t\t\tevent.type = fix;\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\t};\n});\n\n// Support: Firefox, Chrome, Safari\n// Create \"bubbling\" focus and blur events\nif ( !support.focusinBubbles ) {\n\tjQuery.each({ focus: \"focusin\", blur: \"focusout\" }, function( orig, fix ) {\n\n\t\t// Attach a single capturing handler on the document while someone wants focusin/focusout\n\t\tvar handler = function( event ) {\n\t\t\t\tjQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );\n\t\t\t};\n\n\t\tjQuery.event.special[ fix ] = {\n\t\t\tsetup: function() {\n\t\t\t\tvar doc = this.ownerDocument || this,\n\t\t\t\t\tattaches = data_priv.access( doc, fix );\n\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tdoc.addEventListener( orig, handler, true );\n\t\t\t\t}\n\t\t\t\tdata_priv.access( doc, fix, ( attaches || 0 ) + 1 );\n\t\t\t},\n\t\t\tteardown: function() {\n\t\t\t\tvar doc = this.ownerDocument || this,\n\t\t\t\t\tattaches = data_priv.access( doc, fix ) - 1;\n\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tdoc.removeEventListener( orig, handler, true );\n\t\t\t\t\tdata_priv.remove( doc, fix );\n\n\t\t\t\t} else {\n\t\t\t\t\tdata_priv.access( doc, fix, attaches );\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t});\n}\n\njQuery.fn.extend({\n\n\ton: function( types, selector, data, fn, /*INTERNAL*/ one ) {\n\t\tvar origFn, type;\n\n\t\t// Types can be a map of types/handlers\n\t\tif ( typeof types === \"object\" ) {\n\t\t\t// ( types-Object, selector, data )\n\t\t\tif ( typeof selector !== \"string\" ) {\n\t\t\t\t// ( types-Object, data )\n\t\t\t\tdata = data || selector;\n\t\t\t\tselector = undefined;\n\t\t\t}\n\t\t\tfor ( type in types ) {\n\t\t\t\tthis.on( type, selector, data, types[ type ], one );\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\n\t\tif ( data == null && fn == null ) {\n\t\t\t// ( types, fn )\n\t\t\tfn = selector;\n\t\t\tdata = selector = undefined;\n\t\t} else if ( fn == null ) {\n\t\t\tif ( typeof selector === \"string\" ) {\n\t\t\t\t// ( types, selector, fn )\n\t\t\t\tfn = data;\n\t\t\t\tdata = undefined;\n\t\t\t} else {\n\t\t\t\t// ( types, data, fn )\n\t\t\t\tfn = data;\n\t\t\t\tdata = selector;\n\t\t\t\tselector = undefined;\n\t\t\t}\n\t\t}\n\t\tif ( fn === false ) {\n\t\t\tfn = returnFalse;\n\t\t} else if ( !fn ) {\n\t\t\treturn this;\n\t\t}\n\n\t\tif ( one === 1 ) {\n\t\t\torigFn = fn;\n\t\t\tfn = function( event ) {\n\t\t\t\t// Can use an empty set, since event contains the info\n\t\t\t\tjQuery().off( event );\n\t\t\t\treturn origFn.apply( this, arguments );\n\t\t\t};\n\t\t\t// Use same guid so caller can remove using origFn\n\t\t\tfn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.add( this, types, fn, data, selector );\n\t\t});\n\t},\n\tone: function( types, selector, data, fn ) {\n\t\treturn this.on( types, selector, data, fn, 1 );\n\t},\n\toff: function( types, selector, fn ) {\n\t\tvar handleObj, type;\n\t\tif ( types && types.preventDefault && types.handleObj ) {\n\t\t\t// ( event )  dispatched jQuery.Event\n\t\t\thandleObj = types.handleObj;\n\t\t\tjQuery( types.delegateTarget ).off(\n\t\t\t\thandleObj.namespace ? handleObj.origType + \".\" + handleObj.namespace : handleObj.origType,\n\t\t\t\thandleObj.selector,\n\t\t\t\thandleObj.handler\n\t\t\t);\n\t\t\treturn this;\n\t\t}\n\t\tif ( typeof types === \"object\" ) {\n\t\t\t// ( types-object [, selector] )\n\t\t\tfor ( type in types ) {\n\t\t\t\tthis.off( type, selector, types[ type ] );\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t\tif ( selector === false || typeof selector === \"function\" ) {\n\t\t\t// ( types [, fn] )\n\t\t\tfn = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tif ( fn === false ) {\n\t\t\tfn = returnFalse;\n\t\t}\n\t\treturn this.each(function() {\n\t\t\tjQuery.event.remove( this, types, fn, selector );\n\t\t});\n\t},\n\n\ttrigger: function( type, data ) {\n\t\treturn this.each(function() {\n\t\t\tjQuery.event.trigger( type, data, this );\n\t\t});\n\t},\n\ttriggerHandler: function( type, data ) {\n\t\tvar elem = this[0];\n\t\tif ( elem ) {\n\t\t\treturn jQuery.event.trigger( type, data, elem, true );\n\t\t}\n\t}\n});\n\n\nvar\n\trxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\\w:]+)[^>]*)\\/>/gi,\n\trtagName = /<([\\w:]+)/,\n\trhtml = /<|&#?\\w+;/,\n\trnoInnerhtml = /<(?:script|style|link)/i,\n\t// checked=\"checked\" or checked\n\trchecked = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n\trscriptType = /^$|\\/(?:java|ecma)script/i,\n\trscriptTypeMasked = /^true\\/(.*)/,\n\trcleanScript = /^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g,\n\n\t// We have to close these tags to support XHTML (#13200)\n\twrapMap = {\n\n\t\t// Support: IE9\n\t\toption: [ 1, \"<select multiple='multiple'>\", \"</select>\" ],\n\n\t\tthead: [ 1, \"<table>\", \"</table>\" ],\n\t\tcol: [ 2, \"<table><colgroup>\", \"</colgroup></table>\" ],\n\t\ttr: [ 2, \"<table><tbody>\", \"</tbody></table>\" ],\n\t\ttd: [ 3, \"<table><tbody><tr>\", \"</tr></tbody></table>\" ],\n\n\t\t_default: [ 0, \"\", \"\" ]\n\t};\n\n// Support: IE9\nwrapMap.optgroup = wrapMap.option;\n\nwrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\nwrapMap.th = wrapMap.td;\n\n// Support: 1.x compatibility\n// Manipulating tables requires a tbody\nfunction manipulationTarget( elem, content ) {\n\treturn jQuery.nodeName( elem, \"table\" ) &&\n\t\tjQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, \"tr\" ) ?\n\n\t\telem.getElementsByTagName(\"tbody\")[0] ||\n\t\t\telem.appendChild( elem.ownerDocument.createElement(\"tbody\") ) :\n\t\telem;\n}\n\n// Replace/restore the type attribute of script elements for safe DOM manipulation\nfunction disableScript( elem ) {\n\telem.type = (elem.getAttribute(\"type\") !== null) + \"/\" + elem.type;\n\treturn elem;\n}\nfunction restoreScript( elem ) {\n\tvar match = rscriptTypeMasked.exec( elem.type );\n\n\tif ( match ) {\n\t\telem.type = match[ 1 ];\n\t} else {\n\t\telem.removeAttribute(\"type\");\n\t}\n\n\treturn elem;\n}\n\n// Mark scripts as having already been evaluated\nfunction setGlobalEval( elems, refElements ) {\n\tvar i = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\tdata_priv.set(\n\t\t\telems[ i ], \"globalEval\", !refElements || data_priv.get( refElements[ i ], \"globalEval\" )\n\t\t);\n\t}\n}\n\nfunction cloneCopyEvent( src, dest ) {\n\tvar i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;\n\n\tif ( dest.nodeType !== 1 ) {\n\t\treturn;\n\t}\n\n\t// 1. Copy private data: events, handlers, etc.\n\tif ( data_priv.hasData( src ) ) {\n\t\tpdataOld = data_priv.access( src );\n\t\tpdataCur = data_priv.set( dest, pdataOld );\n\t\tevents = pdataOld.events;\n\n\t\tif ( events ) {\n\t\t\tdelete pdataCur.handle;\n\t\t\tpdataCur.events = {};\n\n\t\t\tfor ( type in events ) {\n\t\t\t\tfor ( i = 0, l = events[ type ].length; i < l; i++ ) {\n\t\t\t\t\tjQuery.event.add( dest, type, events[ type ][ i ] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// 2. Copy user data\n\tif ( data_user.hasData( src ) ) {\n\t\tudataOld = data_user.access( src );\n\t\tudataCur = jQuery.extend( {}, udataOld );\n\n\t\tdata_user.set( dest, udataCur );\n\t}\n}\n\nfunction getAll( context, tag ) {\n\tvar ret = context.getElementsByTagName ? context.getElementsByTagName( tag || \"*\" ) :\n\t\t\tcontext.querySelectorAll ? context.querySelectorAll( tag || \"*\" ) :\n\t\t\t[];\n\n\treturn tag === undefined || tag && jQuery.nodeName( context, tag ) ?\n\t\tjQuery.merge( [ context ], ret ) :\n\t\tret;\n}\n\n// Fix IE bugs, see support tests\nfunction fixInput( src, dest ) {\n\tvar nodeName = dest.nodeName.toLowerCase();\n\n\t// Fails to persist the checked state of a cloned checkbox or radio button.\n\tif ( nodeName === \"input\" && rcheckableType.test( src.type ) ) {\n\t\tdest.checked = src.checked;\n\n\t// Fails to return the selected option to the default selected state when cloning options\n\t} else if ( nodeName === \"input\" || nodeName === \"textarea\" ) {\n\t\tdest.defaultValue = src.defaultValue;\n\t}\n}\n\njQuery.extend({\n\tclone: function( elem, dataAndEvents, deepDataAndEvents ) {\n\t\tvar i, l, srcElements, destElements,\n\t\t\tclone = elem.cloneNode( true ),\n\t\t\tinPage = jQuery.contains( elem.ownerDocument, elem );\n\n\t\t// Fix IE cloning issues\n\t\tif ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&\n\t\t\t\t!jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2\n\t\t\tdestElements = getAll( clone );\n\t\t\tsrcElements = getAll( elem );\n\n\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\tfixInput( srcElements[ i ], destElements[ i ] );\n\t\t\t}\n\t\t}\n\n\t\t// Copy the events from the original to the clone\n\t\tif ( dataAndEvents ) {\n\t\t\tif ( deepDataAndEvents ) {\n\t\t\t\tsrcElements = srcElements || getAll( elem );\n\t\t\t\tdestElements = destElements || getAll( clone );\n\n\t\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\t\tcloneCopyEvent( srcElements[ i ], destElements[ i ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcloneCopyEvent( elem, clone );\n\t\t\t}\n\t\t}\n\n\t\t// Preserve script evaluation history\n\t\tdestElements = getAll( clone, \"script\" );\n\t\tif ( destElements.length > 0 ) {\n\t\t\tsetGlobalEval( destElements, !inPage && getAll( elem, \"script\" ) );\n\t\t}\n\n\t\t// Return the cloned set\n\t\treturn clone;\n\t},\n\n\tbuildFragment: function( elems, context, scripts, selection ) {\n\t\tvar elem, tmp, tag, wrap, contains, j,\n\t\t\tfragment = context.createDocumentFragment(),\n\t\t\tnodes = [],\n\t\t\ti = 0,\n\t\t\tl = elems.length;\n\n\t\tfor ( ; i < l; i++ ) {\n\t\t\telem = elems[ i ];\n\n\t\t\tif ( elem || elem === 0 ) {\n\n\t\t\t\t// Add nodes directly\n\t\t\t\tif ( jQuery.type( elem ) === \"object\" ) {\n\t\t\t\t\t// Support: QtWebKit, PhantomJS\n\t\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\t\tjQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );\n\n\t\t\t\t// Convert non-html into a text node\n\t\t\t\t} else if ( !rhtml.test( elem ) ) {\n\t\t\t\t\tnodes.push( context.createTextNode( elem ) );\n\n\t\t\t\t// Convert html into DOM nodes\n\t\t\t\t} else {\n\t\t\t\t\ttmp = tmp || fragment.appendChild( context.createElement(\"div\") );\n\n\t\t\t\t\t// Deserialize a standard representation\n\t\t\t\t\ttag = ( rtagName.exec( elem ) || [ \"\", \"\" ] )[ 1 ].toLowerCase();\n\t\t\t\t\twrap = wrapMap[ tag ] || wrapMap._default;\n\t\t\t\t\ttmp.innerHTML = wrap[ 1 ] + elem.replace( rxhtmlTag, \"<$1></$2>\" ) + wrap[ 2 ];\n\n\t\t\t\t\t// Descend through wrappers to the right content\n\t\t\t\t\tj = wrap[ 0 ];\n\t\t\t\t\twhile ( j-- ) {\n\t\t\t\t\t\ttmp = tmp.lastChild;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Support: QtWebKit, PhantomJS\n\t\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\t\tjQuery.merge( nodes, tmp.childNodes );\n\n\t\t\t\t\t// Remember the top-level container\n\t\t\t\t\ttmp = fragment.firstChild;\n\n\t\t\t\t\t// Ensure the created nodes are orphaned (#12392)\n\t\t\t\t\ttmp.textContent = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Remove wrapper from fragment\n\t\tfragment.textContent = \"\";\n\n\t\ti = 0;\n\t\twhile ( (elem = nodes[ i++ ]) ) {\n\n\t\t\t// #4087 - If origin and destination elements are the same, and this is\n\t\t\t// that element, do not do anything\n\t\t\tif ( selection && jQuery.inArray( elem, selection ) !== -1 ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tcontains = jQuery.contains( elem.ownerDocument, elem );\n\n\t\t\t// Append to fragment\n\t\t\ttmp = getAll( fragment.appendChild( elem ), \"script\" );\n\n\t\t\t// Preserve script evaluation history\n\t\t\tif ( contains ) {\n\t\t\t\tsetGlobalEval( tmp );\n\t\t\t}\n\n\t\t\t// Capture executables\n\t\t\tif ( scripts ) {\n\t\t\t\tj = 0;\n\t\t\t\twhile ( (elem = tmp[ j++ ]) ) {\n\t\t\t\t\tif ( rscriptType.test( elem.type || \"\" ) ) {\n\t\t\t\t\t\tscripts.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn fragment;\n\t},\n\n\tcleanData: function( elems ) {\n\t\tvar data, elem, type, key,\n\t\t\tspecial = jQuery.event.special,\n\t\t\ti = 0;\n\n\t\tfor ( ; (elem = elems[ i ]) !== undefined; i++ ) {\n\t\t\tif ( jQuery.acceptData( elem ) ) {\n\t\t\t\tkey = elem[ data_priv.expando ];\n\n\t\t\t\tif ( key && (data = data_priv.cache[ key ]) ) {\n\t\t\t\t\tif ( data.events ) {\n\t\t\t\t\t\tfor ( type in data.events ) {\n\t\t\t\t\t\t\tif ( special[ type ] ) {\n\t\t\t\t\t\t\t\tjQuery.event.remove( elem, type );\n\n\t\t\t\t\t\t\t// This is a shortcut to avoid jQuery.event.remove's overhead\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tjQuery.removeEvent( elem, type, data.handle );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( data_priv.cache[ key ] ) {\n\t\t\t\t\t\t// Discard any remaining `private` data\n\t\t\t\t\t\tdelete data_priv.cache[ key ];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Discard any remaining `user` data\n\t\t\tdelete data_user.cache[ elem[ data_user.expando ] ];\n\t\t}\n\t}\n});\n\njQuery.fn.extend({\n\ttext: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\treturn value === undefined ?\n\t\t\t\tjQuery.text( this ) :\n\t\t\t\tthis.empty().each(function() {\n\t\t\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\t\t\tthis.textContent = value;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t}, null, value, arguments.length );\n\t},\n\n\tappend: function() {\n\t\treturn this.domManip( arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.appendChild( elem );\n\t\t\t}\n\t\t});\n\t},\n\n\tprepend: function() {\n\t\treturn this.domManip( arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.insertBefore( elem, target.firstChild );\n\t\t\t}\n\t\t});\n\t},\n\n\tbefore: function() {\n\t\treturn this.domManip( arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this );\n\t\t\t}\n\t\t});\n\t},\n\n\tafter: function() {\n\t\treturn this.domManip( arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this.nextSibling );\n\t\t\t}\n\t\t});\n\t},\n\n\tremove: function( selector, keepData /* Internal Use Only */ ) {\n\t\tvar elem,\n\t\t\telems = selector ? jQuery.filter( selector, this ) : this,\n\t\t\ti = 0;\n\n\t\tfor ( ; (elem = elems[i]) != null; i++ ) {\n\t\t\tif ( !keepData && elem.nodeType === 1 ) {\n\t\t\t\tjQuery.cleanData( getAll( elem ) );\n\t\t\t}\n\n\t\t\tif ( elem.parentNode ) {\n\t\t\t\tif ( keepData && jQuery.contains( elem.ownerDocument, elem ) ) {\n\t\t\t\t\tsetGlobalEval( getAll( elem, \"script\" ) );\n\t\t\t\t}\n\t\t\t\telem.parentNode.removeChild( elem );\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tempty: function() {\n\t\tvar elem,\n\t\t\ti = 0;\n\n\t\tfor ( ; (elem = this[i]) != null; i++ ) {\n\t\t\tif ( elem.nodeType === 1 ) {\n\n\t\t\t\t// Prevent memory leaks\n\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\n\t\t\t\t// Remove any remaining nodes\n\t\t\t\telem.textContent = \"\";\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tclone: function( dataAndEvents, deepDataAndEvents ) {\n\t\tdataAndEvents = dataAndEvents == null ? false : dataAndEvents;\n\t\tdeepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;\n\n\t\treturn this.map(function() {\n\t\t\treturn jQuery.clone( this, dataAndEvents, deepDataAndEvents );\n\t\t});\n\t},\n\n\thtml: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\tvar elem = this[ 0 ] || {},\n\t\t\t\ti = 0,\n\t\t\t\tl = this.length;\n\n\t\t\tif ( value === undefined && elem.nodeType === 1 ) {\n\t\t\t\treturn elem.innerHTML;\n\t\t\t}\n\n\t\t\t// See if we can take a shortcut and just use innerHTML\n\t\t\tif ( typeof value === \"string\" && !rnoInnerhtml.test( value ) &&\n\t\t\t\t!wrapMap[ ( rtagName.exec( value ) || [ \"\", \"\" ] )[ 1 ].toLowerCase() ] ) {\n\n\t\t\t\tvalue = value.replace( rxhtmlTag, \"<$1></$2>\" );\n\n\t\t\t\ttry {\n\t\t\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\t\t\telem = this[ i ] || {};\n\n\t\t\t\t\t\t// Remove element nodes and prevent memory leaks\n\t\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\t\t\t\t\t\t\telem.innerHTML = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\telem = 0;\n\n\t\t\t\t// If using innerHTML throws an exception, use the fallback method\n\t\t\t\t} catch( e ) {}\n\t\t\t}\n\n\t\t\tif ( elem ) {\n\t\t\t\tthis.empty().append( value );\n\t\t\t}\n\t\t}, null, value, arguments.length );\n\t},\n\n\treplaceWith: function() {\n\t\tvar arg = arguments[ 0 ];\n\n\t\t// Make the changes, replacing each context element with the new content\n\t\tthis.domManip( arguments, function( elem ) {\n\t\t\targ = this.parentNode;\n\n\t\t\tjQuery.cleanData( getAll( this ) );\n\n\t\t\tif ( arg ) {\n\t\t\t\targ.replaceChild( elem, this );\n\t\t\t}\n\t\t});\n\n\t\t// Force removal if there was no new content (e.g., from empty arguments)\n\t\treturn arg && (arg.length || arg.nodeType) ? this : this.remove();\n\t},\n\n\tdetach: function( selector ) {\n\t\treturn this.remove( selector, true );\n\t},\n\n\tdomManip: function( args, callback ) {\n\n\t\t// Flatten any nested arrays\n\t\targs = concat.apply( [], args );\n\n\t\tvar fragment, first, scripts, hasScripts, node, doc,\n\t\t\ti = 0,\n\t\t\tl = this.length,\n\t\t\tset = this,\n\t\t\tiNoClone = l - 1,\n\t\t\tvalue = args[ 0 ],\n\t\t\tisFunction = jQuery.isFunction( value );\n\n\t\t// We can't cloneNode fragments that contain checked, in WebKit\n\t\tif ( isFunction ||\n\t\t\t\t( l > 1 && typeof value === \"string\" &&\n\t\t\t\t\t!support.checkClone && rchecked.test( value ) ) ) {\n\t\t\treturn this.each(function( index ) {\n\t\t\t\tvar self = set.eq( index );\n\t\t\t\tif ( isFunction ) {\n\t\t\t\t\targs[ 0 ] = value.call( this, index, self.html() );\n\t\t\t\t}\n\t\t\t\tself.domManip( args, callback );\n\t\t\t});\n\t\t}\n\n\t\tif ( l ) {\n\t\t\tfragment = jQuery.buildFragment( args, this[ 0 ].ownerDocument, false, this );\n\t\t\tfirst = fragment.firstChild;\n\n\t\t\tif ( fragment.childNodes.length === 1 ) {\n\t\t\t\tfragment = first;\n\t\t\t}\n\n\t\t\tif ( first ) {\n\t\t\t\tscripts = jQuery.map( getAll( fragment, \"script\" ), disableScript );\n\t\t\t\thasScripts = scripts.length;\n\n\t\t\t\t// Use the original fragment for the last item instead of the first because it can end up\n\t\t\t\t// being emptied incorrectly in certain situations (#8070).\n\t\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\t\tnode = fragment;\n\n\t\t\t\t\tif ( i !== iNoClone ) {\n\t\t\t\t\t\tnode = jQuery.clone( node, true, true );\n\n\t\t\t\t\t\t// Keep references to cloned scripts for later restoration\n\t\t\t\t\t\tif ( hasScripts ) {\n\t\t\t\t\t\t\t// Support: QtWebKit\n\t\t\t\t\t\t\t// jQuery.merge because push.apply(_, arraylike) throws\n\t\t\t\t\t\t\tjQuery.merge( scripts, getAll( node, \"script\" ) );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tcallback.call( this[ i ], node, i );\n\t\t\t\t}\n\n\t\t\t\tif ( hasScripts ) {\n\t\t\t\t\tdoc = scripts[ scripts.length - 1 ].ownerDocument;\n\n\t\t\t\t\t// Reenable scripts\n\t\t\t\t\tjQuery.map( scripts, restoreScript );\n\n\t\t\t\t\t// Evaluate executable scripts on first document insertion\n\t\t\t\t\tfor ( i = 0; i < hasScripts; i++ ) {\n\t\t\t\t\t\tnode = scripts[ i ];\n\t\t\t\t\t\tif ( rscriptType.test( node.type || \"\" ) &&\n\t\t\t\t\t\t\t!data_priv.access( node, \"globalEval\" ) && jQuery.contains( doc, node ) ) {\n\n\t\t\t\t\t\t\tif ( node.src ) {\n\t\t\t\t\t\t\t\t// Optional AJAX dependency, but won't run scripts if not present\n\t\t\t\t\t\t\t\tif ( jQuery._evalUrl ) {\n\t\t\t\t\t\t\t\t\tjQuery._evalUrl( node.src );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tjQuery.globalEval( node.textContent.replace( rcleanScript, \"\" ) );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t}\n});\n\njQuery.each({\n\tappendTo: \"append\",\n\tprependTo: \"prepend\",\n\tinsertBefore: \"before\",\n\tinsertAfter: \"after\",\n\treplaceAll: \"replaceWith\"\n}, function( name, original ) {\n\tjQuery.fn[ name ] = function( selector ) {\n\t\tvar elems,\n\t\t\tret = [],\n\t\t\tinsert = jQuery( selector ),\n\t\t\tlast = insert.length - 1,\n\t\t\ti = 0;\n\n\t\tfor ( ; i <= last; i++ ) {\n\t\t\telems = i === last ? this : this.clone( true );\n\t\t\tjQuery( insert[ i ] )[ original ]( elems );\n\n\t\t\t// Support: QtWebKit\n\t\t\t// .get() because push.apply(_, arraylike) throws\n\t\t\tpush.apply( ret, elems.get() );\n\t\t}\n\n\t\treturn this.pushStack( ret );\n\t};\n});\n\n\nvar iframe,\n\telemdisplay = {};\n\n/**\n * Retrieve the actual display of a element\n * @param {String} name nodeName of the element\n * @param {Object} doc Document object\n */\n// Called only from within defaultDisplay\nfunction actualDisplay( name, doc ) {\n\tvar style,\n\t\telem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),\n\n\t\t// getDefaultComputedStyle might be reliably used only on attached element\n\t\tdisplay = window.getDefaultComputedStyle && ( style = window.getDefaultComputedStyle( elem[ 0 ] ) ) ?\n\n\t\t\t// Use of this method is a temporary fix (more like optimization) until something better comes along,\n\t\t\t// since it was removed from specification and supported only in FF\n\t\t\tstyle.display : jQuery.css( elem[ 0 ], \"display\" );\n\n\t// We don't have any data stored on the element,\n\t// so use \"detach\" method as fast way to get rid of the element\n\telem.detach();\n\n\treturn display;\n}\n\n/**\n * Try to determine the default display value of an element\n * @param {String} nodeName\n */\nfunction defaultDisplay( nodeName ) {\n\tvar doc = document,\n\t\tdisplay = elemdisplay[ nodeName ];\n\n\tif ( !display ) {\n\t\tdisplay = actualDisplay( nodeName, doc );\n\n\t\t// If the simple way fails, read from inside an iframe\n\t\tif ( display === \"none\" || !display ) {\n\n\t\t\t// Use the already-created iframe if possible\n\t\t\tiframe = (iframe || jQuery( \"<iframe frameborder='0' width='0' height='0'/>\" )).appendTo( doc.documentElement );\n\n\t\t\t// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse\n\t\t\tdoc = iframe[ 0 ].contentDocument;\n\n\t\t\t// Support: IE\n\t\t\tdoc.write();\n\t\t\tdoc.close();\n\n\t\t\tdisplay = actualDisplay( nodeName, doc );\n\t\t\tiframe.detach();\n\t\t}\n\n\t\t// Store the correct default display\n\t\telemdisplay[ nodeName ] = display;\n\t}\n\n\treturn display;\n}\nvar rmargin = (/^margin/);\n\nvar rnumnonpx = new RegExp( \"^(\" + pnum + \")(?!px)[a-z%]+$\", \"i\" );\n\nvar getStyles = function( elem ) {\n\t\t// Support: IE<=11+, Firefox<=30+ (#15098, #14150)\n\t\t// IE throws on elements created in popups\n\t\t// FF meanwhile throws on frame elements through \"defaultView.getComputedStyle\"\n\t\tif ( elem.ownerDocument.defaultView.opener ) {\n\t\t\treturn elem.ownerDocument.defaultView.getComputedStyle( elem, null );\n\t\t}\n\n\t\treturn window.getComputedStyle( elem, null );\n\t};\n\n\n\nfunction curCSS( elem, name, computed ) {\n\tvar width, minWidth, maxWidth, ret,\n\t\tstyle = elem.style;\n\n\tcomputed = computed || getStyles( elem );\n\n\t// Support: IE9\n\t// getPropertyValue is only needed for .css('filter') (#12537)\n\tif ( computed ) {\n\t\tret = computed.getPropertyValue( name ) || computed[ name ];\n\t}\n\n\tif ( computed ) {\n\n\t\tif ( ret === \"\" && !jQuery.contains( elem.ownerDocument, elem ) ) {\n\t\t\tret = jQuery.style( elem, name );\n\t\t}\n\n\t\t// Support: iOS < 6\n\t\t// A tribute to the \"awesome hack by Dean Edwards\"\n\t\t// iOS < 6 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels\n\t\t// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values\n\t\tif ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {\n\n\t\t\t// Remember the original values\n\t\t\twidth = style.width;\n\t\t\tminWidth = style.minWidth;\n\t\t\tmaxWidth = style.maxWidth;\n\n\t\t\t// Put in the new values to get a computed value out\n\t\t\tstyle.minWidth = style.maxWidth = style.width = ret;\n\t\t\tret = computed.width;\n\n\t\t\t// Revert the changed values\n\t\t\tstyle.width = width;\n\t\t\tstyle.minWidth = minWidth;\n\t\t\tstyle.maxWidth = maxWidth;\n\t\t}\n\t}\n\n\treturn ret !== undefined ?\n\t\t// Support: IE\n\t\t// IE returns zIndex value as an integer.\n\t\tret + \"\" :\n\t\tret;\n}\n\n\nfunction addGetHookIf( conditionFn, hookFn ) {\n\t// Define the hook, we'll check on the first run if it's really needed.\n\treturn {\n\t\tget: function() {\n\t\t\tif ( conditionFn() ) {\n\t\t\t\t// Hook not needed (or it's not possible to use it due\n\t\t\t\t// to missing dependency), remove it.\n\t\t\t\tdelete this.get;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Hook needed; redefine it so that the support test is not executed again.\n\t\t\treturn (this.get = hookFn).apply( this, arguments );\n\t\t}\n\t};\n}\n\n\n(function() {\n\tvar pixelPositionVal, boxSizingReliableVal,\n\t\tdocElem = document.documentElement,\n\t\tcontainer = document.createElement( \"div\" ),\n\t\tdiv = document.createElement( \"div\" );\n\n\tif ( !div.style ) {\n\t\treturn;\n\t}\n\n\t// Support: IE9-11+\n\t// Style of cloned element affects source element cloned (#8908)\n\tdiv.style.backgroundClip = \"content-box\";\n\tdiv.cloneNode( true ).style.backgroundClip = \"\";\n\tsupport.clearCloneStyle = div.style.backgroundClip === \"content-box\";\n\n\tcontainer.style.cssText = \"border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;\" +\n\t\t\"position:absolute\";\n\tcontainer.appendChild( div );\n\n\t// Executing both pixelPosition & boxSizingReliable tests require only one layout\n\t// so they're executed at the same time to save the second computation.\n\tfunction computePixelPositionAndBoxSizingReliable() {\n\t\tdiv.style.cssText =\n\t\t\t// Support: Firefox<29, Android 2.3\n\t\t\t// Vendor-prefix box-sizing\n\t\t\t\"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;\" +\n\t\t\t\"box-sizing:border-box;display:block;margin-top:1%;top:1%;\" +\n\t\t\t\"border:1px;padding:1px;width:4px;position:absolute\";\n\t\tdiv.innerHTML = \"\";\n\t\tdocElem.appendChild( container );\n\n\t\tvar divStyle = window.getComputedStyle( div, null );\n\t\tpixelPositionVal = divStyle.top !== \"1%\";\n\t\tboxSizingReliableVal = divStyle.width === \"4px\";\n\n\t\tdocElem.removeChild( container );\n\t}\n\n\t// Support: node.js jsdom\n\t// Don't assume that getComputedStyle is a property of the global object\n\tif ( window.getComputedStyle ) {\n\t\tjQuery.extend( support, {\n\t\t\tpixelPosition: function() {\n\n\t\t\t\t// This test is executed only once but we still do memoizing\n\t\t\t\t// since we can use the boxSizingReliable pre-computing.\n\t\t\t\t// No need to check if the test was already performed, though.\n\t\t\t\tcomputePixelPositionAndBoxSizingReliable();\n\t\t\t\treturn pixelPositionVal;\n\t\t\t},\n\t\t\tboxSizingReliable: function() {\n\t\t\t\tif ( boxSizingReliableVal == null ) {\n\t\t\t\t\tcomputePixelPositionAndBoxSizingReliable();\n\t\t\t\t}\n\t\t\t\treturn boxSizingReliableVal;\n\t\t\t},\n\t\t\treliableMarginRight: function() {\n\n\t\t\t\t// Support: Android 2.3\n\t\t\t\t// Check if div with explicit width and no margin-right incorrectly\n\t\t\t\t// gets computed margin-right based on width of container. (#3333)\n\t\t\t\t// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right\n\t\t\t\t// This support function is only executed once so no memoizing is needed.\n\t\t\t\tvar ret,\n\t\t\t\t\tmarginDiv = div.appendChild( document.createElement( \"div\" ) );\n\n\t\t\t\t// Reset CSS: box-sizing; display; margin; border; padding\n\t\t\t\tmarginDiv.style.cssText = div.style.cssText =\n\t\t\t\t\t// Support: Firefox<29, Android 2.3\n\t\t\t\t\t// Vendor-prefix box-sizing\n\t\t\t\t\t\"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;\" +\n\t\t\t\t\t\"box-sizing:content-box;display:block;margin:0;border:0;padding:0\";\n\t\t\t\tmarginDiv.style.marginRight = marginDiv.style.width = \"0\";\n\t\t\t\tdiv.style.width = \"1px\";\n\t\t\t\tdocElem.appendChild( container );\n\n\t\t\t\tret = !parseFloat( window.getComputedStyle( marginDiv, null ).marginRight );\n\n\t\t\t\tdocElem.removeChild( container );\n\t\t\t\tdiv.removeChild( marginDiv );\n\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t});\n\t}\n})();\n\n\n// A method for quickly swapping in/out CSS properties to get correct calculations.\njQuery.swap = function( elem, options, callback, args ) {\n\tvar ret, name,\n\t\told = {};\n\n\t// Remember the old values, and insert the new ones\n\tfor ( name in options ) {\n\t\told[ name ] = elem.style[ name ];\n\t\telem.style[ name ] = options[ name ];\n\t}\n\n\tret = callback.apply( elem, args || [] );\n\n\t// Revert the old values\n\tfor ( name in options ) {\n\t\telem.style[ name ] = old[ name ];\n\t}\n\n\treturn ret;\n};\n\n\nvar\n\t// Swappable if display is none or starts with table except \"table\", \"table-cell\", or \"table-caption\"\n\t// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display\n\trdisplayswap = /^(none|table(?!-c[ea]).+)/,\n\trnumsplit = new RegExp( \"^(\" + pnum + \")(.*)$\", \"i\" ),\n\trrelNum = new RegExp( \"^([+-])=(\" + pnum + \")\", \"i\" ),\n\n\tcssShow = { position: \"absolute\", visibility: \"hidden\", display: \"block\" },\n\tcssNormalTransform = {\n\t\tletterSpacing: \"0\",\n\t\tfontWeight: \"400\"\n\t},\n\n\tcssPrefixes = [ \"Webkit\", \"O\", \"Moz\", \"ms\" ];\n\n// Return a css property mapped to a potentially vendor prefixed property\nfunction vendorPropName( style, name ) {\n\n\t// Shortcut for names that are not vendor prefixed\n\tif ( name in style ) {\n\t\treturn name;\n\t}\n\n\t// Check for vendor prefixed names\n\tvar capName = name[0].toUpperCase() + name.slice(1),\n\t\torigName = name,\n\t\ti = cssPrefixes.length;\n\n\twhile ( i-- ) {\n\t\tname = cssPrefixes[ i ] + capName;\n\t\tif ( name in style ) {\n\t\t\treturn name;\n\t\t}\n\t}\n\n\treturn origName;\n}\n\nfunction setPositiveNumber( elem, value, subtract ) {\n\tvar matches = rnumsplit.exec( value );\n\treturn matches ?\n\t\t// Guard against undefined \"subtract\", e.g., when used as in cssHooks\n\t\tMath.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || \"px\" ) :\n\t\tvalue;\n}\n\nfunction augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {\n\tvar i = extra === ( isBorderBox ? \"border\" : \"content\" ) ?\n\t\t// If we already have the right measurement, avoid augmentation\n\t\t4 :\n\t\t// Otherwise initialize for horizontal or vertical properties\n\t\tname === \"width\" ? 1 : 0,\n\n\t\tval = 0;\n\n\tfor ( ; i < 4; i += 2 ) {\n\t\t// Both box models exclude margin, so add it if we want it\n\t\tif ( extra === \"margin\" ) {\n\t\t\tval += jQuery.css( elem, extra + cssExpand[ i ], true, styles );\n\t\t}\n\n\t\tif ( isBorderBox ) {\n\t\t\t// border-box includes padding, so remove it if we want content\n\t\t\tif ( extra === \"content\" ) {\n\t\t\t\tval -= jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\t\t\t}\n\n\t\t\t// At this point, extra isn't border nor margin, so remove border\n\t\t\tif ( extra !== \"margin\" ) {\n\t\t\t\tval -= jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\t\t} else {\n\t\t\t// At this point, extra isn't content, so add padding\n\t\t\tval += jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\n\t\t\t// At this point, extra isn't content nor padding, so add border\n\t\t\tif ( extra !== \"padding\" ) {\n\t\t\t\tval += jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\t\t}\n\t}\n\n\treturn val;\n}\n\nfunction getWidthOrHeight( elem, name, extra ) {\n\n\t// Start with offset property, which is equivalent to the border-box value\n\tvar valueIsBorderBox = true,\n\t\tval = name === \"width\" ? elem.offsetWidth : elem.offsetHeight,\n\t\tstyles = getStyles( elem ),\n\t\tisBorderBox = jQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\";\n\n\t// Some non-html elements return undefined for offsetWidth, so check for null/undefined\n\t// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285\n\t// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668\n\tif ( val <= 0 || val == null ) {\n\t\t// Fall back to computed then uncomputed css if necessary\n\t\tval = curCSS( elem, name, styles );\n\t\tif ( val < 0 || val == null ) {\n\t\t\tval = elem.style[ name ];\n\t\t}\n\n\t\t// Computed unit is not pixels. Stop here and return.\n\t\tif ( rnumnonpx.test(val) ) {\n\t\t\treturn val;\n\t\t}\n\n\t\t// Check for style in case a browser which returns unreliable values\n\t\t// for getComputedStyle silently falls back to the reliable elem.style\n\t\tvalueIsBorderBox = isBorderBox &&\n\t\t\t( support.boxSizingReliable() || val === elem.style[ name ] );\n\n\t\t// Normalize \"\", auto, and prepare for extra\n\t\tval = parseFloat( val ) || 0;\n\t}\n\n\t// Use the active box-sizing model to add/subtract irrelevant styles\n\treturn ( val +\n\t\taugmentWidthOrHeight(\n\t\t\telem,\n\t\t\tname,\n\t\t\textra || ( isBorderBox ? \"border\" : \"content\" ),\n\t\t\tvalueIsBorderBox,\n\t\t\tstyles\n\t\t)\n\t) + \"px\";\n}\n\nfunction showHide( elements, show ) {\n\tvar display, elem, hidden,\n\t\tvalues = [],\n\t\tindex = 0,\n\t\tlength = elements.length;\n\n\tfor ( ; index < length; index++ ) {\n\t\telem = elements[ index ];\n\t\tif ( !elem.style ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tvalues[ index ] = data_priv.get( elem, \"olddisplay\" );\n\t\tdisplay = elem.style.display;\n\t\tif ( show ) {\n\t\t\t// Reset the inline display of this element to learn if it is\n\t\t\t// being hidden by cascaded rules or not\n\t\t\tif ( !values[ index ] && display === \"none\" ) {\n\t\t\t\telem.style.display = \"\";\n\t\t\t}\n\n\t\t\t// Set elements which have been overridden with display: none\n\t\t\t// in a stylesheet to whatever the default browser style is\n\t\t\t// for such an element\n\t\t\tif ( elem.style.display === \"\" && isHidden( elem ) ) {\n\t\t\t\tvalues[ index ] = data_priv.access( elem, \"olddisplay\", defaultDisplay(elem.nodeName) );\n\t\t\t}\n\t\t} else {\n\t\t\thidden = isHidden( elem );\n\n\t\t\tif ( display !== \"none\" || !hidden ) {\n\t\t\t\tdata_priv.set( elem, \"olddisplay\", hidden ? display : jQuery.css( elem, \"display\" ) );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Set the display of most of the elements in a second loop\n\t// to avoid the constant reflow\n\tfor ( index = 0; index < length; index++ ) {\n\t\telem = elements[ index ];\n\t\tif ( !elem.style ) {\n\t\t\tcontinue;\n\t\t}\n\t\tif ( !show || elem.style.display === \"none\" || elem.style.display === \"\" ) {\n\t\t\telem.style.display = show ? values[ index ] || \"\" : \"none\";\n\t\t}\n\t}\n\n\treturn elements;\n}\n\njQuery.extend({\n\n\t// Add in style property hooks for overriding the default\n\t// behavior of getting and setting a style property\n\tcssHooks: {\n\t\topacity: {\n\t\t\tget: function( elem, computed ) {\n\t\t\t\tif ( computed ) {\n\n\t\t\t\t\t// We should always get a number back from opacity\n\t\t\t\t\tvar ret = curCSS( elem, \"opacity\" );\n\t\t\t\t\treturn ret === \"\" ? \"1\" : ret;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t// Don't automatically add \"px\" to these possibly-unitless properties\n\tcssNumber: {\n\t\t\"columnCount\": true,\n\t\t\"fillOpacity\": true,\n\t\t\"flexGrow\": true,\n\t\t\"flexShrink\": true,\n\t\t\"fontWeight\": true,\n\t\t\"lineHeight\": true,\n\t\t\"opacity\": true,\n\t\t\"order\": true,\n\t\t\"orphans\": true,\n\t\t\"widows\": true,\n\t\t\"zIndex\": true,\n\t\t\"zoom\": true\n\t},\n\n\t// Add in properties whose names you wish to fix before\n\t// setting or getting the value\n\tcssProps: {\n\t\t\"float\": \"cssFloat\"\n\t},\n\n\t// Get and set the style property on a DOM Node\n\tstyle: function( elem, name, value, extra ) {\n\n\t\t// Don't set styles on text and comment nodes\n\t\tif ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Make sure that we're working with the right name\n\t\tvar ret, type, hooks,\n\t\t\torigName = jQuery.camelCase( name ),\n\t\t\tstyle = elem.style;\n\n\t\tname = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );\n\n\t\t// Gets hook for the prefixed version, then unprefixed version\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// Check if we're setting a value\n\t\tif ( value !== undefined ) {\n\t\t\ttype = typeof value;\n\n\t\t\t// Convert \"+=\" or \"-=\" to relative numbers (#7345)\n\t\t\tif ( type === \"string\" && (ret = rrelNum.exec( value )) ) {\n\t\t\t\tvalue = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );\n\t\t\t\t// Fixes bug #9237\n\t\t\t\ttype = \"number\";\n\t\t\t}\n\n\t\t\t// Make sure that null and NaN values aren't set (#7116)\n\t\t\tif ( value == null || value !== value ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If a number, add 'px' to the (except for certain CSS properties)\n\t\t\tif ( type === \"number\" && !jQuery.cssNumber[ origName ] ) {\n\t\t\t\tvalue += \"px\";\n\t\t\t}\n\n\t\t\t// Support: IE9-11+\n\t\t\t// background-* props affect original clone's values\n\t\t\tif ( !support.clearCloneStyle && value === \"\" && name.indexOf( \"background\" ) === 0 ) {\n\t\t\t\tstyle[ name ] = \"inherit\";\n\t\t\t}\n\n\t\t\t// If a hook was provided, use that value, otherwise just set the specified value\n\t\t\tif ( !hooks || !(\"set\" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {\n\t\t\t\tstyle[ name ] = value;\n\t\t\t}\n\n\t\t} else {\n\t\t\t// If a hook was provided get the non-computed value from there\n\t\t\tif ( hooks && \"get\" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\t// Otherwise just get the value from the style object\n\t\t\treturn style[ name ];\n\t\t}\n\t},\n\n\tcss: function( elem, name, extra, styles ) {\n\t\tvar val, num, hooks,\n\t\t\torigName = jQuery.camelCase( name );\n\n\t\t// Make sure that we're working with the right name\n\t\tname = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );\n\n\t\t// Try prefixed name followed by the unprefixed name\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// If a hook was provided get the computed value from there\n\t\tif ( hooks && \"get\" in hooks ) {\n\t\t\tval = hooks.get( elem, true, extra );\n\t\t}\n\n\t\t// Otherwise, if a way to get the computed value exists, use that\n\t\tif ( val === undefined ) {\n\t\t\tval = curCSS( elem, name, styles );\n\t\t}\n\n\t\t// Convert \"normal\" to computed value\n\t\tif ( val === \"normal\" && name in cssNormalTransform ) {\n\t\t\tval = cssNormalTransform[ name ];\n\t\t}\n\n\t\t// Make numeric if forced or a qualifier was provided and val looks numeric\n\t\tif ( extra === \"\" || extra ) {\n\t\t\tnum = parseFloat( val );\n\t\t\treturn extra === true || jQuery.isNumeric( num ) ? num || 0 : val;\n\t\t}\n\t\treturn val;\n\t}\n});\n\njQuery.each([ \"height\", \"width\" ], function( i, name ) {\n\tjQuery.cssHooks[ name ] = {\n\t\tget: function( elem, computed, extra ) {\n\t\t\tif ( computed ) {\n\n\t\t\t\t// Certain elements can have dimension info if we invisibly show them\n\t\t\t\t// but it must have a current display style that would benefit\n\t\t\t\treturn rdisplayswap.test( jQuery.css( elem, \"display\" ) ) && elem.offsetWidth === 0 ?\n\t\t\t\t\tjQuery.swap( elem, cssShow, function() {\n\t\t\t\t\t\treturn getWidthOrHeight( elem, name, extra );\n\t\t\t\t\t}) :\n\t\t\t\t\tgetWidthOrHeight( elem, name, extra );\n\t\t\t}\n\t\t},\n\n\t\tset: function( elem, value, extra ) {\n\t\t\tvar styles = extra && getStyles( elem );\n\t\t\treturn setPositiveNumber( elem, value, extra ?\n\t\t\t\taugmentWidthOrHeight(\n\t\t\t\t\telem,\n\t\t\t\t\tname,\n\t\t\t\t\textra,\n\t\t\t\t\tjQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\",\n\t\t\t\t\tstyles\n\t\t\t\t) : 0\n\t\t\t);\n\t\t}\n\t};\n});\n\n// Support: Android 2.3\njQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,\n\tfunction( elem, computed ) {\n\t\tif ( computed ) {\n\t\t\treturn jQuery.swap( elem, { \"display\": \"inline-block\" },\n\t\t\t\tcurCSS, [ elem, \"marginRight\" ] );\n\t\t}\n\t}\n);\n\n// These hooks are used by animate to expand properties\njQuery.each({\n\tmargin: \"\",\n\tpadding: \"\",\n\tborder: \"Width\"\n}, function( prefix, suffix ) {\n\tjQuery.cssHooks[ prefix + suffix ] = {\n\t\texpand: function( value ) {\n\t\t\tvar i = 0,\n\t\t\t\texpanded = {},\n\n\t\t\t\t// Assumes a single number if not a string\n\t\t\t\tparts = typeof value === \"string\" ? value.split(\" \") : [ value ];\n\n\t\t\tfor ( ; i < 4; i++ ) {\n\t\t\t\texpanded[ prefix + cssExpand[ i ] + suffix ] =\n\t\t\t\t\tparts[ i ] || parts[ i - 2 ] || parts[ 0 ];\n\t\t\t}\n\n\t\t\treturn expanded;\n\t\t}\n\t};\n\n\tif ( !rmargin.test( prefix ) ) {\n\t\tjQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;\n\t}\n});\n\njQuery.fn.extend({\n\tcss: function( name, value ) {\n\t\treturn access( this, function( elem, name, value ) {\n\t\t\tvar styles, len,\n\t\t\t\tmap = {},\n\t\t\t\ti = 0;\n\n\t\t\tif ( jQuery.isArray( name ) ) {\n\t\t\t\tstyles = getStyles( elem );\n\t\t\t\tlen = name.length;\n\n\t\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\t\tmap[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );\n\t\t\t\t}\n\n\t\t\t\treturn map;\n\t\t\t}\n\n\t\t\treturn value !== undefined ?\n\t\t\t\tjQuery.style( elem, name, value ) :\n\t\t\t\tjQuery.css( elem, name );\n\t\t}, name, value, arguments.length > 1 );\n\t},\n\tshow: function() {\n\t\treturn showHide( this, true );\n\t},\n\thide: function() {\n\t\treturn showHide( this );\n\t},\n\ttoggle: function( state ) {\n\t\tif ( typeof state === \"boolean\" ) {\n\t\t\treturn state ? this.show() : this.hide();\n\t\t}\n\n\t\treturn this.each(function() {\n\t\t\tif ( isHidden( this ) ) {\n\t\t\t\tjQuery( this ).show();\n\t\t\t} else {\n\t\t\t\tjQuery( this ).hide();\n\t\t\t}\n\t\t});\n\t}\n});\n\n\nfunction Tween( elem, options, prop, end, easing ) {\n\treturn new Tween.prototype.init( elem, options, prop, end, easing );\n}\njQuery.Tween = Tween;\n\nTween.prototype = {\n\tconstructor: Tween,\n\tinit: function( elem, options, prop, end, easing, unit ) {\n\t\tthis.elem = elem;\n\t\tthis.prop = prop;\n\t\tthis.easing = easing || \"swing\";\n\t\tthis.options = options;\n\t\tthis.start = this.now = this.cur();\n\t\tthis.end = end;\n\t\tthis.unit = unit || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" );\n\t},\n\tcur: function() {\n\t\tvar hooks = Tween.propHooks[ this.prop ];\n\n\t\treturn hooks && hooks.get ?\n\t\t\thooks.get( this ) :\n\t\t\tTween.propHooks._default.get( this );\n\t},\n\trun: function( percent ) {\n\t\tvar eased,\n\t\t\thooks = Tween.propHooks[ this.prop ];\n\n\t\tif ( this.options.duration ) {\n\t\t\tthis.pos = eased = jQuery.easing[ this.easing ](\n\t\t\t\tpercent, this.options.duration * percent, 0, 1, this.options.duration\n\t\t\t);\n\t\t} else {\n\t\t\tthis.pos = eased = percent;\n\t\t}\n\t\tthis.now = ( this.end - this.start ) * eased + this.start;\n\n\t\tif ( this.options.step ) {\n\t\t\tthis.options.step.call( this.elem, this.now, this );\n\t\t}\n\n\t\tif ( hooks && hooks.set ) {\n\t\t\thooks.set( this );\n\t\t} else {\n\t\t\tTween.propHooks._default.set( this );\n\t\t}\n\t\treturn this;\n\t}\n};\n\nTween.prototype.init.prototype = Tween.prototype;\n\nTween.propHooks = {\n\t_default: {\n\t\tget: function( tween ) {\n\t\t\tvar result;\n\n\t\t\tif ( tween.elem[ tween.prop ] != null &&\n\t\t\t\t(!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {\n\t\t\t\treturn tween.elem[ tween.prop ];\n\t\t\t}\n\n\t\t\t// Passing an empty string as a 3rd parameter to .css will automatically\n\t\t\t// attempt a parseFloat and fallback to a string if the parse fails.\n\t\t\t// Simple values such as \"10px\" are parsed to Float;\n\t\t\t// complex values such as \"rotate(1rad)\" are returned as-is.\n\t\t\tresult = jQuery.css( tween.elem, tween.prop, \"\" );\n\t\t\t// Empty strings, null, undefined and \"auto\" are converted to 0.\n\t\t\treturn !result || result === \"auto\" ? 0 : result;\n\t\t},\n\t\tset: function( tween ) {\n\t\t\t// Use step hook for back compat.\n\t\t\t// Use cssHook if its there.\n\t\t\t// Use .style if available and use plain properties where available.\n\t\t\tif ( jQuery.fx.step[ tween.prop ] ) {\n\t\t\t\tjQuery.fx.step[ tween.prop ]( tween );\n\t\t\t} else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {\n\t\t\t\tjQuery.style( tween.elem, tween.prop, tween.now + tween.unit );\n\t\t\t} else {\n\t\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t\t}\n\t\t}\n\t}\n};\n\n// Support: IE9\n// Panic based approach to setting things on disconnected nodes\nTween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {\n\tset: function( tween ) {\n\t\tif ( tween.elem.nodeType && tween.elem.parentNode ) {\n\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t}\n\t}\n};\n\njQuery.easing = {\n\tlinear: function( p ) {\n\t\treturn p;\n\t},\n\tswing: function( p ) {\n\t\treturn 0.5 - Math.cos( p * Math.PI ) / 2;\n\t}\n};\n\njQuery.fx = Tween.prototype.init;\n\n// Back Compat <1.8 extension point\njQuery.fx.step = {};\n\n\n\n\nvar\n\tfxNow, timerId,\n\trfxtypes = /^(?:toggle|show|hide)$/,\n\trfxnum = new RegExp( \"^(?:([+-])=|)(\" + pnum + \")([a-z%]*)$\", \"i\" ),\n\trrun = /queueHooks$/,\n\tanimationPrefilters = [ defaultPrefilter ],\n\ttweeners = {\n\t\t\"*\": [ function( prop, value ) {\n\t\t\tvar tween = this.createTween( prop, value ),\n\t\t\t\ttarget = tween.cur(),\n\t\t\t\tparts = rfxnum.exec( value ),\n\t\t\t\tunit = parts && parts[ 3 ] || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" ),\n\n\t\t\t\t// Starting value computation is required for potential unit mismatches\n\t\t\t\tstart = ( jQuery.cssNumber[ prop ] || unit !== \"px\" && +target ) &&\n\t\t\t\t\trfxnum.exec( jQuery.css( tween.elem, prop ) ),\n\t\t\t\tscale = 1,\n\t\t\t\tmaxIterations = 20;\n\n\t\t\tif ( start && start[ 3 ] !== unit ) {\n\t\t\t\t// Trust units reported by jQuery.css\n\t\t\t\tunit = unit || start[ 3 ];\n\n\t\t\t\t// Make sure we update the tween properties later on\n\t\t\t\tparts = parts || [];\n\n\t\t\t\t// Iteratively approximate from a nonzero starting point\n\t\t\t\tstart = +target || 1;\n\n\t\t\t\tdo {\n\t\t\t\t\t// If previous iteration zeroed out, double until we get *something*.\n\t\t\t\t\t// Use string for doubling so we don't accidentally see scale as unchanged below\n\t\t\t\t\tscale = scale || \".5\";\n\n\t\t\t\t\t// Adjust and apply\n\t\t\t\t\tstart = start / scale;\n\t\t\t\t\tjQuery.style( tween.elem, prop, start + unit );\n\n\t\t\t\t// Update scale, tolerating zero or NaN from tween.cur(),\n\t\t\t\t// break the loop if scale is unchanged or perfect, or if we've just had enough\n\t\t\t\t} while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );\n\t\t\t}\n\n\t\t\t// Update tween properties\n\t\t\tif ( parts ) {\n\t\t\t\tstart = tween.start = +start || +target || 0;\n\t\t\t\ttween.unit = unit;\n\t\t\t\t// If a +=/-= token was provided, we're doing a relative animation\n\t\t\t\ttween.end = parts[ 1 ] ?\n\t\t\t\t\tstart + ( parts[ 1 ] + 1 ) * parts[ 2 ] :\n\t\t\t\t\t+parts[ 2 ];\n\t\t\t}\n\n\t\t\treturn tween;\n\t\t} ]\n\t};\n\n// Animations created synchronously will run synchronously\nfunction createFxNow() {\n\tsetTimeout(function() {\n\t\tfxNow = undefined;\n\t});\n\treturn ( fxNow = jQuery.now() );\n}\n\n// Generate parameters to create a standard animation\nfunction genFx( type, includeWidth ) {\n\tvar which,\n\t\ti = 0,\n\t\tattrs = { height: type };\n\n\t// If we include width, step value is 1 to do all cssExpand values,\n\t// otherwise step value is 2 to skip over Left and Right\n\tincludeWidth = includeWidth ? 1 : 0;\n\tfor ( ; i < 4 ; i += 2 - includeWidth ) {\n\t\twhich = cssExpand[ i ];\n\t\tattrs[ \"margin\" + which ] = attrs[ \"padding\" + which ] = type;\n\t}\n\n\tif ( includeWidth ) {\n\t\tattrs.opacity = attrs.width = type;\n\t}\n\n\treturn attrs;\n}\n\nfunction createTween( value, prop, animation ) {\n\tvar tween,\n\t\tcollection = ( tweeners[ prop ] || [] ).concat( tweeners[ \"*\" ] ),\n\t\tindex = 0,\n\t\tlength = collection.length;\n\tfor ( ; index < length; index++ ) {\n\t\tif ( (tween = collection[ index ].call( animation, prop, value )) ) {\n\n\t\t\t// We're done with this property\n\t\t\treturn tween;\n\t\t}\n\t}\n}\n\nfunction defaultPrefilter( elem, props, opts ) {\n\t/* jshint validthis: true */\n\tvar prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,\n\t\tanim = this,\n\t\torig = {},\n\t\tstyle = elem.style,\n\t\thidden = elem.nodeType && isHidden( elem ),\n\t\tdataShow = data_priv.get( elem, \"fxshow\" );\n\n\t// Handle queue: false promises\n\tif ( !opts.queue ) {\n\t\thooks = jQuery._queueHooks( elem, \"fx\" );\n\t\tif ( hooks.unqueued == null ) {\n\t\t\thooks.unqueued = 0;\n\t\t\toldfire = hooks.empty.fire;\n\t\t\thooks.empty.fire = function() {\n\t\t\t\tif ( !hooks.unqueued ) {\n\t\t\t\t\toldfire();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\thooks.unqueued++;\n\n\t\tanim.always(function() {\n\t\t\t// Ensure the complete handler is called before this completes\n\t\t\tanim.always(function() {\n\t\t\t\thooks.unqueued--;\n\t\t\t\tif ( !jQuery.queue( elem, \"fx\" ).length ) {\n\t\t\t\t\thooks.empty.fire();\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\t// Height/width overflow pass\n\tif ( elem.nodeType === 1 && ( \"height\" in props || \"width\" in props ) ) {\n\t\t// Make sure that nothing sneaks out\n\t\t// Record all 3 overflow attributes because IE9-10 do not\n\t\t// change the overflow attribute when overflowX and\n\t\t// overflowY are set to the same value\n\t\topts.overflow = [ style.overflow, style.overflowX, style.overflowY ];\n\n\t\t// Set display property to inline-block for height/width\n\t\t// animations on inline elements that are having width/height animated\n\t\tdisplay = jQuery.css( elem, \"display\" );\n\n\t\t// Test default display if display is currently \"none\"\n\t\tcheckDisplay = display === \"none\" ?\n\t\t\tdata_priv.get( elem, \"olddisplay\" ) || defaultDisplay( elem.nodeName ) : display;\n\n\t\tif ( checkDisplay === \"inline\" && jQuery.css( elem, \"float\" ) === \"none\" ) {\n\t\t\tstyle.display = \"inline-block\";\n\t\t}\n\t}\n\n\tif ( opts.overflow ) {\n\t\tstyle.overflow = \"hidden\";\n\t\tanim.always(function() {\n\t\t\tstyle.overflow = opts.overflow[ 0 ];\n\t\t\tstyle.overflowX = opts.overflow[ 1 ];\n\t\t\tstyle.overflowY = opts.overflow[ 2 ];\n\t\t});\n\t}\n\n\t// show/hide pass\n\tfor ( prop in props ) {\n\t\tvalue = props[ prop ];\n\t\tif ( rfxtypes.exec( value ) ) {\n\t\t\tdelete props[ prop ];\n\t\t\ttoggle = toggle || value === \"toggle\";\n\t\t\tif ( value === ( hidden ? \"hide\" : \"show\" ) ) {\n\n\t\t\t\t// If there is dataShow left over from a stopped hide or show and we are going to proceed with show, we should pretend to be hidden\n\t\t\t\tif ( value === \"show\" && dataShow && dataShow[ prop ] !== undefined ) {\n\t\t\t\t\thidden = true;\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\torig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );\n\n\t\t// Any non-fx value stops us from restoring the original display value\n\t\t} else {\n\t\t\tdisplay = undefined;\n\t\t}\n\t}\n\n\tif ( !jQuery.isEmptyObject( orig ) ) {\n\t\tif ( dataShow ) {\n\t\t\tif ( \"hidden\" in dataShow ) {\n\t\t\t\thidden = dataShow.hidden;\n\t\t\t}\n\t\t} else {\n\t\t\tdataShow = data_priv.access( elem, \"fxshow\", {} );\n\t\t}\n\n\t\t// Store state if its toggle - enables .stop().toggle() to \"reverse\"\n\t\tif ( toggle ) {\n\t\t\tdataShow.hidden = !hidden;\n\t\t}\n\t\tif ( hidden ) {\n\t\t\tjQuery( elem ).show();\n\t\t} else {\n\t\t\tanim.done(function() {\n\t\t\t\tjQuery( elem ).hide();\n\t\t\t});\n\t\t}\n\t\tanim.done(function() {\n\t\t\tvar prop;\n\n\t\t\tdata_priv.remove( elem, \"fxshow\" );\n\t\t\tfor ( prop in orig ) {\n\t\t\t\tjQuery.style( elem, prop, orig[ prop ] );\n\t\t\t}\n\t\t});\n\t\tfor ( prop in orig ) {\n\t\t\ttween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );\n\n\t\t\tif ( !( prop in dataShow ) ) {\n\t\t\t\tdataShow[ prop ] = tween.start;\n\t\t\t\tif ( hidden ) {\n\t\t\t\t\ttween.end = tween.start;\n\t\t\t\t\ttween.start = prop === \"width\" || prop === \"height\" ? 1 : 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t// If this is a noop like .hide().hide(), restore an overwritten display value\n\t} else if ( (display === \"none\" ? defaultDisplay( elem.nodeName ) : display) === \"inline\" ) {\n\t\tstyle.display = display;\n\t}\n}\n\nfunction propFilter( props, specialEasing ) {\n\tvar index, name, easing, value, hooks;\n\n\t// camelCase, specialEasing and expand cssHook pass\n\tfor ( index in props ) {\n\t\tname = jQuery.camelCase( index );\n\t\teasing = specialEasing[ name ];\n\t\tvalue = props[ index ];\n\t\tif ( jQuery.isArray( value ) ) {\n\t\t\teasing = value[ 1 ];\n\t\t\tvalue = props[ index ] = value[ 0 ];\n\t\t}\n\n\t\tif ( index !== name ) {\n\t\t\tprops[ name ] = value;\n\t\t\tdelete props[ index ];\n\t\t}\n\n\t\thooks = jQuery.cssHooks[ name ];\n\t\tif ( hooks && \"expand\" in hooks ) {\n\t\t\tvalue = hooks.expand( value );\n\t\t\tdelete props[ name ];\n\n\t\t\t// Not quite $.extend, this won't overwrite existing keys.\n\t\t\t// Reusing 'index' because we have the correct \"name\"\n\t\t\tfor ( index in value ) {\n\t\t\t\tif ( !( index in props ) ) {\n\t\t\t\t\tprops[ index ] = value[ index ];\n\t\t\t\t\tspecialEasing[ index ] = easing;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tspecialEasing[ name ] = easing;\n\t\t}\n\t}\n}\n\nfunction Animation( elem, properties, options ) {\n\tvar result,\n\t\tstopped,\n\t\tindex = 0,\n\t\tlength = animationPrefilters.length,\n\t\tdeferred = jQuery.Deferred().always( function() {\n\t\t\t// Don't match elem in the :animated selector\n\t\t\tdelete tick.elem;\n\t\t}),\n\t\ttick = function() {\n\t\t\tif ( stopped ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tvar currentTime = fxNow || createFxNow(),\n\t\t\t\tremaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),\n\t\t\t\t// Support: Android 2.3\n\t\t\t\t// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)\n\t\t\t\ttemp = remaining / animation.duration || 0,\n\t\t\t\tpercent = 1 - temp,\n\t\t\t\tindex = 0,\n\t\t\t\tlength = animation.tweens.length;\n\n\t\t\tfor ( ; index < length ; index++ ) {\n\t\t\t\tanimation.tweens[ index ].run( percent );\n\t\t\t}\n\n\t\t\tdeferred.notifyWith( elem, [ animation, percent, remaining ]);\n\n\t\t\tif ( percent < 1 && length ) {\n\t\t\t\treturn remaining;\n\t\t\t} else {\n\t\t\t\tdeferred.resolveWith( elem, [ animation ] );\n\t\t\t\treturn false;\n\t\t\t}\n\t\t},\n\t\tanimation = deferred.promise({\n\t\t\telem: elem,\n\t\t\tprops: jQuery.extend( {}, properties ),\n\t\t\topts: jQuery.extend( true, { specialEasing: {} }, options ),\n\t\t\toriginalProperties: properties,\n\t\t\toriginalOptions: options,\n\t\t\tstartTime: fxNow || createFxNow(),\n\t\t\tduration: options.duration,\n\t\t\ttweens: [],\n\t\t\tcreateTween: function( prop, end ) {\n\t\t\t\tvar tween = jQuery.Tween( elem, animation.opts, prop, end,\n\t\t\t\t\t\tanimation.opts.specialEasing[ prop ] || animation.opts.easing );\n\t\t\t\tanimation.tweens.push( tween );\n\t\t\t\treturn tween;\n\t\t\t},\n\t\t\tstop: function( gotoEnd ) {\n\t\t\t\tvar index = 0,\n\t\t\t\t\t// If we are going to the end, we want to run all the tweens\n\t\t\t\t\t// otherwise we skip this part\n\t\t\t\t\tlength = gotoEnd ? animation.tweens.length : 0;\n\t\t\t\tif ( stopped ) {\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t\tstopped = true;\n\t\t\t\tfor ( ; index < length ; index++ ) {\n\t\t\t\t\tanimation.tweens[ index ].run( 1 );\n\t\t\t\t}\n\n\t\t\t\t// Resolve when we played the last frame; otherwise, reject\n\t\t\t\tif ( gotoEnd ) {\n\t\t\t\t\tdeferred.resolveWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t} else {\n\t\t\t\t\tdeferred.rejectWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}),\n\t\tprops = animation.props;\n\n\tpropFilter( props, animation.opts.specialEasing );\n\n\tfor ( ; index < length ; index++ ) {\n\t\tresult = animationPrefilters[ index ].call( animation, elem, props, animation.opts );\n\t\tif ( result ) {\n\t\t\treturn result;\n\t\t}\n\t}\n\n\tjQuery.map( props, createTween, animation );\n\n\tif ( jQuery.isFunction( animation.opts.start ) ) {\n\t\tanimation.opts.start.call( elem, animation );\n\t}\n\n\tjQuery.fx.timer(\n\t\tjQuery.extend( tick, {\n\t\t\telem: elem,\n\t\t\tanim: animation,\n\t\t\tqueue: animation.opts.queue\n\t\t})\n\t);\n\n\t// attach callbacks from options\n\treturn animation.progress( animation.opts.progress )\n\t\t.done( animation.opts.done, animation.opts.complete )\n\t\t.fail( animation.opts.fail )\n\t\t.always( animation.opts.always );\n}\n\njQuery.Animation = jQuery.extend( Animation, {\n\n\ttweener: function( props, callback ) {\n\t\tif ( jQuery.isFunction( props ) ) {\n\t\t\tcallback = props;\n\t\t\tprops = [ \"*\" ];\n\t\t} else {\n\t\t\tprops = props.split(\" \");\n\t\t}\n\n\t\tvar prop,\n\t\t\tindex = 0,\n\t\t\tlength = props.length;\n\n\t\tfor ( ; index < length ; index++ ) {\n\t\t\tprop = props[ index ];\n\t\t\ttweeners[ prop ] = tweeners[ prop ] || [];\n\t\t\ttweeners[ prop ].unshift( callback );\n\t\t}\n\t},\n\n\tprefilter: function( callback, prepend ) {\n\t\tif ( prepend ) {\n\t\t\tanimationPrefilters.unshift( callback );\n\t\t} else {\n\t\t\tanimationPrefilters.push( callback );\n\t\t}\n\t}\n});\n\njQuery.speed = function( speed, easing, fn ) {\n\tvar opt = speed && typeof speed === \"object\" ? jQuery.extend( {}, speed ) : {\n\t\tcomplete: fn || !fn && easing ||\n\t\t\tjQuery.isFunction( speed ) && speed,\n\t\tduration: speed,\n\t\teasing: fn && easing || easing && !jQuery.isFunction( easing ) && easing\n\t};\n\n\topt.duration = jQuery.fx.off ? 0 : typeof opt.duration === \"number\" ? opt.duration :\n\t\topt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;\n\n\t// Normalize opt.queue - true/undefined/null -> \"fx\"\n\tif ( opt.queue == null || opt.queue === true ) {\n\t\topt.queue = \"fx\";\n\t}\n\n\t// Queueing\n\topt.old = opt.complete;\n\n\topt.complete = function() {\n\t\tif ( jQuery.isFunction( opt.old ) ) {\n\t\t\topt.old.call( this );\n\t\t}\n\n\t\tif ( opt.queue ) {\n\t\t\tjQuery.dequeue( this, opt.queue );\n\t\t}\n\t};\n\n\treturn opt;\n};\n\njQuery.fn.extend({\n\tfadeTo: function( speed, to, easing, callback ) {\n\n\t\t// Show any hidden elements after setting opacity to 0\n\t\treturn this.filter( isHidden ).css( \"opacity\", 0 ).show()\n\n\t\t\t// Animate to the value specified\n\t\t\t.end().animate({ opacity: to }, speed, easing, callback );\n\t},\n\tanimate: function( prop, speed, easing, callback ) {\n\t\tvar empty = jQuery.isEmptyObject( prop ),\n\t\t\toptall = jQuery.speed( speed, easing, callback ),\n\t\t\tdoAnimation = function() {\n\t\t\t\t// Operate on a copy of prop so per-property easing won't be lost\n\t\t\t\tvar anim = Animation( this, jQuery.extend( {}, prop ), optall );\n\n\t\t\t\t// Empty animations, or finishing resolves immediately\n\t\t\t\tif ( empty || data_priv.get( this, \"finish\" ) ) {\n\t\t\t\t\tanim.stop( true );\n\t\t\t\t}\n\t\t\t};\n\t\t\tdoAnimation.finish = doAnimation;\n\n\t\treturn empty || optall.queue === false ?\n\t\t\tthis.each( doAnimation ) :\n\t\t\tthis.queue( optall.queue, doAnimation );\n\t},\n\tstop: function( type, clearQueue, gotoEnd ) {\n\t\tvar stopQueue = function( hooks ) {\n\t\t\tvar stop = hooks.stop;\n\t\t\tdelete hooks.stop;\n\t\t\tstop( gotoEnd );\n\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tgotoEnd = clearQueue;\n\t\t\tclearQueue = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\tif ( clearQueue && type !== false ) {\n\t\t\tthis.queue( type || \"fx\", [] );\n\t\t}\n\n\t\treturn this.each(function() {\n\t\t\tvar dequeue = true,\n\t\t\t\tindex = type != null && type + \"queueHooks\",\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tdata = data_priv.get( this );\n\n\t\t\tif ( index ) {\n\t\t\t\tif ( data[ index ] && data[ index ].stop ) {\n\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor ( index in data ) {\n\t\t\t\t\tif ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {\n\t\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {\n\t\t\t\t\ttimers[ index ].anim.stop( gotoEnd );\n\t\t\t\t\tdequeue = false;\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Start the next in the queue if the last step wasn't forced.\n\t\t\t// Timers currently will call their complete callbacks, which\n\t\t\t// will dequeue but only if they were gotoEnd.\n\t\t\tif ( dequeue || !gotoEnd ) {\n\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t}\n\t\t});\n\t},\n\tfinish: function( type ) {\n\t\tif ( type !== false ) {\n\t\t\ttype = type || \"fx\";\n\t\t}\n\t\treturn this.each(function() {\n\t\t\tvar index,\n\t\t\t\tdata = data_priv.get( this ),\n\t\t\t\tqueue = data[ type + \"queue\" ],\n\t\t\t\thooks = data[ type + \"queueHooks\" ],\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tlength = queue ? queue.length : 0;\n\n\t\t\t// Enable finishing flag on private data\n\t\t\tdata.finish = true;\n\n\t\t\t// Empty the queue first\n\t\t\tjQuery.queue( this, type, [] );\n\n\t\t\tif ( hooks && hooks.stop ) {\n\t\t\t\thooks.stop.call( this, true );\n\t\t\t}\n\n\t\t\t// Look for any active animations, and finish them\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this && timers[ index ].queue === type ) {\n\t\t\t\t\ttimers[ index ].anim.stop( true );\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Look for any animations in the old queue and finish them\n\t\t\tfor ( index = 0; index < length; index++ ) {\n\t\t\t\tif ( queue[ index ] && queue[ index ].finish ) {\n\t\t\t\t\tqueue[ index ].finish.call( this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Turn off finishing flag\n\t\t\tdelete data.finish;\n\t\t});\n\t}\n});\n\njQuery.each([ \"toggle\", \"show\", \"hide\" ], function( i, name ) {\n\tvar cssFn = jQuery.fn[ name ];\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn speed == null || typeof speed === \"boolean\" ?\n\t\t\tcssFn.apply( this, arguments ) :\n\t\t\tthis.animate( genFx( name, true ), speed, easing, callback );\n\t};\n});\n\n// Generate shortcuts for custom animations\njQuery.each({\n\tslideDown: genFx(\"show\"),\n\tslideUp: genFx(\"hide\"),\n\tslideToggle: genFx(\"toggle\"),\n\tfadeIn: { opacity: \"show\" },\n\tfadeOut: { opacity: \"hide\" },\n\tfadeToggle: { opacity: \"toggle\" }\n}, function( name, props ) {\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn this.animate( props, speed, easing, callback );\n\t};\n});\n\njQuery.timers = [];\njQuery.fx.tick = function() {\n\tvar timer,\n\t\ti = 0,\n\t\ttimers = jQuery.timers;\n\n\tfxNow = jQuery.now();\n\n\tfor ( ; i < timers.length; i++ ) {\n\t\ttimer = timers[ i ];\n\t\t// Checks the timer has not already been removed\n\t\tif ( !timer() && timers[ i ] === timer ) {\n\t\t\ttimers.splice( i--, 1 );\n\t\t}\n\t}\n\n\tif ( !timers.length ) {\n\t\tjQuery.fx.stop();\n\t}\n\tfxNow = undefined;\n};\n\njQuery.fx.timer = function( timer ) {\n\tjQuery.timers.push( timer );\n\tif ( timer() ) {\n\t\tjQuery.fx.start();\n\t} else {\n\t\tjQuery.timers.pop();\n\t}\n};\n\njQuery.fx.interval = 13;\n\njQuery.fx.start = function() {\n\tif ( !timerId ) {\n\t\ttimerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );\n\t}\n};\n\njQuery.fx.stop = function() {\n\tclearInterval( timerId );\n\ttimerId = null;\n};\n\njQuery.fx.speeds = {\n\tslow: 600,\n\tfast: 200,\n\t// Default speed\n\t_default: 400\n};\n\n\n// Based off of the plugin by Clint Helfers, with permission.\n// http://blindsignals.com/index.php/2009/07/jquery-delay/\njQuery.fn.delay = function( time, type ) {\n\ttime = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;\n\ttype = type || \"fx\";\n\n\treturn this.queue( type, function( next, hooks ) {\n\t\tvar timeout = setTimeout( next, time );\n\t\thooks.stop = function() {\n\t\t\tclearTimeout( timeout );\n\t\t};\n\t});\n};\n\n\n(function() {\n\tvar input = document.createElement( \"input\" ),\n\t\tselect = document.createElement( \"select\" ),\n\t\topt = select.appendChild( document.createElement( \"option\" ) );\n\n\tinput.type = \"checkbox\";\n\n\t// Support: iOS<=5.1, Android<=4.2+\n\t// Default value for a checkbox should be \"on\"\n\tsupport.checkOn = input.value !== \"\";\n\n\t// Support: IE<=11+\n\t// Must access selectedIndex to make default options select\n\tsupport.optSelected = opt.selected;\n\n\t// Support: Android<=2.3\n\t// Options inside disabled selects are incorrectly marked as disabled\n\tselect.disabled = true;\n\tsupport.optDisabled = !opt.disabled;\n\n\t// Support: IE<=11+\n\t// An input loses its value after becoming a radio\n\tinput = document.createElement( \"input\" );\n\tinput.value = \"t\";\n\tinput.type = \"radio\";\n\tsupport.radioValue = input.value === \"t\";\n})();\n\n\nvar nodeHook, boolHook,\n\tattrHandle = jQuery.expr.attrHandle;\n\njQuery.fn.extend({\n\tattr: function( name, value ) {\n\t\treturn access( this, jQuery.attr, name, value, arguments.length > 1 );\n\t},\n\n\tremoveAttr: function( name ) {\n\t\treturn this.each(function() {\n\t\t\tjQuery.removeAttr( this, name );\n\t\t});\n\t}\n});\n\njQuery.extend({\n\tattr: function( elem, name, value ) {\n\t\tvar hooks, ret,\n\t\t\tnType = elem.nodeType;\n\n\t\t// don't get/set attributes on text, comment and attribute nodes\n\t\tif ( !elem || nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Fallback to prop when attributes are not supported\n\t\tif ( typeof elem.getAttribute === strundefined ) {\n\t\t\treturn jQuery.prop( elem, name, value );\n\t\t}\n\n\t\t// All attributes are lowercase\n\t\t// Grab necessary hook if one is defined\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\t\t\tname = name.toLowerCase();\n\t\t\thooks = jQuery.attrHooks[ name ] ||\n\t\t\t\t( jQuery.expr.match.bool.test( name ) ? boolHook : nodeHook );\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\n\t\t\tif ( value === null ) {\n\t\t\t\tjQuery.removeAttr( elem, name );\n\n\t\t\t} else if ( hooks && \"set\" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {\n\t\t\t\treturn ret;\n\n\t\t\t} else {\n\t\t\t\telem.setAttribute( name, value + \"\" );\n\t\t\t\treturn value;\n\t\t\t}\n\n\t\t} else if ( hooks && \"get\" in hooks && (ret = hooks.get( elem, name )) !== null ) {\n\t\t\treturn ret;\n\n\t\t} else {\n\t\t\tret = jQuery.find.attr( elem, name );\n\n\t\t\t// Non-existent attributes return null, we normalize to undefined\n\t\t\treturn ret == null ?\n\t\t\t\tundefined :\n\t\t\t\tret;\n\t\t}\n\t},\n\n\tremoveAttr: function( elem, value ) {\n\t\tvar name, propName,\n\t\t\ti = 0,\n\t\t\tattrNames = value && value.match( rnotwhite );\n\n\t\tif ( attrNames && elem.nodeType === 1 ) {\n\t\t\twhile ( (name = attrNames[i++]) ) {\n\t\t\t\tpropName = jQuery.propFix[ name ] || name;\n\n\t\t\t\t// Boolean attributes get special treatment (#10870)\n\t\t\t\tif ( jQuery.expr.match.bool.test( name ) ) {\n\t\t\t\t\t// Set corresponding property to false\n\t\t\t\t\telem[ propName ] = false;\n\t\t\t\t}\n\n\t\t\t\telem.removeAttribute( name );\n\t\t\t}\n\t\t}\n\t},\n\n\tattrHooks: {\n\t\ttype: {\n\t\t\tset: function( elem, value ) {\n\t\t\t\tif ( !support.radioValue && value === \"radio\" &&\n\t\t\t\t\tjQuery.nodeName( elem, \"input\" ) ) {\n\t\t\t\t\tvar val = elem.value;\n\t\t\t\t\telem.setAttribute( \"type\", value );\n\t\t\t\t\tif ( val ) {\n\t\t\t\t\t\telem.value = val;\n\t\t\t\t\t}\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n});\n\n// Hooks for boolean attributes\nboolHook = {\n\tset: function( elem, value, name ) {\n\t\tif ( value === false ) {\n\t\t\t// Remove boolean attributes when set to false\n\t\t\tjQuery.removeAttr( elem, name );\n\t\t} else {\n\t\t\telem.setAttribute( name, name );\n\t\t}\n\t\treturn name;\n\t}\n};\njQuery.each( jQuery.expr.match.bool.source.match( /\\w+/g ), function( i, name ) {\n\tvar getter = attrHandle[ name ] || jQuery.find.attr;\n\n\tattrHandle[ name ] = function( elem, name, isXML ) {\n\t\tvar ret, handle;\n\t\tif ( !isXML ) {\n\t\t\t// Avoid an infinite loop by temporarily removing this function from the getter\n\t\t\thandle = attrHandle[ name ];\n\t\t\tattrHandle[ name ] = ret;\n\t\t\tret = getter( elem, name, isXML ) != null ?\n\t\t\t\tname.toLowerCase() :\n\t\t\t\tnull;\n\t\t\tattrHandle[ name ] = handle;\n\t\t}\n\t\treturn ret;\n\t};\n});\n\n\n\n\nvar rfocusable = /^(?:input|select|textarea|button)$/i;\n\njQuery.fn.extend({\n\tprop: function( name, value ) {\n\t\treturn access( this, jQuery.prop, name, value, arguments.length > 1 );\n\t},\n\n\tremoveProp: function( name ) {\n\t\treturn this.each(function() {\n\t\t\tdelete this[ jQuery.propFix[ name ] || name ];\n\t\t});\n\t}\n});\n\njQuery.extend({\n\tpropFix: {\n\t\t\"for\": \"htmlFor\",\n\t\t\"class\": \"className\"\n\t},\n\n\tprop: function( elem, name, value ) {\n\t\tvar ret, hooks, notxml,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set properties on text, comment and attribute nodes\n\t\tif ( !elem || nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tnotxml = nType !== 1 || !jQuery.isXMLDoc( elem );\n\n\t\tif ( notxml ) {\n\t\t\t// Fix name and attach hooks\n\t\t\tname = jQuery.propFix[ name ] || name;\n\t\t\thooks = jQuery.propHooks[ name ];\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\treturn hooks && \"set\" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ?\n\t\t\t\tret :\n\t\t\t\t( elem[ name ] = value );\n\n\t\t} else {\n\t\t\treturn hooks && \"get\" in hooks && (ret = hooks.get( elem, name )) !== null ?\n\t\t\t\tret :\n\t\t\t\telem[ name ];\n\t\t}\n\t},\n\n\tpropHooks: {\n\t\ttabIndex: {\n\t\t\tget: function( elem ) {\n\t\t\t\treturn elem.hasAttribute( \"tabindex\" ) || rfocusable.test( elem.nodeName ) || elem.href ?\n\t\t\t\t\telem.tabIndex :\n\t\t\t\t\t-1;\n\t\t\t}\n\t\t}\n\t}\n});\n\nif ( !support.optSelected ) {\n\tjQuery.propHooks.selected = {\n\t\tget: function( elem ) {\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent && parent.parentNode ) {\n\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t};\n}\n\njQuery.each([\n\t\"tabIndex\",\n\t\"readOnly\",\n\t\"maxLength\",\n\t\"cellSpacing\",\n\t\"cellPadding\",\n\t\"rowSpan\",\n\t\"colSpan\",\n\t\"useMap\",\n\t\"frameBorder\",\n\t\"contentEditable\"\n], function() {\n\tjQuery.propFix[ this.toLowerCase() ] = this;\n});\n\n\n\n\nvar rclass = /[\\t\\r\\n\\f]/g;\n\njQuery.fn.extend({\n\taddClass: function( value ) {\n\t\tvar classes, elem, cur, clazz, j, finalValue,\n\t\t\tproceed = typeof value === \"string\" && value,\n\t\t\ti = 0,\n\t\t\tlen = this.length;\n\n\t\tif ( jQuery.isFunction( value ) ) {\n\t\t\treturn this.each(function( j ) {\n\t\t\t\tjQuery( this ).addClass( value.call( this, j, this.className ) );\n\t\t\t});\n\t\t}\n\n\t\tif ( proceed ) {\n\t\t\t// The disjunction here is for better compressibility (see removeClass)\n\t\t\tclasses = ( value || \"\" ).match( rnotwhite ) || [];\n\n\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\telem = this[ i ];\n\t\t\t\tcur = elem.nodeType === 1 && ( elem.className ?\n\t\t\t\t\t( \" \" + elem.className + \" \" ).replace( rclass, \" \" ) :\n\t\t\t\t\t\" \"\n\t\t\t\t);\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( (clazz = classes[j++]) ) {\n\t\t\t\t\t\tif ( cur.indexOf( \" \" + clazz + \" \" ) < 0 ) {\n\t\t\t\t\t\t\tcur += clazz + \" \";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = jQuery.trim( cur );\n\t\t\t\t\tif ( elem.className !== finalValue ) {\n\t\t\t\t\t\telem.className = finalValue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tremoveClass: function( value ) {\n\t\tvar classes, elem, cur, clazz, j, finalValue,\n\t\t\tproceed = arguments.length === 0 || typeof value === \"string\" && value,\n\t\t\ti = 0,\n\t\t\tlen = this.length;\n\n\t\tif ( jQuery.isFunction( value ) ) {\n\t\t\treturn this.each(function( j ) {\n\t\t\t\tjQuery( this ).removeClass( value.call( this, j, this.className ) );\n\t\t\t});\n\t\t}\n\t\tif ( proceed ) {\n\t\t\tclasses = ( value || \"\" ).match( rnotwhite ) || [];\n\n\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\telem = this[ i ];\n\t\t\t\t// This expression is here for better compressibility (see addClass)\n\t\t\t\tcur = elem.nodeType === 1 && ( elem.className ?\n\t\t\t\t\t( \" \" + elem.className + \" \" ).replace( rclass, \" \" ) :\n\t\t\t\t\t\"\"\n\t\t\t\t);\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( (clazz = classes[j++]) ) {\n\t\t\t\t\t\t// Remove *all* instances\n\t\t\t\t\t\twhile ( cur.indexOf( \" \" + clazz + \" \" ) >= 0 ) {\n\t\t\t\t\t\t\tcur = cur.replace( \" \" + clazz + \" \", \" \" );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = value ? jQuery.trim( cur ) : \"\";\n\t\t\t\t\tif ( elem.className !== finalValue ) {\n\t\t\t\t\t\telem.className = finalValue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\ttoggleClass: function( value, stateVal ) {\n\t\tvar type = typeof value;\n\n\t\tif ( typeof stateVal === \"boolean\" && type === \"string\" ) {\n\t\t\treturn stateVal ? this.addClass( value ) : this.removeClass( value );\n\t\t}\n\n\t\tif ( jQuery.isFunction( value ) ) {\n\t\t\treturn this.each(function( i ) {\n\t\t\t\tjQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );\n\t\t\t});\n\t\t}\n\n\t\treturn this.each(function() {\n\t\t\tif ( type === \"string\" ) {\n\t\t\t\t// Toggle individual class names\n\t\t\t\tvar className,\n\t\t\t\t\ti = 0,\n\t\t\t\t\tself = jQuery( this ),\n\t\t\t\t\tclassNames = value.match( rnotwhite ) || [];\n\n\t\t\t\twhile ( (className = classNames[ i++ ]) ) {\n\t\t\t\t\t// Check each className given, space separated list\n\t\t\t\t\tif ( self.hasClass( className ) ) {\n\t\t\t\t\t\tself.removeClass( className );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.addClass( className );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t// Toggle whole class name\n\t\t\t} else if ( type === strundefined || type === \"boolean\" ) {\n\t\t\t\tif ( this.className ) {\n\t\t\t\t\t// store className if set\n\t\t\t\t\tdata_priv.set( this, \"__className__\", this.className );\n\t\t\t\t}\n\n\t\t\t\t// If the element has a class name or if we're passed `false`,\n\t\t\t\t// then remove the whole classname (if there was one, the above saved it).\n\t\t\t\t// Otherwise bring back whatever was previously saved (if anything),\n\t\t\t\t// falling back to the empty string if nothing was stored.\n\t\t\t\tthis.className = this.className || value === false ? \"\" : data_priv.get( this, \"__className__\" ) || \"\";\n\t\t\t}\n\t\t});\n\t},\n\n\thasClass: function( selector ) {\n\t\tvar className = \" \" + selector + \" \",\n\t\t\ti = 0,\n\t\t\tl = this.length;\n\t\tfor ( ; i < l; i++ ) {\n\t\t\tif ( this[i].nodeType === 1 && (\" \" + this[i].className + \" \").replace(rclass, \" \").indexOf( className ) >= 0 ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n});\n\n\n\n\nvar rreturn = /\\r/g;\n\njQuery.fn.extend({\n\tval: function( value ) {\n\t\tvar hooks, ret, isFunction,\n\t\t\telem = this[0];\n\n\t\tif ( !arguments.length ) {\n\t\t\tif ( elem ) {\n\t\t\t\thooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];\n\n\t\t\t\tif ( hooks && \"get\" in hooks && (ret = hooks.get( elem, \"value\" )) !== undefined ) {\n\t\t\t\t\treturn ret;\n\t\t\t\t}\n\n\t\t\t\tret = elem.value;\n\n\t\t\t\treturn typeof ret === \"string\" ?\n\t\t\t\t\t// Handle most common string cases\n\t\t\t\t\tret.replace(rreturn, \"\") :\n\t\t\t\t\t// Handle cases where value is null/undef or number\n\t\t\t\t\tret == null ? \"\" : ret;\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tisFunction = jQuery.isFunction( value );\n\n\t\treturn this.each(function( i ) {\n\t\t\tvar val;\n\n\t\t\tif ( this.nodeType !== 1 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( isFunction ) {\n\t\t\t\tval = value.call( this, i, jQuery( this ).val() );\n\t\t\t} else {\n\t\t\t\tval = value;\n\t\t\t}\n\n\t\t\t// Treat null/undefined as \"\"; convert numbers to string\n\t\t\tif ( val == null ) {\n\t\t\t\tval = \"\";\n\n\t\t\t} else if ( typeof val === \"number\" ) {\n\t\t\t\tval += \"\";\n\n\t\t\t} else if ( jQuery.isArray( val ) ) {\n\t\t\t\tval = jQuery.map( val, function( value ) {\n\t\t\t\t\treturn value == null ? \"\" : value + \"\";\n\t\t\t\t});\n\t\t\t}\n\n\t\t\thooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];\n\n\t\t\t// If set returns undefined, fall back to normal setting\n\t\t\tif ( !hooks || !(\"set\" in hooks) || hooks.set( this, val, \"value\" ) === undefined ) {\n\t\t\t\tthis.value = val;\n\t\t\t}\n\t\t});\n\t}\n});\n\njQuery.extend({\n\tvalHooks: {\n\t\toption: {\n\t\t\tget: function( elem ) {\n\t\t\t\tvar val = jQuery.find.attr( elem, \"value\" );\n\t\t\t\treturn val != null ?\n\t\t\t\t\tval :\n\t\t\t\t\t// Support: IE10-11+\n\t\t\t\t\t// option.text throws exceptions (#14686, #14858)\n\t\t\t\t\tjQuery.trim( jQuery.text( elem ) );\n\t\t\t}\n\t\t},\n\t\tselect: {\n\t\t\tget: function( elem ) {\n\t\t\t\tvar value, option,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tindex = elem.selectedIndex,\n\t\t\t\t\tone = elem.type === \"select-one\" || index < 0,\n\t\t\t\t\tvalues = one ? null : [],\n\t\t\t\t\tmax = one ? index + 1 : options.length,\n\t\t\t\t\ti = index < 0 ?\n\t\t\t\t\t\tmax :\n\t\t\t\t\t\tone ? index : 0;\n\n\t\t\t\t// Loop through all the selected options\n\t\t\t\tfor ( ; i < max; i++ ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\t// IE6-9 doesn't update selected after form reset (#2551)\n\t\t\t\t\tif ( ( option.selected || i === index ) &&\n\t\t\t\t\t\t\t// Don't return options that are disabled or in a disabled optgroup\n\t\t\t\t\t\t\t( support.optDisabled ? !option.disabled : option.getAttribute( \"disabled\" ) === null ) &&\n\t\t\t\t\t\t\t( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, \"optgroup\" ) ) ) {\n\n\t\t\t\t\t\t// Get the specific value for the option\n\t\t\t\t\t\tvalue = jQuery( option ).val();\n\n\t\t\t\t\t\t// We don't need an array for one selects\n\t\t\t\t\t\tif ( one ) {\n\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Multi-Selects return an array\n\t\t\t\t\t\tvalues.push( value );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\t\t\t},\n\n\t\t\tset: function( elem, value ) {\n\t\t\t\tvar optionSet, option,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tvalues = jQuery.makeArray( value ),\n\t\t\t\t\ti = options.length;\n\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\toption = options[ i ];\n\t\t\t\t\tif ( (option.selected = jQuery.inArray( option.value, values ) >= 0) ) {\n\t\t\t\t\t\toptionSet = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Force browsers to behave consistently when non-matching value is set\n\t\t\t\tif ( !optionSet ) {\n\t\t\t\t\telem.selectedIndex = -1;\n\t\t\t\t}\n\t\t\t\treturn values;\n\t\t\t}\n\t\t}\n\t}\n});\n\n// Radios and checkboxes getter/setter\njQuery.each([ \"radio\", \"checkbox\" ], function() {\n\tjQuery.valHooks[ this ] = {\n\t\tset: function( elem, value ) {\n\t\t\tif ( jQuery.isArray( value ) ) {\n\t\t\t\treturn ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );\n\t\t\t}\n\t\t}\n\t};\n\tif ( !support.checkOn ) {\n\t\tjQuery.valHooks[ this ].get = function( elem ) {\n\t\t\treturn elem.getAttribute(\"value\") === null ? \"on\" : elem.value;\n\t\t};\n\t}\n});\n\n\n\n\n// Return jQuery for attributes-only inclusion\n\n\njQuery.each( (\"blur focus focusin focusout load resize scroll unload click dblclick \" +\n\t\"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave \" +\n\t\"change select submit keydown keypress keyup error contextmenu\").split(\" \"), function( i, name ) {\n\n\t// Handle event binding\n\tjQuery.fn[ name ] = function( data, fn ) {\n\t\treturn arguments.length > 0 ?\n\t\t\tthis.on( name, null, data, fn ) :\n\t\t\tthis.trigger( name );\n\t};\n});\n\njQuery.fn.extend({\n\thover: function( fnOver, fnOut ) {\n\t\treturn this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );\n\t},\n\n\tbind: function( types, data, fn ) {\n\t\treturn this.on( types, null, data, fn );\n\t},\n\tunbind: function( types, fn ) {\n\t\treturn this.off( types, null, fn );\n\t},\n\n\tdelegate: function( selector, types, data, fn ) {\n\t\treturn this.on( types, selector, data, fn );\n\t},\n\tundelegate: function( selector, types, fn ) {\n\t\t// ( namespace ) or ( selector, types [, fn] )\n\t\treturn arguments.length === 1 ? this.off( selector, \"**\" ) : this.off( types, selector || \"**\", fn );\n\t}\n});\n\n\nvar nonce = jQuery.now();\n\nvar rquery = (/\\?/);\n\n\n\n// Support: Android 2.3\n// Workaround failure to string-cast null input\njQuery.parseJSON = function( data ) {\n\treturn JSON.parse( data + \"\" );\n};\n\n\n// Cross-browser xml parsing\njQuery.parseXML = function( data ) {\n\tvar xml, tmp;\n\tif ( !data || typeof data !== \"string\" ) {\n\t\treturn null;\n\t}\n\n\t// Support: IE9\n\ttry {\n\t\ttmp = new DOMParser();\n\t\txml = tmp.parseFromString( data, \"text/xml\" );\n\t} catch ( e ) {\n\t\txml = undefined;\n\t}\n\n\tif ( !xml || xml.getElementsByTagName( \"parsererror\" ).length ) {\n\t\tjQuery.error( \"Invalid XML: \" + data );\n\t}\n\treturn xml;\n};\n\n\nvar\n\trhash = /#.*$/,\n\trts = /([?&])_=[^&]*/,\n\trheaders = /^(.*?):[ \\t]*([^\\r\\n]*)$/mg,\n\t// #7653, #8125, #8152: local protocol detection\n\trlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\n\trnoContent = /^(?:GET|HEAD)$/,\n\trprotocol = /^\\/\\//,\n\trurl = /^([\\w.+-]+:)(?:\\/\\/(?:[^\\/?#]*@|)([^\\/?#:]*)(?::(\\d+)|)|)/,\n\n\t/* Prefilters\n\t * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\n\t * 2) These are called:\n\t *    - BEFORE asking for a transport\n\t *    - AFTER param serialization (s.data is a string if s.processData is true)\n\t * 3) key is the dataType\n\t * 4) the catchall symbol \"*\" can be used\n\t * 5) execution will start with transport dataType and THEN continue down to \"*\" if needed\n\t */\n\tprefilters = {},\n\n\t/* Transports bindings\n\t * 1) key is the dataType\n\t * 2) the catchall symbol \"*\" can be used\n\t * 3) selection will start with transport dataType and THEN go to \"*\" if needed\n\t */\n\ttransports = {},\n\n\t// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression\n\tallTypes = \"*/\".concat( \"*\" ),\n\n\t// Document location\n\tajaxLocation = window.location.href,\n\n\t// Segment location into parts\n\tajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];\n\n// Base \"constructor\" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\nfunction addToPrefiltersOrTransports( structure ) {\n\n\t// dataTypeExpression is optional and defaults to \"*\"\n\treturn function( dataTypeExpression, func ) {\n\n\t\tif ( typeof dataTypeExpression !== \"string\" ) {\n\t\t\tfunc = dataTypeExpression;\n\t\t\tdataTypeExpression = \"*\";\n\t\t}\n\n\t\tvar dataType,\n\t\t\ti = 0,\n\t\t\tdataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];\n\n\t\tif ( jQuery.isFunction( func ) ) {\n\t\t\t// For each dataType in the dataTypeExpression\n\t\t\twhile ( (dataType = dataTypes[i++]) ) {\n\t\t\t\t// Prepend if requested\n\t\t\t\tif ( dataType[0] === \"+\" ) {\n\t\t\t\t\tdataType = dataType.slice( 1 ) || \"*\";\n\t\t\t\t\t(structure[ dataType ] = structure[ dataType ] || []).unshift( func );\n\n\t\t\t\t// Otherwise append\n\t\t\t\t} else {\n\t\t\t\t\t(structure[ dataType ] = structure[ dataType ] || []).push( func );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\n// Base inspection function for prefilters and transports\nfunction inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {\n\n\tvar inspected = {},\n\t\tseekingTransport = ( structure === transports );\n\n\tfunction inspect( dataType ) {\n\t\tvar selected;\n\t\tinspected[ dataType ] = true;\n\t\tjQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {\n\t\t\tvar dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );\n\t\t\tif ( typeof dataTypeOrTransport === \"string\" && !seekingTransport && !inspected[ dataTypeOrTransport ] ) {\n\t\t\t\toptions.dataTypes.unshift( dataTypeOrTransport );\n\t\t\t\tinspect( dataTypeOrTransport );\n\t\t\t\treturn false;\n\t\t\t} else if ( seekingTransport ) {\n\t\t\t\treturn !( selected = dataTypeOrTransport );\n\t\t\t}\n\t\t});\n\t\treturn selected;\n\t}\n\n\treturn inspect( options.dataTypes[ 0 ] ) || !inspected[ \"*\" ] && inspect( \"*\" );\n}\n\n// A special extend for ajax options\n// that takes \"flat\" options (not to be deep extended)\n// Fixes #9887\nfunction ajaxExtend( target, src ) {\n\tvar key, deep,\n\t\tflatOptions = jQuery.ajaxSettings.flatOptions || {};\n\n\tfor ( key in src ) {\n\t\tif ( src[ key ] !== undefined ) {\n\t\t\t( flatOptions[ key ] ? target : ( deep || (deep = {}) ) )[ key ] = src[ key ];\n\t\t}\n\t}\n\tif ( deep ) {\n\t\tjQuery.extend( true, target, deep );\n\t}\n\n\treturn target;\n}\n\n/* Handles responses to an ajax request:\n * - finds the right dataType (mediates between content-type and expected dataType)\n * - returns the corresponding response\n */\nfunction ajaxHandleResponses( s, jqXHR, responses ) {\n\n\tvar ct, type, finalDataType, firstDataType,\n\t\tcontents = s.contents,\n\t\tdataTypes = s.dataTypes;\n\n\t// Remove auto dataType and get content-type in the process\n\twhile ( dataTypes[ 0 ] === \"*\" ) {\n\t\tdataTypes.shift();\n\t\tif ( ct === undefined ) {\n\t\t\tct = s.mimeType || jqXHR.getResponseHeader(\"Content-Type\");\n\t\t}\n\t}\n\n\t// Check if we're dealing with a known content-type\n\tif ( ct ) {\n\t\tfor ( type in contents ) {\n\t\t\tif ( contents[ type ] && contents[ type ].test( ct ) ) {\n\t\t\t\tdataTypes.unshift( type );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Check to see if we have a response for the expected dataType\n\tif ( dataTypes[ 0 ] in responses ) {\n\t\tfinalDataType = dataTypes[ 0 ];\n\t} else {\n\t\t// Try convertible dataTypes\n\t\tfor ( type in responses ) {\n\t\t\tif ( !dataTypes[ 0 ] || s.converters[ type + \" \" + dataTypes[0] ] ) {\n\t\t\t\tfinalDataType = type;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( !firstDataType ) {\n\t\t\t\tfirstDataType = type;\n\t\t\t}\n\t\t}\n\t\t// Or just use first one\n\t\tfinalDataType = finalDataType || firstDataType;\n\t}\n\n\t// If we found a dataType\n\t// We add the dataType to the list if needed\n\t// and return the corresponding response\n\tif ( finalDataType ) {\n\t\tif ( finalDataType !== dataTypes[ 0 ] ) {\n\t\t\tdataTypes.unshift( finalDataType );\n\t\t}\n\t\treturn responses[ finalDataType ];\n\t}\n}\n\n/* Chain conversions given the request and the original response\n * Also sets the responseXXX fields on the jqXHR instance\n */\nfunction ajaxConvert( s, response, jqXHR, isSuccess ) {\n\tvar conv2, current, conv, tmp, prev,\n\t\tconverters = {},\n\t\t// Work with a copy of dataTypes in case we need to modify it for conversion\n\t\tdataTypes = s.dataTypes.slice();\n\n\t// Create converters map with lowercased keys\n\tif ( dataTypes[ 1 ] ) {\n\t\tfor ( conv in s.converters ) {\n\t\t\tconverters[ conv.toLowerCase() ] = s.converters[ conv ];\n\t\t}\n\t}\n\n\tcurrent = dataTypes.shift();\n\n\t// Convert to each sequential dataType\n\twhile ( current ) {\n\n\t\tif ( s.responseFields[ current ] ) {\n\t\t\tjqXHR[ s.responseFields[ current ] ] = response;\n\t\t}\n\n\t\t// Apply the dataFilter if provided\n\t\tif ( !prev && isSuccess && s.dataFilter ) {\n\t\t\tresponse = s.dataFilter( response, s.dataType );\n\t\t}\n\n\t\tprev = current;\n\t\tcurrent = dataTypes.shift();\n\n\t\tif ( current ) {\n\n\t\t// There's only work to do if current dataType is non-auto\n\t\t\tif ( current === \"*\" ) {\n\n\t\t\t\tcurrent = prev;\n\n\t\t\t// Convert response if prev dataType is non-auto and differs from current\n\t\t\t} else if ( prev !== \"*\" && prev !== current ) {\n\n\t\t\t\t// Seek a direct converter\n\t\t\t\tconv = converters[ prev + \" \" + current ] || converters[ \"* \" + current ];\n\n\t\t\t\t// If none found, seek a pair\n\t\t\t\tif ( !conv ) {\n\t\t\t\t\tfor ( conv2 in converters ) {\n\n\t\t\t\t\t\t// If conv2 outputs current\n\t\t\t\t\t\ttmp = conv2.split( \" \" );\n\t\t\t\t\t\tif ( tmp[ 1 ] === current ) {\n\n\t\t\t\t\t\t\t// If prev can be converted to accepted input\n\t\t\t\t\t\t\tconv = converters[ prev + \" \" + tmp[ 0 ] ] ||\n\t\t\t\t\t\t\t\tconverters[ \"* \" + tmp[ 0 ] ];\n\t\t\t\t\t\t\tif ( conv ) {\n\t\t\t\t\t\t\t\t// Condense equivalence converters\n\t\t\t\t\t\t\t\tif ( conv === true ) {\n\t\t\t\t\t\t\t\t\tconv = converters[ conv2 ];\n\n\t\t\t\t\t\t\t\t// Otherwise, insert the intermediate dataType\n\t\t\t\t\t\t\t\t} else if ( converters[ conv2 ] !== true ) {\n\t\t\t\t\t\t\t\t\tcurrent = tmp[ 0 ];\n\t\t\t\t\t\t\t\t\tdataTypes.unshift( tmp[ 1 ] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Apply converter (if not an equivalence)\n\t\t\t\tif ( conv !== true ) {\n\n\t\t\t\t\t// Unless errors are allowed to bubble, catch and return them\n\t\t\t\t\tif ( conv && s[ \"throws\" ] ) {\n\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t\t} catch ( e ) {\n\t\t\t\t\t\t\treturn { state: \"parsererror\", error: conv ? e : \"No conversion from \" + prev + \" to \" + current };\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { state: \"success\", data: response };\n}\n\njQuery.extend({\n\n\t// Counter for holding the number of active queries\n\tactive: 0,\n\n\t// Last-Modified header cache for next request\n\tlastModified: {},\n\tetag: {},\n\n\tajaxSettings: {\n\t\turl: ajaxLocation,\n\t\ttype: \"GET\",\n\t\tisLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),\n\t\tglobal: true,\n\t\tprocessData: true,\n\t\tasync: true,\n\t\tcontentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\n\t\t/*\n\t\ttimeout: 0,\n\t\tdata: null,\n\t\tdataType: null,\n\t\tusername: null,\n\t\tpassword: null,\n\t\tcache: null,\n\t\tthrows: false,\n\t\ttraditional: false,\n\t\theaders: {},\n\t\t*/\n\n\t\taccepts: {\n\t\t\t\"*\": allTypes,\n\t\t\ttext: \"text/plain\",\n\t\t\thtml: \"text/html\",\n\t\t\txml: \"application/xml, text/xml\",\n\t\t\tjson: \"application/json, text/javascript\"\n\t\t},\n\n\t\tcontents: {\n\t\t\txml: /xml/,\n\t\t\thtml: /html/,\n\t\t\tjson: /json/\n\t\t},\n\n\t\tresponseFields: {\n\t\t\txml: \"responseXML\",\n\t\t\ttext: \"responseText\",\n\t\t\tjson: \"responseJSON\"\n\t\t},\n\n\t\t// Data converters\n\t\t// Keys separate source (or catchall \"*\") and destination types with a single space\n\t\tconverters: {\n\n\t\t\t// Convert anything to text\n\t\t\t\"* text\": String,\n\n\t\t\t// Text to html (true = no transformation)\n\t\t\t\"text html\": true,\n\n\t\t\t// Evaluate text as a json expression\n\t\t\t\"text json\": jQuery.parseJSON,\n\n\t\t\t// Parse text as xml\n\t\t\t\"text xml\": jQuery.parseXML\n\t\t},\n\n\t\t// For options that shouldn't be deep extended:\n\t\t// you can add your own custom options here if\n\t\t// and when you create one that shouldn't be\n\t\t// deep extended (see ajaxExtend)\n\t\tflatOptions: {\n\t\t\turl: true,\n\t\t\tcontext: true\n\t\t}\n\t},\n\n\t// Creates a full fledged settings object into target\n\t// with both ajaxSettings and settings fields.\n\t// If target is omitted, writes into ajaxSettings.\n\tajaxSetup: function( target, settings ) {\n\t\treturn settings ?\n\n\t\t\t// Building a settings object\n\t\t\tajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :\n\n\t\t\t// Extending ajaxSettings\n\t\t\tajaxExtend( jQuery.ajaxSettings, target );\n\t},\n\n\tajaxPrefilter: addToPrefiltersOrTransports( prefilters ),\n\tajaxTransport: addToPrefiltersOrTransports( transports ),\n\n\t// Main method\n\tajax: function( url, options ) {\n\n\t\t// If url is an object, simulate pre-1.5 signature\n\t\tif ( typeof url === \"object\" ) {\n\t\t\toptions = url;\n\t\t\turl = undefined;\n\t\t}\n\n\t\t// Force options to be an object\n\t\toptions = options || {};\n\n\t\tvar transport,\n\t\t\t// URL without anti-cache param\n\t\t\tcacheURL,\n\t\t\t// Response headers\n\t\t\tresponseHeadersString,\n\t\t\tresponseHeaders,\n\t\t\t// timeout handle\n\t\t\ttimeoutTimer,\n\t\t\t// Cross-domain detection vars\n\t\t\tparts,\n\t\t\t// To know if global events are to be dispatched\n\t\t\tfireGlobals,\n\t\t\t// Loop variable\n\t\t\ti,\n\t\t\t// Create the final options object\n\t\t\ts = jQuery.ajaxSetup( {}, options ),\n\t\t\t// Callbacks context\n\t\t\tcallbackContext = s.context || s,\n\t\t\t// Context for global events is callbackContext if it is a DOM node or jQuery collection\n\t\t\tglobalEventContext = s.context && ( callbackContext.nodeType || callbackContext.jquery ) ?\n\t\t\t\tjQuery( callbackContext ) :\n\t\t\t\tjQuery.event,\n\t\t\t// Deferreds\n\t\t\tdeferred = jQuery.Deferred(),\n\t\t\tcompleteDeferred = jQuery.Callbacks(\"once memory\"),\n\t\t\t// Status-dependent callbacks\n\t\t\tstatusCode = s.statusCode || {},\n\t\t\t// Headers (they are sent all at once)\n\t\t\trequestHeaders = {},\n\t\t\trequestHeadersNames = {},\n\t\t\t// The jqXHR state\n\t\t\tstate = 0,\n\t\t\t// Default abort message\n\t\t\tstrAbort = \"canceled\",\n\t\t\t// Fake xhr\n\t\t\tjqXHR = {\n\t\t\t\treadyState: 0,\n\n\t\t\t\t// Builds headers hashtable if needed\n\t\t\t\tgetResponseHeader: function( key ) {\n\t\t\t\t\tvar match;\n\t\t\t\t\tif ( state === 2 ) {\n\t\t\t\t\t\tif ( !responseHeaders ) {\n\t\t\t\t\t\t\tresponseHeaders = {};\n\t\t\t\t\t\t\twhile ( (match = rheaders.exec( responseHeadersString )) ) {\n\t\t\t\t\t\t\t\tresponseHeaders[ match[1].toLowerCase() ] = match[ 2 ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmatch = responseHeaders[ key.toLowerCase() ];\n\t\t\t\t\t}\n\t\t\t\t\treturn match == null ? null : match;\n\t\t\t\t},\n\n\t\t\t\t// Raw string\n\t\t\t\tgetAllResponseHeaders: function() {\n\t\t\t\t\treturn state === 2 ? responseHeadersString : null;\n\t\t\t\t},\n\n\t\t\t\t// Caches the header\n\t\t\t\tsetRequestHeader: function( name, value ) {\n\t\t\t\t\tvar lname = name.toLowerCase();\n\t\t\t\t\tif ( !state ) {\n\t\t\t\t\t\tname = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;\n\t\t\t\t\t\trequestHeaders[ name ] = value;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Overrides response content-type header\n\t\t\t\toverrideMimeType: function( type ) {\n\t\t\t\t\tif ( !state ) {\n\t\t\t\t\t\ts.mimeType = type;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Status-dependent callbacks\n\t\t\t\tstatusCode: function( map ) {\n\t\t\t\t\tvar code;\n\t\t\t\t\tif ( map ) {\n\t\t\t\t\t\tif ( state < 2 ) {\n\t\t\t\t\t\t\tfor ( code in map ) {\n\t\t\t\t\t\t\t\t// Lazy-add the new callback in a way that preserves old ones\n\t\t\t\t\t\t\t\tstatusCode[ code ] = [ statusCode[ code ], map[ code ] ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Execute the appropriate callbacks\n\t\t\t\t\t\t\tjqXHR.always( map[ jqXHR.status ] );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Cancel the request\n\t\t\t\tabort: function( statusText ) {\n\t\t\t\t\tvar finalText = statusText || strAbort;\n\t\t\t\t\tif ( transport ) {\n\t\t\t\t\t\ttransport.abort( finalText );\n\t\t\t\t\t}\n\t\t\t\t\tdone( 0, finalText );\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t};\n\n\t\t// Attach deferreds\n\t\tdeferred.promise( jqXHR ).complete = completeDeferred.add;\n\t\tjqXHR.success = jqXHR.done;\n\t\tjqXHR.error = jqXHR.fail;\n\n\t\t// Remove hash character (#7531: and string promotion)\n\t\t// Add protocol if not provided (prefilters might expect it)\n\t\t// Handle falsy url in the settings object (#10093: consistency with old signature)\n\t\t// We also use the url parameter if available\n\t\ts.url = ( ( url || s.url || ajaxLocation ) + \"\" ).replace( rhash, \"\" )\n\t\t\t.replace( rprotocol, ajaxLocParts[ 1 ] + \"//\" );\n\n\t\t// Alias method option to type as per ticket #12004\n\t\ts.type = options.method || options.type || s.method || s.type;\n\n\t\t// Extract dataTypes list\n\t\ts.dataTypes = jQuery.trim( s.dataType || \"*\" ).toLowerCase().match( rnotwhite ) || [ \"\" ];\n\n\t\t// A cross-domain request is in order when we have a protocol:host:port mismatch\n\t\tif ( s.crossDomain == null ) {\n\t\t\tparts = rurl.exec( s.url.toLowerCase() );\n\t\t\ts.crossDomain = !!( parts &&\n\t\t\t\t( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||\n\t\t\t\t\t( parts[ 3 ] || ( parts[ 1 ] === \"http:\" ? \"80\" : \"443\" ) ) !==\n\t\t\t\t\t\t( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === \"http:\" ? \"80\" : \"443\" ) ) )\n\t\t\t);\n\t\t}\n\n\t\t// Convert data if not already a string\n\t\tif ( s.data && s.processData && typeof s.data !== \"string\" ) {\n\t\t\ts.data = jQuery.param( s.data, s.traditional );\n\t\t}\n\n\t\t// Apply prefilters\n\t\tinspectPrefiltersOrTransports( prefilters, s, options, jqXHR );\n\n\t\t// If request was aborted inside a prefilter, stop there\n\t\tif ( state === 2 ) {\n\t\t\treturn jqXHR;\n\t\t}\n\n\t\t// We can fire global events as of now if asked to\n\t\t// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)\n\t\tfireGlobals = jQuery.event && s.global;\n\n\t\t// Watch for a new set of requests\n\t\tif ( fireGlobals && jQuery.active++ === 0 ) {\n\t\t\tjQuery.event.trigger(\"ajaxStart\");\n\t\t}\n\n\t\t// Uppercase the type\n\t\ts.type = s.type.toUpperCase();\n\n\t\t// Determine if request has content\n\t\ts.hasContent = !rnoContent.test( s.type );\n\n\t\t// Save the URL in case we're toying with the If-Modified-Since\n\t\t// and/or If-None-Match header later on\n\t\tcacheURL = s.url;\n\n\t\t// More options handling for requests with no content\n\t\tif ( !s.hasContent ) {\n\n\t\t\t// If data is available, append data to url\n\t\t\tif ( s.data ) {\n\t\t\t\tcacheURL = ( s.url += ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + s.data );\n\t\t\t\t// #9682: remove data so that it's not used in an eventual retry\n\t\t\t\tdelete s.data;\n\t\t\t}\n\n\t\t\t// Add anti-cache in url if needed\n\t\t\tif ( s.cache === false ) {\n\t\t\t\ts.url = rts.test( cacheURL ) ?\n\n\t\t\t\t\t// If there is already a '_' parameter, set its value\n\t\t\t\t\tcacheURL.replace( rts, \"$1_=\" + nonce++ ) :\n\n\t\t\t\t\t// Otherwise add one to the end\n\t\t\t\t\tcacheURL + ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + \"_=\" + nonce++;\n\t\t\t}\n\t\t}\n\n\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\tif ( s.ifModified ) {\n\t\t\tif ( jQuery.lastModified[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-Modified-Since\", jQuery.lastModified[ cacheURL ] );\n\t\t\t}\n\t\t\tif ( jQuery.etag[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-None-Match\", jQuery.etag[ cacheURL ] );\n\t\t\t}\n\t\t}\n\n\t\t// Set the correct header, if data is being sent\n\t\tif ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {\n\t\t\tjqXHR.setRequestHeader( \"Content-Type\", s.contentType );\n\t\t}\n\n\t\t// Set the Accepts header for the server, depending on the dataType\n\t\tjqXHR.setRequestHeader(\n\t\t\t\"Accept\",\n\t\t\ts.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?\n\t\t\t\ts.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== \"*\" ? \", \" + allTypes + \"; q=0.01\" : \"\" ) :\n\t\t\t\ts.accepts[ \"*\" ]\n\t\t);\n\n\t\t// Check for headers option\n\t\tfor ( i in s.headers ) {\n\t\t\tjqXHR.setRequestHeader( i, s.headers[ i ] );\n\t\t}\n\n\t\t// Allow custom headers/mimetypes and early abort\n\t\tif ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {\n\t\t\t// Abort if not done already and return\n\t\t\treturn jqXHR.abort();\n\t\t}\n\n\t\t// Aborting is no longer a cancellation\n\t\tstrAbort = \"abort\";\n\n\t\t// Install callbacks on deferreds\n\t\tfor ( i in { success: 1, error: 1, complete: 1 } ) {\n\t\t\tjqXHR[ i ]( s[ i ] );\n\t\t}\n\n\t\t// Get transport\n\t\ttransport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );\n\n\t\t// If no transport, we auto-abort\n\t\tif ( !transport ) {\n\t\t\tdone( -1, \"No Transport\" );\n\t\t} else {\n\t\t\tjqXHR.readyState = 1;\n\n\t\t\t// Send global event\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxSend\", [ jqXHR, s ] );\n\t\t\t}\n\t\t\t// Timeout\n\t\t\tif ( s.async && s.timeout > 0 ) {\n\t\t\t\ttimeoutTimer = setTimeout(function() {\n\t\t\t\t\tjqXHR.abort(\"timeout\");\n\t\t\t\t}, s.timeout );\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tstate = 1;\n\t\t\t\ttransport.send( requestHeaders, done );\n\t\t\t} catch ( e ) {\n\t\t\t\t// Propagate exception as error if not done\n\t\t\t\tif ( state < 2 ) {\n\t\t\t\t\tdone( -1, e );\n\t\t\t\t// Simply rethrow otherwise\n\t\t\t\t} else {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Callback for when everything is done\n\t\tfunction done( status, nativeStatusText, responses, headers ) {\n\t\t\tvar isSuccess, success, error, response, modified,\n\t\t\t\tstatusText = nativeStatusText;\n\n\t\t\t// Called once\n\t\t\tif ( state === 2 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// State is \"done\" now\n\t\t\tstate = 2;\n\n\t\t\t// Clear timeout if it exists\n\t\t\tif ( timeoutTimer ) {\n\t\t\t\tclearTimeout( timeoutTimer );\n\t\t\t}\n\n\t\t\t// Dereference transport for early garbage collection\n\t\t\t// (no matter how long the jqXHR object will be used)\n\t\t\ttransport = undefined;\n\n\t\t\t// Cache response headers\n\t\t\tresponseHeadersString = headers || \"\";\n\n\t\t\t// Set readyState\n\t\t\tjqXHR.readyState = status > 0 ? 4 : 0;\n\n\t\t\t// Determine if successful\n\t\t\tisSuccess = status >= 200 && status < 300 || status === 304;\n\n\t\t\t// Get response data\n\t\t\tif ( responses ) {\n\t\t\t\tresponse = ajaxHandleResponses( s, jqXHR, responses );\n\t\t\t}\n\n\t\t\t// Convert no matter what (that way responseXXX fields are always set)\n\t\t\tresponse = ajaxConvert( s, response, jqXHR, isSuccess );\n\n\t\t\t// If successful, handle type chaining\n\t\t\tif ( isSuccess ) {\n\n\t\t\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\t\t\tif ( s.ifModified ) {\n\t\t\t\t\tmodified = jqXHR.getResponseHeader(\"Last-Modified\");\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.lastModified[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t\tmodified = jqXHR.getResponseHeader(\"etag\");\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.etag[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// if no content\n\t\t\t\tif ( status === 204 || s.type === \"HEAD\" ) {\n\t\t\t\t\tstatusText = \"nocontent\";\n\n\t\t\t\t// if not modified\n\t\t\t\t} else if ( status === 304 ) {\n\t\t\t\t\tstatusText = \"notmodified\";\n\n\t\t\t\t// If we have data, let's convert it\n\t\t\t\t} else {\n\t\t\t\t\tstatusText = response.state;\n\t\t\t\t\tsuccess = response.data;\n\t\t\t\t\terror = response.error;\n\t\t\t\t\tisSuccess = !error;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Extract error from statusText and normalize for non-aborts\n\t\t\t\terror = statusText;\n\t\t\t\tif ( status || !statusText ) {\n\t\t\t\t\tstatusText = \"error\";\n\t\t\t\t\tif ( status < 0 ) {\n\t\t\t\t\t\tstatus = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Set data for the fake xhr object\n\t\t\tjqXHR.status = status;\n\t\t\tjqXHR.statusText = ( nativeStatusText || statusText ) + \"\";\n\n\t\t\t// Success/Error\n\t\t\tif ( isSuccess ) {\n\t\t\t\tdeferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );\n\t\t\t} else {\n\t\t\t\tdeferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );\n\t\t\t}\n\n\t\t\t// Status-dependent callbacks\n\t\t\tjqXHR.statusCode( statusCode );\n\t\t\tstatusCode = undefined;\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( isSuccess ? \"ajaxSuccess\" : \"ajaxError\",\n\t\t\t\t\t[ jqXHR, s, isSuccess ? success : error ] );\n\t\t\t}\n\n\t\t\t// Complete\n\t\t\tcompleteDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxComplete\", [ jqXHR, s ] );\n\t\t\t\t// Handle the global AJAX counter\n\t\t\t\tif ( !( --jQuery.active ) ) {\n\t\t\t\t\tjQuery.event.trigger(\"ajaxStop\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn jqXHR;\n\t},\n\n\tgetJSON: function( url, data, callback ) {\n\t\treturn jQuery.get( url, data, callback, \"json\" );\n\t},\n\n\tgetScript: function( url, callback ) {\n\t\treturn jQuery.get( url, undefined, callback, \"script\" );\n\t}\n});\n\njQuery.each( [ \"get\", \"post\" ], function( i, method ) {\n\tjQuery[ method ] = function( url, data, callback, type ) {\n\t\t// Shift arguments if data argument was omitted\n\t\tif ( jQuery.isFunction( data ) ) {\n\t\t\ttype = type || callback;\n\t\t\tcallback = data;\n\t\t\tdata = undefined;\n\t\t}\n\n\t\treturn jQuery.ajax({\n\t\t\turl: url,\n\t\t\ttype: method,\n\t\t\tdataType: type,\n\t\t\tdata: data,\n\t\t\tsuccess: callback\n\t\t});\n\t};\n});\n\n\njQuery._evalUrl = function( url ) {\n\treturn jQuery.ajax({\n\t\turl: url,\n\t\ttype: \"GET\",\n\t\tdataType: \"script\",\n\t\tasync: false,\n\t\tglobal: false,\n\t\t\"throws\": true\n\t});\n};\n\n\njQuery.fn.extend({\n\twrapAll: function( html ) {\n\t\tvar wrap;\n\n\t\tif ( jQuery.isFunction( html ) ) {\n\t\t\treturn this.each(function( i ) {\n\t\t\t\tjQuery( this ).wrapAll( html.call(this, i) );\n\t\t\t});\n\t\t}\n\n\t\tif ( this[ 0 ] ) {\n\n\t\t\t// The elements to wrap the target around\n\t\t\twrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );\n\n\t\t\tif ( this[ 0 ].parentNode ) {\n\t\t\t\twrap.insertBefore( this[ 0 ] );\n\t\t\t}\n\n\t\t\twrap.map(function() {\n\t\t\t\tvar elem = this;\n\n\t\t\t\twhile ( elem.firstElementChild ) {\n\t\t\t\t\telem = elem.firstElementChild;\n\t\t\t\t}\n\n\t\t\t\treturn elem;\n\t\t\t}).append( this );\n\t\t}\n\n\t\treturn this;\n\t},\n\n\twrapInner: function( html ) {\n\t\tif ( jQuery.isFunction( html ) ) {\n\t\t\treturn this.each(function( i ) {\n\t\t\t\tjQuery( this ).wrapInner( html.call(this, i) );\n\t\t\t});\n\t\t}\n\n\t\treturn this.each(function() {\n\t\t\tvar self = jQuery( this ),\n\t\t\t\tcontents = self.contents();\n\n\t\t\tif ( contents.length ) {\n\t\t\t\tcontents.wrapAll( html );\n\n\t\t\t} else {\n\t\t\t\tself.append( html );\n\t\t\t}\n\t\t});\n\t},\n\n\twrap: function( html ) {\n\t\tvar isFunction = jQuery.isFunction( html );\n\n\t\treturn this.each(function( i ) {\n\t\t\tjQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );\n\t\t});\n\t},\n\n\tunwrap: function() {\n\t\treturn this.parent().each(function() {\n\t\t\tif ( !jQuery.nodeName( this, \"body\" ) ) {\n\t\t\t\tjQuery( this ).replaceWith( this.childNodes );\n\t\t\t}\n\t\t}).end();\n\t}\n});\n\n\njQuery.expr.filters.hidden = function( elem ) {\n\t// Support: Opera <= 12.12\n\t// Opera reports offsetWidths and offsetHeights less than zero on some elements\n\treturn elem.offsetWidth <= 0 && elem.offsetHeight <= 0;\n};\njQuery.expr.filters.visible = function( elem ) {\n\treturn !jQuery.expr.filters.hidden( elem );\n};\n\n\n\n\nvar r20 = /%20/g,\n\trbracket = /\\[\\]$/,\n\trCRLF = /\\r?\\n/g,\n\trsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,\n\trsubmittable = /^(?:input|select|textarea|keygen)/i;\n\nfunction buildParams( prefix, obj, traditional, add ) {\n\tvar name;\n\n\tif ( jQuery.isArray( obj ) ) {\n\t\t// Serialize array item.\n\t\tjQuery.each( obj, function( i, v ) {\n\t\t\tif ( traditional || rbracket.test( prefix ) ) {\n\t\t\t\t// Treat each array item as a scalar.\n\t\t\t\tadd( prefix, v );\n\n\t\t\t} else {\n\t\t\t\t// Item is non-scalar (array or object), encode its numeric index.\n\t\t\t\tbuildParams( prefix + \"[\" + ( typeof v === \"object\" ? i : \"\" ) + \"]\", v, traditional, add );\n\t\t\t}\n\t\t});\n\n\t} else if ( !traditional && jQuery.type( obj ) === \"object\" ) {\n\t\t// Serialize object item.\n\t\tfor ( name in obj ) {\n\t\t\tbuildParams( prefix + \"[\" + name + \"]\", obj[ name ], traditional, add );\n\t\t}\n\n\t} else {\n\t\t// Serialize scalar item.\n\t\tadd( prefix, obj );\n\t}\n}\n\n// Serialize an array of form elements or a set of\n// key/values into a query string\njQuery.param = function( a, traditional ) {\n\tvar prefix,\n\t\ts = [],\n\t\tadd = function( key, value ) {\n\t\t\t// If value is a function, invoke it and return its value\n\t\t\tvalue = jQuery.isFunction( value ) ? value() : ( value == null ? \"\" : value );\n\t\t\ts[ s.length ] = encodeURIComponent( key ) + \"=\" + encodeURIComponent( value );\n\t\t};\n\n\t// Set traditional to true for jQuery <= 1.3.2 behavior.\n\tif ( traditional === undefined ) {\n\t\ttraditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;\n\t}\n\n\t// If an array was passed in, assume that it is an array of form elements.\n\tif ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {\n\t\t// Serialize the form elements\n\t\tjQuery.each( a, function() {\n\t\t\tadd( this.name, this.value );\n\t\t});\n\n\t} else {\n\t\t// If traditional, encode the \"old\" way (the way 1.3.2 or older\n\t\t// did it), otherwise encode params recursively.\n\t\tfor ( prefix in a ) {\n\t\t\tbuildParams( prefix, a[ prefix ], traditional, add );\n\t\t}\n\t}\n\n\t// Return the resulting serialization\n\treturn s.join( \"&\" ).replace( r20, \"+\" );\n};\n\njQuery.fn.extend({\n\tserialize: function() {\n\t\treturn jQuery.param( this.serializeArray() );\n\t},\n\tserializeArray: function() {\n\t\treturn this.map(function() {\n\t\t\t// Can add propHook for \"elements\" to filter or add form elements\n\t\t\tvar elements = jQuery.prop( this, \"elements\" );\n\t\t\treturn elements ? jQuery.makeArray( elements ) : this;\n\t\t})\n\t\t.filter(function() {\n\t\t\tvar type = this.type;\n\n\t\t\t// Use .is( \":disabled\" ) so that fieldset[disabled] works\n\t\t\treturn this.name && !jQuery( this ).is( \":disabled\" ) &&\n\t\t\t\trsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&\n\t\t\t\t( this.checked || !rcheckableType.test( type ) );\n\t\t})\n\t\t.map(function( i, elem ) {\n\t\t\tvar val = jQuery( this ).val();\n\n\t\t\treturn val == null ?\n\t\t\t\tnull :\n\t\t\t\tjQuery.isArray( val ) ?\n\t\t\t\t\tjQuery.map( val, function( val ) {\n\t\t\t\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t\t\t\t}) :\n\t\t\t\t\t{ name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t}).get();\n\t}\n});\n\n\njQuery.ajaxSettings.xhr = function() {\n\ttry {\n\t\treturn new XMLHttpRequest();\n\t} catch( e ) {}\n};\n\nvar xhrId = 0,\n\txhrCallbacks = {},\n\txhrSuccessStatus = {\n\t\t// file protocol always yields status code 0, assume 200\n\t\t0: 200,\n\t\t// Support: IE9\n\t\t// #1450: sometimes IE returns 1223 when it should be 204\n\t\t1223: 204\n\t},\n\txhrSupported = jQuery.ajaxSettings.xhr();\n\n// Support: IE9\n// Open requests must be manually aborted on unload (#5280)\n// See https://support.microsoft.com/kb/2856746 for more info\nif ( window.attachEvent ) {\n\twindow.attachEvent( \"onunload\", function() {\n\t\tfor ( var key in xhrCallbacks ) {\n\t\t\txhrCallbacks[ key ]();\n\t\t}\n\t});\n}\n\nsupport.cors = !!xhrSupported && ( \"withCredentials\" in xhrSupported );\nsupport.ajax = xhrSupported = !!xhrSupported;\n\njQuery.ajaxTransport(function( options ) {\n\tvar callback;\n\n\t// Cross domain only allowed if supported through XMLHttpRequest\n\tif ( support.cors || xhrSupported && !options.crossDomain ) {\n\t\treturn {\n\t\t\tsend: function( headers, complete ) {\n\t\t\t\tvar i,\n\t\t\t\t\txhr = options.xhr(),\n\t\t\t\t\tid = ++xhrId;\n\n\t\t\t\txhr.open( options.type, options.url, options.async, options.username, options.password );\n\n\t\t\t\t// Apply custom fields if provided\n\t\t\t\tif ( options.xhrFields ) {\n\t\t\t\t\tfor ( i in options.xhrFields ) {\n\t\t\t\t\t\txhr[ i ] = options.xhrFields[ i ];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Override mime type if needed\n\t\t\t\tif ( options.mimeType && xhr.overrideMimeType ) {\n\t\t\t\t\txhr.overrideMimeType( options.mimeType );\n\t\t\t\t}\n\n\t\t\t\t// X-Requested-With header\n\t\t\t\t// For cross-domain requests, seeing as conditions for a preflight are\n\t\t\t\t// akin to a jigsaw puzzle, we simply never set it to be sure.\n\t\t\t\t// (it can always be set on a per-request basis or even using ajaxSetup)\n\t\t\t\t// For same-domain requests, won't change header if already provided.\n\t\t\t\tif ( !options.crossDomain && !headers[\"X-Requested-With\"] ) {\n\t\t\t\t\theaders[\"X-Requested-With\"] = \"XMLHttpRequest\";\n\t\t\t\t}\n\n\t\t\t\t// Set headers\n\t\t\t\tfor ( i in headers ) {\n\t\t\t\t\txhr.setRequestHeader( i, headers[ i ] );\n\t\t\t\t}\n\n\t\t\t\t// Callback\n\t\t\t\tcallback = function( type ) {\n\t\t\t\t\treturn function() {\n\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\tdelete xhrCallbacks[ id ];\n\t\t\t\t\t\t\tcallback = xhr.onload = xhr.onerror = null;\n\n\t\t\t\t\t\t\tif ( type === \"abort\" ) {\n\t\t\t\t\t\t\t\txhr.abort();\n\t\t\t\t\t\t\t} else if ( type === \"error\" ) {\n\t\t\t\t\t\t\t\tcomplete(\n\t\t\t\t\t\t\t\t\t// file: protocol always yields status 0; see #8605, #14207\n\t\t\t\t\t\t\t\t\txhr.status,\n\t\t\t\t\t\t\t\t\txhr.statusText\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcomplete(\n\t\t\t\t\t\t\t\t\txhrSuccessStatus[ xhr.status ] || xhr.status,\n\t\t\t\t\t\t\t\t\txhr.statusText,\n\t\t\t\t\t\t\t\t\t// Support: IE9\n\t\t\t\t\t\t\t\t\t// Accessing binary-data responseText throws an exception\n\t\t\t\t\t\t\t\t\t// (#11426)\n\t\t\t\t\t\t\t\t\ttypeof xhr.responseText === \"string\" ? {\n\t\t\t\t\t\t\t\t\t\ttext: xhr.responseText\n\t\t\t\t\t\t\t\t\t} : undefined,\n\t\t\t\t\t\t\t\t\txhr.getAllResponseHeaders()\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t};\n\n\t\t\t\t// Listen to events\n\t\t\t\txhr.onload = callback();\n\t\t\t\txhr.onerror = callback(\"error\");\n\n\t\t\t\t// Create the abort callback\n\t\t\t\tcallback = xhrCallbacks[ id ] = callback(\"abort\");\n\n\t\t\t\ttry {\n\t\t\t\t\t// Do send the request (this may raise an exception)\n\t\t\t\t\txhr.send( options.hasContent && options.data || null );\n\t\t\t\t} catch ( e ) {\n\t\t\t\t\t// #14683: Only rethrow if this hasn't been notified as an error yet\n\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n});\n\n\n\n\n// Install script dataType\njQuery.ajaxSetup({\n\taccepts: {\n\t\tscript: \"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript\"\n\t},\n\tcontents: {\n\t\tscript: /(?:java|ecma)script/\n\t},\n\tconverters: {\n\t\t\"text script\": function( text ) {\n\t\t\tjQuery.globalEval( text );\n\t\t\treturn text;\n\t\t}\n\t}\n});\n\n// Handle cache's special case and crossDomain\njQuery.ajaxPrefilter( \"script\", function( s ) {\n\tif ( s.cache === undefined ) {\n\t\ts.cache = false;\n\t}\n\tif ( s.crossDomain ) {\n\t\ts.type = \"GET\";\n\t}\n});\n\n// Bind script tag hack transport\njQuery.ajaxTransport( \"script\", function( s ) {\n\t// This transport only deals with cross domain requests\n\tif ( s.crossDomain ) {\n\t\tvar script, callback;\n\t\treturn {\n\t\t\tsend: function( _, complete ) {\n\t\t\t\tscript = jQuery(\"<script>\").prop({\n\t\t\t\t\tasync: true,\n\t\t\t\t\tcharset: s.scriptCharset,\n\t\t\t\t\tsrc: s.url\n\t\t\t\t}).on(\n\t\t\t\t\t\"load error\",\n\t\t\t\t\tcallback = function( evt ) {\n\t\t\t\t\t\tscript.remove();\n\t\t\t\t\t\tcallback = null;\n\t\t\t\t\t\tif ( evt ) {\n\t\t\t\t\t\t\tcomplete( evt.type === \"error\" ? 404 : 200, evt.type );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\tdocument.head.appendChild( script[ 0 ] );\n\t\t\t},\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n});\n\n\n\n\nvar oldCallbacks = [],\n\trjsonp = /(=)\\?(?=&|$)|\\?\\?/;\n\n// Default jsonp settings\njQuery.ajaxSetup({\n\tjsonp: \"callback\",\n\tjsonpCallback: function() {\n\t\tvar callback = oldCallbacks.pop() || ( jQuery.expando + \"_\" + ( nonce++ ) );\n\t\tthis[ callback ] = true;\n\t\treturn callback;\n\t}\n});\n\n// Detect, normalize options and install callbacks for jsonp requests\njQuery.ajaxPrefilter( \"json jsonp\", function( s, originalSettings, jqXHR ) {\n\n\tvar callbackName, overwritten, responseContainer,\n\t\tjsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?\n\t\t\t\"url\" :\n\t\t\ttypeof s.data === \"string\" && !( s.contentType || \"\" ).indexOf(\"application/x-www-form-urlencoded\") && rjsonp.test( s.data ) && \"data\"\n\t\t);\n\n\t// Handle iff the expected data type is \"jsonp\" or we have a parameter to set\n\tif ( jsonProp || s.dataTypes[ 0 ] === \"jsonp\" ) {\n\n\t\t// Get callback name, remembering preexisting value associated with it\n\t\tcallbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?\n\t\t\ts.jsonpCallback() :\n\t\t\ts.jsonpCallback;\n\n\t\t// Insert callback into url or form data\n\t\tif ( jsonProp ) {\n\t\t\ts[ jsonProp ] = s[ jsonProp ].replace( rjsonp, \"$1\" + callbackName );\n\t\t} else if ( s.jsonp !== false ) {\n\t\t\ts.url += ( rquery.test( s.url ) ? \"&\" : \"?\" ) + s.jsonp + \"=\" + callbackName;\n\t\t}\n\n\t\t// Use data converter to retrieve json after script execution\n\t\ts.converters[\"script json\"] = function() {\n\t\t\tif ( !responseContainer ) {\n\t\t\t\tjQuery.error( callbackName + \" was not called\" );\n\t\t\t}\n\t\t\treturn responseContainer[ 0 ];\n\t\t};\n\n\t\t// force json dataType\n\t\ts.dataTypes[ 0 ] = \"json\";\n\n\t\t// Install callback\n\t\toverwritten = window[ callbackName ];\n\t\twindow[ callbackName ] = function() {\n\t\t\tresponseContainer = arguments;\n\t\t};\n\n\t\t// Clean-up function (fires after converters)\n\t\tjqXHR.always(function() {\n\t\t\t// Restore preexisting value\n\t\t\twindow[ callbackName ] = overwritten;\n\n\t\t\t// Save back as free\n\t\t\tif ( s[ callbackName ] ) {\n\t\t\t\t// make sure that re-using the options doesn't screw things around\n\t\t\t\ts.jsonpCallback = originalSettings.jsonpCallback;\n\n\t\t\t\t// save the callback name for future use\n\t\t\t\toldCallbacks.push( callbackName );\n\t\t\t}\n\n\t\t\t// Call if it was a function and we have a response\n\t\t\tif ( responseContainer && jQuery.isFunction( overwritten ) ) {\n\t\t\t\toverwritten( responseContainer[ 0 ] );\n\t\t\t}\n\n\t\t\tresponseContainer = overwritten = undefined;\n\t\t});\n\n\t\t// Delegate to script\n\t\treturn \"script\";\n\t}\n});\n\n\n\n\n// data: string of html\n// context (optional): If specified, the fragment will be created in this context, defaults to document\n// keepScripts (optional): If true, will include scripts passed in the html string\njQuery.parseHTML = function( data, context, keepScripts ) {\n\tif ( !data || typeof data !== \"string\" ) {\n\t\treturn null;\n\t}\n\tif ( typeof context === \"boolean\" ) {\n\t\tkeepScripts = context;\n\t\tcontext = false;\n\t}\n\tcontext = context || document;\n\n\tvar parsed = rsingleTag.exec( data ),\n\t\tscripts = !keepScripts && [];\n\n\t// Single tag\n\tif ( parsed ) {\n\t\treturn [ context.createElement( parsed[1] ) ];\n\t}\n\n\tparsed = jQuery.buildFragment( [ data ], context, scripts );\n\n\tif ( scripts && scripts.length ) {\n\t\tjQuery( scripts ).remove();\n\t}\n\n\treturn jQuery.merge( [], parsed.childNodes );\n};\n\n\n// Keep a copy of the old load method\nvar _load = jQuery.fn.load;\n\n/**\n * Load a url into a page\n */\njQuery.fn.load = function( url, params, callback ) {\n\tif ( typeof url !== \"string\" && _load ) {\n\t\treturn _load.apply( this, arguments );\n\t}\n\n\tvar selector, type, response,\n\t\tself = this,\n\t\toff = url.indexOf(\" \");\n\n\tif ( off >= 0 ) {\n\t\tselector = jQuery.trim( url.slice( off ) );\n\t\turl = url.slice( 0, off );\n\t}\n\n\t// If it's a function\n\tif ( jQuery.isFunction( params ) ) {\n\n\t\t// We assume that it's the callback\n\t\tcallback = params;\n\t\tparams = undefined;\n\n\t// Otherwise, build a param string\n\t} else if ( params && typeof params === \"object\" ) {\n\t\ttype = \"POST\";\n\t}\n\n\t// If we have elements to modify, make the request\n\tif ( self.length > 0 ) {\n\t\tjQuery.ajax({\n\t\t\turl: url,\n\n\t\t\t// if \"type\" variable is undefined, then \"GET\" method will be used\n\t\t\ttype: type,\n\t\t\tdataType: \"html\",\n\t\t\tdata: params\n\t\t}).done(function( responseText ) {\n\n\t\t\t// Save response for use in complete callback\n\t\t\tresponse = arguments;\n\n\t\t\tself.html( selector ?\n\n\t\t\t\t// If a selector was specified, locate the right elements in a dummy div\n\t\t\t\t// Exclude scripts to avoid IE 'Permission Denied' errors\n\t\t\t\tjQuery(\"<div>\").append( jQuery.parseHTML( responseText ) ).find( selector ) :\n\n\t\t\t\t// Otherwise use the full result\n\t\t\t\tresponseText );\n\n\t\t}).complete( callback && function( jqXHR, status ) {\n\t\t\tself.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );\n\t\t});\n\t}\n\n\treturn this;\n};\n\n\n\n\n// Attach a bunch of functions for handling common AJAX events\njQuery.each( [ \"ajaxStart\", \"ajaxStop\", \"ajaxComplete\", \"ajaxError\", \"ajaxSuccess\", \"ajaxSend\" ], function( i, type ) {\n\tjQuery.fn[ type ] = function( fn ) {\n\t\treturn this.on( type, fn );\n\t};\n});\n\n\n\n\njQuery.expr.filters.animated = function( elem ) {\n\treturn jQuery.grep(jQuery.timers, function( fn ) {\n\t\treturn elem === fn.elem;\n\t}).length;\n};\n\n\n\n\nvar docElem = window.document.documentElement;\n\n/**\n * Gets a window from an element\n */\nfunction getWindow( elem ) {\n\treturn jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;\n}\n\njQuery.offset = {\n\tsetOffset: function( elem, options, i ) {\n\t\tvar curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,\n\t\t\tposition = jQuery.css( elem, \"position\" ),\n\t\t\tcurElem = jQuery( elem ),\n\t\t\tprops = {};\n\n\t\t// Set position first, in-case top/left are set even on static elem\n\t\tif ( position === \"static\" ) {\n\t\t\telem.style.position = \"relative\";\n\t\t}\n\n\t\tcurOffset = curElem.offset();\n\t\tcurCSSTop = jQuery.css( elem, \"top\" );\n\t\tcurCSSLeft = jQuery.css( elem, \"left\" );\n\t\tcalculatePosition = ( position === \"absolute\" || position === \"fixed\" ) &&\n\t\t\t( curCSSTop + curCSSLeft ).indexOf(\"auto\") > -1;\n\n\t\t// Need to be able to calculate position if either\n\t\t// top or left is auto and position is either absolute or fixed\n\t\tif ( calculatePosition ) {\n\t\t\tcurPosition = curElem.position();\n\t\t\tcurTop = curPosition.top;\n\t\t\tcurLeft = curPosition.left;\n\n\t\t} else {\n\t\t\tcurTop = parseFloat( curCSSTop ) || 0;\n\t\t\tcurLeft = parseFloat( curCSSLeft ) || 0;\n\t\t}\n\n\t\tif ( jQuery.isFunction( options ) ) {\n\t\t\toptions = options.call( elem, i, curOffset );\n\t\t}\n\n\t\tif ( options.top != null ) {\n\t\t\tprops.top = ( options.top - curOffset.top ) + curTop;\n\t\t}\n\t\tif ( options.left != null ) {\n\t\t\tprops.left = ( options.left - curOffset.left ) + curLeft;\n\t\t}\n\n\t\tif ( \"using\" in options ) {\n\t\t\toptions.using.call( elem, props );\n\n\t\t} else {\n\t\t\tcurElem.css( props );\n\t\t}\n\t}\n};\n\njQuery.fn.extend({\n\toffset: function( options ) {\n\t\tif ( arguments.length ) {\n\t\t\treturn options === undefined ?\n\t\t\t\tthis :\n\t\t\t\tthis.each(function( i ) {\n\t\t\t\t\tjQuery.offset.setOffset( this, options, i );\n\t\t\t\t});\n\t\t}\n\n\t\tvar docElem, win,\n\t\t\telem = this[ 0 ],\n\t\t\tbox = { top: 0, left: 0 },\n\t\t\tdoc = elem && elem.ownerDocument;\n\n\t\tif ( !doc ) {\n\t\t\treturn;\n\t\t}\n\n\t\tdocElem = doc.documentElement;\n\n\t\t// Make sure it's not a disconnected DOM node\n\t\tif ( !jQuery.contains( docElem, elem ) ) {\n\t\t\treturn box;\n\t\t}\n\n\t\t// Support: BlackBerry 5, iOS 3 (original iPhone)\n\t\t// If we don't have gBCR, just use 0,0 rather than error\n\t\tif ( typeof elem.getBoundingClientRect !== strundefined ) {\n\t\t\tbox = elem.getBoundingClientRect();\n\t\t}\n\t\twin = getWindow( doc );\n\t\treturn {\n\t\t\ttop: box.top + win.pageYOffset - docElem.clientTop,\n\t\t\tleft: box.left + win.pageXOffset - docElem.clientLeft\n\t\t};\n\t},\n\n\tposition: function() {\n\t\tif ( !this[ 0 ] ) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar offsetParent, offset,\n\t\t\telem = this[ 0 ],\n\t\t\tparentOffset = { top: 0, left: 0 };\n\n\t\t// Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is its only offset parent\n\t\tif ( jQuery.css( elem, \"position\" ) === \"fixed\" ) {\n\t\t\t// Assume getBoundingClientRect is there when computed position is fixed\n\t\t\toffset = elem.getBoundingClientRect();\n\n\t\t} else {\n\t\t\t// Get *real* offsetParent\n\t\t\toffsetParent = this.offsetParent();\n\n\t\t\t// Get correct offsets\n\t\t\toffset = this.offset();\n\t\t\tif ( !jQuery.nodeName( offsetParent[ 0 ], \"html\" ) ) {\n\t\t\t\tparentOffset = offsetParent.offset();\n\t\t\t}\n\n\t\t\t// Add offsetParent borders\n\t\t\tparentOffset.top += jQuery.css( offsetParent[ 0 ], \"borderTopWidth\", true );\n\t\t\tparentOffset.left += jQuery.css( offsetParent[ 0 ], \"borderLeftWidth\", true );\n\t\t}\n\n\t\t// Subtract parent offsets and element margins\n\t\treturn {\n\t\t\ttop: offset.top - parentOffset.top - jQuery.css( elem, \"marginTop\", true ),\n\t\t\tleft: offset.left - parentOffset.left - jQuery.css( elem, \"marginLeft\", true )\n\t\t};\n\t},\n\n\toffsetParent: function() {\n\t\treturn this.map(function() {\n\t\t\tvar offsetParent = this.offsetParent || docElem;\n\n\t\t\twhile ( offsetParent && ( !jQuery.nodeName( offsetParent, \"html\" ) && jQuery.css( offsetParent, \"position\" ) === \"static\" ) ) {\n\t\t\t\toffsetParent = offsetParent.offsetParent;\n\t\t\t}\n\n\t\t\treturn offsetParent || docElem;\n\t\t});\n\t}\n});\n\n// Create scrollLeft and scrollTop methods\njQuery.each( { scrollLeft: \"pageXOffset\", scrollTop: \"pageYOffset\" }, function( method, prop ) {\n\tvar top = \"pageYOffset\" === prop;\n\n\tjQuery.fn[ method ] = function( val ) {\n\t\treturn access( this, function( elem, method, val ) {\n\t\t\tvar win = getWindow( elem );\n\n\t\t\tif ( val === undefined ) {\n\t\t\t\treturn win ? win[ prop ] : elem[ method ];\n\t\t\t}\n\n\t\t\tif ( win ) {\n\t\t\t\twin.scrollTo(\n\t\t\t\t\t!top ? val : window.pageXOffset,\n\t\t\t\t\ttop ? val : window.pageYOffset\n\t\t\t\t);\n\n\t\t\t} else {\n\t\t\t\telem[ method ] = val;\n\t\t\t}\n\t\t}, method, val, arguments.length, null );\n\t};\n});\n\n// Support: Safari<7+, Chrome<37+\n// Add the top/left cssHooks using jQuery.fn.position\n// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084\n// Blink bug: https://code.google.com/p/chromium/issues/detail?id=229280\n// getComputedStyle returns percent when specified for top/left/bottom/right;\n// rather than make the css module depend on the offset module, just check for it here\njQuery.each( [ \"top\", \"left\" ], function( i, prop ) {\n\tjQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,\n\t\tfunction( elem, computed ) {\n\t\t\tif ( computed ) {\n\t\t\t\tcomputed = curCSS( elem, prop );\n\t\t\t\t// If curCSS returns percentage, fallback to offset\n\t\t\t\treturn rnumnonpx.test( computed ) ?\n\t\t\t\t\tjQuery( elem ).position()[ prop ] + \"px\" :\n\t\t\t\t\tcomputed;\n\t\t\t}\n\t\t}\n\t);\n});\n\n\n// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods\njQuery.each( { Height: \"height\", Width: \"width\" }, function( name, type ) {\n\tjQuery.each( { padding: \"inner\" + name, content: type, \"\": \"outer\" + name }, function( defaultExtra, funcName ) {\n\t\t// Margin is only for outerHeight, outerWidth\n\t\tjQuery.fn[ funcName ] = function( margin, value ) {\n\t\t\tvar chainable = arguments.length && ( defaultExtra || typeof margin !== \"boolean\" ),\n\t\t\t\textra = defaultExtra || ( margin === true || value === true ? \"margin\" : \"border\" );\n\n\t\t\treturn access( this, function( elem, type, value ) {\n\t\t\t\tvar doc;\n\n\t\t\t\tif ( jQuery.isWindow( elem ) ) {\n\t\t\t\t\t// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there\n\t\t\t\t\t// isn't a whole lot we can do. See pull request at this URL for discussion:\n\t\t\t\t\t// https://github.com/jquery/jquery/pull/764\n\t\t\t\t\treturn elem.document.documentElement[ \"client\" + name ];\n\t\t\t\t}\n\n\t\t\t\t// Get document width or height\n\t\t\t\tif ( elem.nodeType === 9 ) {\n\t\t\t\t\tdoc = elem.documentElement;\n\n\t\t\t\t\t// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],\n\t\t\t\t\t// whichever is greatest\n\t\t\t\t\treturn Math.max(\n\t\t\t\t\t\telem.body[ \"scroll\" + name ], doc[ \"scroll\" + name ],\n\t\t\t\t\t\telem.body[ \"offset\" + name ], doc[ \"offset\" + name ],\n\t\t\t\t\t\tdoc[ \"client\" + name ]\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\treturn value === undefined ?\n\t\t\t\t\t// Get width or height on the element, requesting but not forcing parseFloat\n\t\t\t\t\tjQuery.css( elem, type, extra ) :\n\n\t\t\t\t\t// Set width or height on the element\n\t\t\t\t\tjQuery.style( elem, type, value, extra );\n\t\t\t}, type, chainable ? margin : undefined, chainable, null );\n\t\t};\n\t});\n});\n\n\n// The number of elements contained in the matched element set\njQuery.fn.size = function() {\n\treturn this.length;\n};\n\njQuery.fn.andSelf = jQuery.fn.addBack;\n\n\n\n\n// Register as a named AMD module, since jQuery can be concatenated with other\n// files that may use define, but not via a proper concatenation script that\n// understands anonymous AMD modules. A named AMD is safest and most robust\n// way to register. Lowercase jquery is used because AMD module names are\n// derived from file names, and jQuery is normally delivered in a lowercase\n// file name. Do this after creating the global so that if an AMD module wants\n// to call noConflict to hide this version of jQuery, it will work.\n\n// Note that for maximum portability, libraries that are not jQuery should\n// declare themselves as anonymous modules, and avoid setting a global if an\n// AMD loader is present. jQuery is a special case. For more information, see\n// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon\n\nif ( typeof define === \"function\" && define.amd ) {\n\tdefine( \"jquery\", [], function() {\n\t\treturn jQuery;\n\t});\n}\n\n\n\n\nvar\n\t// Map over jQuery in case of overwrite\n\t_jQuery = window.jQuery,\n\n\t// Map over the $ in case of overwrite\n\t_$ = window.$;\n\njQuery.noConflict = function( deep ) {\n\tif ( window.$ === jQuery ) {\n\t\twindow.$ = _$;\n\t}\n\n\tif ( deep && window.jQuery === jQuery ) {\n\t\twindow.jQuery = _jQuery;\n\t}\n\n\treturn jQuery;\n};\n\n// Expose jQuery and $ identifiers, even in AMD\n// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)\n// and CommonJS for browser emulators (#13566)\nif ( typeof noGlobal === strundefined ) {\n\twindow.jQuery = window.$ = jQuery;\n}\n\n\n\n\nreturn jQuery;\n\n}));"
      },
      "language": "javascript",
      "lists": {
        "summaries": "(function(head, req) {\n  var List, Mustache, ddoc;\n  ddoc = this;\n  Mustache = require(\"lib/mustache\");\n  List = require(\"vendor/couchapp/lib/list\");\n  return provides(\"html\", function() {\n    var key, report, row, stash, value;\n    report = {};\n    stash = {\n      title: \"KiwiPrints Summaries\",\n      report: report,\n      test: JSON.stringify(report),\n      stringify: function() {\n        return function(object, render) {\n          return \"pow: \" + JSON.stringify(render(object));\n        };\n      }\n    };\n    while ((row = getRow())) {\n      value = row.value;\n      key = row.key;\n      stash[key] = value;\n      if (key === 'FebruaryBiLateral') {\n        report.FebruaryBiLateral = value;\n        report[\"FebruaryBiLateral\"] = value;\n      } else if (key === 'FebruaryProvidedEpilationConsultation') {\n        report.FebruaryProvidedEpilationConsultation = value;\n      } else if (key === 'FebruaryRefusedSurgery') {\n        report.FebruaryRefusedSurgery = value;\n      } else if (key === 'FebruarySurgeries') {\n        report.FebruarySurgeries = value;\n      } else if (key === 'JanuaryBiLateral') {\n        report.JanuaryBiLateral = value;\n      } else if (key === 'JanuaryLateral') {\n        report.JanuaryLateral = value;\n      } else if (key === 'JanuaryRefusedSurgery') {\n        report.JanuaryRefusedSurgery = value;\n      } else if (key === 'JanuarySurgeries') {\n        report.JanuarySurgeries = value;\n      }\n    }\n    return Mustache.to_html(ddoc.templates.summaries, stash, ddoc.templates.partials, List.send);\n  });\n});",
        "table": "(function(head, req) {\n  var List, Mustache, ddoc;\n  ddoc = this;\n  Mustache = require(\"lib/mustache\");\n  List = require(\"vendor/couchapp/lib/list\");\n  return provides(\"html\", function() {\n    var gpsCities, gpsCitiesString, stash;\n    gpsCities = [];\n    gpsCitiesString = [];\n    stash = {\n      title: \"KiwiPrints Reports\",\n      gpsCities: gpsCities,\n      gpsCitiesString: gpsCitiesString,\n      records: List.withRows(function(row) {\n        var coords, gpsCity, gpsCityString, key, latitude, longitude, record, timestamp;\n        record = row.value;\n        key = row.key;\n        if (typeof record.currentPosition !== 'undefined') {\n          timestamp = new Date(record.currentPosition.timestamp);\n          coords = record.currentPosition.coords;\n          latitude = record.currentPosition.coords.latitude;\n          longitude = record.currentPosition.coords.longitude;\n          gpsCity = {\n            id: record._id,\n            latitude: latitude,\n            longitude: longitude\n          };\n          gpsCities.push(gpsCity);\n          gpsCityString = JSON.stringify(gpsCity);\n          gpsCitiesString.push(gpsCityString);\n        }\n        return {\n          id: record._id,\n          clientId: record.clientId,\n          question: record.question,\n          createdAt: record.createdAt,\n          lastModifiedAt: record.lastModifiedAt,\n          Gender: record.Gender,\n          DOB: record.DOB,\n          Surgeon: record.Surgeon,\n          registrationLocation: record.registrationLocation,\n          Surgeon: record.Surgeon,\n          user: record.user,\n          serviceLocation: record.serviceLocation,\n          DateTime: record.DateTime,\n          RefusedSurgeryL: record.RefusedSurgeryL,\n          ProvidedEpilationConsultationL: record.ProvidedEpilationConsultationL,\n          TypeofOperationL: record.TypeofOperationL,\n          ClampusedL: record.ClampusedL,\n          SutureTypeL: record.SutureTypeL,\n          ExcessbleedingL: record.ExcessbleedingL,\n          MarginfragmantseveredL: record.MarginfragmantseveredL,\n          GlobePunctureL: record.GlobePunctureL,\n          ComplicationsReferralL: record.ComplicationsReferralL,\n          ReferralHospitalL: record.ReferralHospitalL,\n          RefusedSurgeryR: record.RefusedSurgeryR,\n          ProvidedEpilationConsultationR: record.ProvidedEpilationConsultationR,\n          TypeofOperationR: record.TypeofOperationR,\n          ClampusedR: record.ClampusedR,\n          SutureTypeR: record.SutureTypeR,\n          ExcessbleedingR: record.ExcessbleedingR,\n          MarginfragmantseveredR: record.MarginfragmantseveredR,\n          GlobePunctureR: record.GlobePunctureR,\n          ComplicationsReferralR: record.ComplicationsReferralR,\n          ReferralHospitalR: record.ReferralHospitalR,\n          azithromycinR: record.azithromycinR,\n          tetracyclineEyeOintmentR: record.tetracyclineEyeOintmentR,\n          complete: record.complete,\n          savedBy: record.savedBy,\n          currentPosition: record.currentPosition,\n          timestamp: timestamp,\n          coords: coords,\n          latitude: latitude,\n          longitude: longitude,\n          currentPositionString: JSON.stringify(record.currentPosition)\n        };\n      })\n    };\n    return Mustache.to_html(ddoc.templates.index, stash, ddoc.templates.partials, List.send);\n  });\n});",
        "csv": "(function(head, req) {\n  headers = [\"_id\",\"clientId\",\"Gender\",\"DOB\",\"Surgeon\",\"question\",\"createdAt\",\"lastModifiedAt\",\"registrationLocation\",\"currentPosition\", \"latitude\",\"longitude\",\"RefusedSurgeryR\",\"RefusedSurgeryL\",\"ProvidedEpilationConsultationL\",\"ProvidedEpilationConsultationR\", \"TypeofOperationL\",\"SutureTypeL\",\"ClampusedL\",\"ExcessbleedingL\",\"MarginfragmantseveredL\",\"GlobePunctureL \",\"TypeofOperationR\",\" SutureTypeR\",\"ClampusedR\",\"ExcessbleedingR\",\"MarginfragmantseveredR\",\"GlobePunctureR\",\"tetracyclineEyeOintmentL\",\"tetracyclineEyeOintmentR\", \"azithromycinL\",\"azithromycinR\",\"ComplicationsReferralL\",\"ComplicationsReferralR\",\"complete\",\"savedBy\",\"user\"];\n  var row, sep = '\\n', headerSent = false, startedOutput = false;\n  var gpsCities = [];\n  var gpsCitiesObject = {};\n  start({\"headers\":{\"Content-Type\" : \"text/csv; charset=utf-8\"}});\n  //send(headers + '\"\\n');\n  send('\"' + headers.join('\",\"') + '\"\\n');\n  assignValue = function(row, header) {\n    var id = row.value[headers[0]];\n    if (row.value[headers[header]]) {\n      if (startedOutput) send(\",\");\n      var value = row.value[headers[header]];\n      if (typeof(value) == \"object\") {\n        if ((headers[header]) == \"currentPosition\") {\n          var latitude = value.coords.latitude\n          var longitude = value.coords.longitude\n          gpsCity = {};\n          gpsCity.id = id\n          gpsCity.latitude = latitude\n          gpsCity.longitude = longitude\n          gpsCitiesObject[id] = gpsCity;\n        }\n        value = JSON.stringify(value);\n      }\n      if (typeof(value) == \"string\") value = value.replace(/\\\"/g, '\"\"');\n      send(\"\\\"\" + value + \"\\\"\");\n    } else {\n      if (startedOutput) {send(\",\");\n        if ((headers[header]) == \"latitude\") {\n          if (gpsCitiesObject.hasOwnProperty(id)) {\n            var gpsCity = gpsCitiesObject[id];\n            latitude = gpsCity.latitude\n            value = JSON.stringify(latitude);\n            value = value.replace(/\\\"/g, '\"\"');\n            send(\"\\\"\" + value + \"\\\"\");\n          }\n        } else if ((headers[header]) == \"longitude\") {\n          if (gpsCitiesObject.hasOwnProperty(id)) {\n            var gpsCity = gpsCitiesObject[id];\n            longitude = gpsCity.longitude\n            value = JSON.stringify(longitude);\n            value = value.replace(/\\\"/g, '\"\"');\n            send(\"\\\"\" + value + \"\\\"\");\n          }\n        }\n      }\n    }\n    startedOutput = true;\n    return value;\n  }\n\n  while (row = getRow()) {\n    for (var header in headers) {\n      var value = assignValue(row, header);\n    }\n    startedOutput = false;\n    send('\\n');\n  }\n});"
      },
      "templates": {
        "index": "<!doctype html>\n<head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <title>{{title}}</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"../../css/bootstrap.css\">\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"../../css/index.css\">\n    <script type=\"text/javascript\" src=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyDD91G21jFeq9M0jXTCmkKWjm1P1nulQx4\"/>\n    <script type=\"text/javascript\" src=\"../../js/bootstrap.min.js\"></script>\n    <script type=\"text/javascript\" src=\"../../js/KiwiUtils.js\"></script>\n</head>\n<body>\n\n<div class=\"container\">\n    <div class=\"header\">\n        <!--<ul class=\"nav nav-pills pull-right\">-->\n            <!--<li class=\"active\"><a href=\"#\">Home</a></li>-->\n            <!--&lt;!&ndash;<li><a href=\"#\">About</a></li>&ndash;&gt;-->\n            <!--&lt;!&ndash;<li><a href=\"#\">Contact</a></li>&ndash;&gt;-->\n        <!--</ul>-->\n        <h3 class=\"text-muted\">{{ title }}</h3>\n    </div>\n\n    <div>\n        <table>\n            <thead>\n            <tr>\n                <th>Id</th>\n                <th>PatientID</th>\n                <th>Sex</th>\n                <th>Date of Birth</th>\n                <th>Surgeon</th>\n                <th>Surgery</th>\n                <th>createdAt</th>\n                <th>lastModifiedAt</th>\n                <th>Location</th>\n                <th>Post name</th>\n                <th>Lat/Long</th>\n                <th>Address</th>\n                <th>Surgery Refused L</th>\n                <th>Surgery Refused R</th>\n                <th>Epilation Cosultation L</th>\n                <th>Epilation Cosultation R</th>\n                <th>No. eyes operated</th>\n                <th>Lefteye_surgery</th>\n                <th>Lefteye_suture</th>\n                <th>Lefteye_clamp</th>\n                <th>Lefteye_complications</th>\n                <th>Righteye_surgery</th>\n                <th>Righteye_suture</th>\n                <th>Righteye_clamp</th>\n                <th>Righteye_complications</th>\n                <th>TEO L</th>\n                <th>TEO R</th>\n                <th>Azithromycin L</th>\n                <th>Azithromycin R</th>\n                <th>Recurrence of TT</th>\n                <th>complications_referred to clinic L</th>\n                <th>complications_referred to clinic R</th>\n                <th>Clinic name</th>\n                <th>Continue Monitoring</th>\n                <th>Complete</th>\n                <th>savedBy</th>\n                <th>user</th>\n            </tr>\n            </thead>\n            <tbody>\n            {{#records}}\n                <tr>\n                    <td>{{ id }}</td>\n                    <td>{{ clientId }}</td>\n                    <td>{{ Gender }}</td>\n                    <td>{{ DOB }}</td>\n                    <td>{{ Surgeon }}</td>\n                    <td>{{ question }}</td>\n                    <td>{{ createdAt }}</td>\n                    <td>{{ lastModifiedAt }}</td>\n                    <td>{{ registrationLocation }}</td>\n                    <td>&nbsp</td>\n                    <td>\n                        {{#currentPosition}}\n                        Latitude: {{latitude}}<br/>\n                        Longitude: {{longitude}}<br/>\n                        {{/currentPosition}}\n                    </td>\n                    <td>\n                        <span id=\"city{{id}}\"></span>\n                    </td>\n                    <td>{{ RefusedSurgeryR }}</td>\n                    <td>{{ RefusedSurgeryL }}</td>\n                    <td>{{ ProvidedEpilationConsultationL }}</td>\n                    <td>{{ ProvidedEpilationConsultationR }}</td>\n                    <td>{{#TypeofOperationL}}L{{/TypeofOperationL}}{{#TypeofOperationL}}R{{/TypeofOperationL}}</td>\n                    <td>{{ TypeofOperationL }}</td>\n                    <td>{{ SutureTypeL }}</td>\n                    <td>{{ ClampusedL }}</td>\n                    <td>\n                        {{#ExcessbleedingL}}Excess bleeding &nbsp;{{/ExcessbleedingL}}\n                        {{#MarginfragmantseveredL}}Margin fragmant severed &nbsp;{{/MarginfragmantseveredL}}\n                        {{#GlobePunctureL}}Globe Puncture &nbsp;{{/GlobePunctureL}}\n                    </td>\n                    <td>{{ TypeofOperationR }}</td>\n                    <td>{{ SutureTypeR }}</td>\n                    <td>{{ ClampusedR }}</td>\n                    <td>\n                        {{#ExcessbleedingR}}Excess bleeding &nbsp;{{/ExcessbleedingR}}\n                        {{#MarginfragmantseveredR}}Margin fragmant severed &nbsp;{{/MarginfragmantseveredR}}\n                        {{#GlobePunctureR}}Globe Puncture &nbsp;{{/GlobePunctureR}}\n                    </td>\n                    <td>{{ tetracyclineEyeOintmentL }}</td>\n                    <td>{{ tetracyclineEyeOintmentR }}</td>\n                    <td>{{ azithromycinL }}</td>\n                    <td>{{ azithromycinR }}</td>\n                    <td>&nbsp</td>\n                    <td>{{ ComplicationsReferralL }}</td>\n                    <td>{{ ComplicationsReferralR }}</td>\n                    <td>&nbsp</td>\n                    <td>&nbsp</td>\n                    <td>{{ complete }}</td>\n                    <td>{{ savedBy }}</td>\n                    <td>{{ user }}</td>\n                </tr>\n            {{/records}}\n            </tbody>\n        </table>\n    </div>\n    <div class=\"footer\">\n        <p>♥ from KiwiPrints 2015\n        </p>\n    </div>\n\n</div>\n<script type=\"text/javascript\">\n    window.onload = function(){\n        var gpsArray = [];\n        var gps =  [{{gpsCitiesString}}];\n        gpsArray.push(gps);\n        KiwiUtils.initGPS(gpsArray);\n    }\n</script>\n<script type=\"text/javascript\" src=\"../../js/jquery.min.js\"></script>\n</body>\n</html>",
        "summaries": "<!doctype html>\n<head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <title>{{title}}</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"../../css/bootstrap.css\">\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"../../css/index.css\">\n    <script type=\"text/javascript\" src=\"../../js/jquery.min.js\"></script>\n    <script type=\"text/javascript\" src=\"../../js/bootstrap.min.js\"></script>\n</head>\n<body>\n\n<div class=\"container\">\n    <div class=\"header\">\n        <!--<ul class=\"nav nav-pills pull-right\">-->\n            <!--<li class=\"active\"><a href=\"#\">Home</a></li>-->\n            <!--&lt;!&ndash;<li><a href=\"#\">About</a></li>&ndash;&gt;-->\n            <!--&lt;!&ndash;<li><a href=\"#\">Contact</a></li>&ndash;&gt;-->\n        <!--</ul>-->\n        <h3 class=\"text-muted\">{{ title }}</h3>\n    </div>\n    <div>\n        <table>\n            <thead>\n            <tr>\n                <th>District </th>\n                <th>Post</th>\n                <th>Refusals</th>\n                <th>Consultations on epilations</th>\n                <th>Surgeries</th>\n                <th>Indiv. Registration</th>\n                <th>Female</th>\n                <th>Male</th>\n                <th>No.lateral surgeries</th>\n                <th>No.bi-lateral surgereis</th>\n                <th>BTRP</th>\n                <th>Trabut</th>\n                <th>No.Silk</th>\n                <th>No.Absorbable</th>\n                <th>Clamp used</th>\n                <th>Complications</th>\n                <th>Given Azthromycin</th>\n                <th>Given TEO</th>\n            </tr>\n            </thead>\n            <tbody>\n                <tr>\n                    <td>{{ district }}</td>\n                    <td>Montepuez</td>\n                    <td>{{01RefusedSurgery}}</td>\n                    <td>{{01ProvidedEpilationConsultation}}</td>\n                    <td>{{01Surgeries}}</td>\n                    <td>{{01IndivReg}}</td>\n                    <td>{{01Female}}</td>\n                    <td>{{01Male}}</td>\n                    <td>{{01Lateral}}</td>\n                    <td>{{01BiLateral}}</td>\n                    <td>{{01BTRP}}</td>\n                    <td>{{01Trabut}}</td>\n                    <td>{{01Silk}}</td>\n                    <td>{{01Absorbable}}</td>\n                    <td>{{01Clampused}}</td>\n                    <td>{{01Complications}}</td>\n                    <td>{{01Azithromycin}}</td>\n                    <td>{{01tetracyclineEyeOintment}}</td>\n                </tr>\n                <tr>\n                    <td>{{ district }}</td>\n                    <td>Feb.</td>\n                    <td>{{02RefusedSurgery }}</td>\n                    <td>{{02ProvidedEpilationConsultation }}</td>\n                    <td>{{02Surgeries }}</td>\n                    <td>{{02IndivReg}}</td>\n                    <td>{{02Female }}</td>\n                    <td>{{02Male}}</td>\n                    <td>{{02Lateral }}</td>\n                    <td>{{02BiLateral}}</td>\n                    <td>{{02BTRP}}</td>\n                    <td>{{02Trabut}}</td>\n                    <td>{{02Silk}}</td>\n                    <td>{{02Absorbable}}</td>\n                    <td>{{02Clampused}}</td>\n                    <td>{{02Complications}}</td>\n                    <td>{{02Azithromycin}}</td>\n                    <td>{{02tetracyclineEyeOintment}}</td>\n                </tr>\n                <tr>\n                    <td>{{ district }}</td>\n                    <td>Mar.</td>\n                    <td>{{03RefusedSurgery }}</td>\n                    <td>{{03ProvidedEpilationConsultation }}</td>\n                    <td>{{03Surgeries }}</td>\n                    <td>{{03IndivReg}}</td>\n                    <td>{{03Female }}</td>\n                    <td>{{03Male}}</td>\n                    <td>{{03Lateral }}</td>\n                    <td>{{03BiLateral}}</td>\n                    <td>{{03BTRP}}</td>\n                    <td>{{03Trabut}}</td>\n                    <td>{{03Silk}}</td>\n                    <td>{{03Absorbable}}</td>\n                    <td>{{03Clampused}}</td>\n                    <td>{{03Complications}}</td>\n                    <td>{{03Azithromycin}}</td>\n                    <td>{{03tetracyclineEyeOintment}}</td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n    <div class=\"footer\">\n        <p>♥ from KiwiPrints 2015\n        </p>\n    </div>\n\n\n</div>\n</body>\n</html>"
      },
      "views": {
        "byAllIndicators": {
          "map": "(function(doc) {\n  var month, monthName;\n  if (doc.question === 'Trichiasis Surgery') {\n    if (doc.confirmed !== \"false\") {\n      month = doc.createdAt.split(' ')[0].split('-')[1];\n      monthName = month;\n      if (doc.RefusedSurgeryL === 'true') {\n        emit(monthName + 'RefusedSurgery', 1);\n      }\n      if (doc.RefusedSurgeryR === 'true') {\n        emit(monthName + 'RefusedSurgery', 1);\n      }\n      if (doc.RefusedSurgeryL === null) {\n        emit(monthName + 'RefusedSurgery', 0);\n      }\n      if (doc.RefusedSurgeryR === null) {\n        emit(monthName + 'RefusedSurgery', 0);\n      }\n      if (doc.ProvidedEpilationConsultationL === 'true') {\n        emit(monthName + 'ProvidedEpilationConsultation', 1);\n      }\n      if (doc.ProvidedEpilationConsultationR === 'true') {\n        emit(monthName + 'ProvidedEpilationConsultation', 1);\n      }\n      if (doc.TypeofOperationL === null && doc.TypeofOperationR !== null) {\n        emit(monthName + 'Lateral', 1);\n        emit(monthName + 'Surgeries', 1);\n      }\n      if (doc.TypeofOperationL !== null && doc.TypeofOperationR === null) {\n        emit(monthName + 'Lateral', 1);\n        emit(monthName + 'Surgeries', 1);\n      }\n      if ((doc.TypeofOperationL !== null) && (doc.TypeofOperationR !== null)) {\n        emit(monthName + 'BiLateral', 1);\n        emit(monthName + 'Surgeries', 2);\n      }\n      if (doc.TypeofOperationL === 'BTRP') {\n        emit(monthName + 'BTRP', 1);\n        emit(monthName + 'BTRP-L', 1);\n      }\n      if (doc.TypeofOperationR === 'BTRP') {\n        emit(monthName + 'BTRP', 1);\n        emit(monthName + 'BTRP-R', 1);\n      }\n      if (doc.TypeofOperationL === 'Trabut') {\n        emit(monthName + 'Trabut', 1);\n        emit(monthName + 'Trabut-L', 1);\n      }\n      if (doc.TypeofOperationR === 'Trabut') {\n        emit(monthName + 'Trabut', 1);\n        emit(monthName + 'Trabut-R', 1);\n      }\n      if (doc.SutureTypeL === 'Silk') {\n        emit(monthName + 'Silk', 1);\n        emit(monthName + 'Silk-L', 1);\n      }\n      if (doc.SutureTypeR === 'Silk') {\n        emit(monthName + 'Silk', 1);\n        emit(monthName + 'Silk-R', 1);\n      }\n      if (doc.SutureTypeL === 'Absorbable') {\n        emit(monthName + 'Absorbable', 1);\n        emit(monthName + 'Absorbable-L', 1);\n      }\n      if (doc.SutureTypeR === 'Absorbable') {\n        emit(monthName + 'Absorbable', 1);\n        emit(monthName + 'Absorbable-R', 1);\n      }\n      if (doc.ClampusedL === 'true') {\n        emit(monthName + 'Clampused', 1);\n        emit(monthName + 'Clampused-L', 1);\n      }\n      if (doc.ClampusedR === 'true') {\n        emit(monthName + 'Clampused', 1);\n        emit(monthName + 'Clampused-R', 1);\n      }\n      if (doc.ComplicationsL === 'true') {\n        emit(monthName + 'Complications', 1);\n        emit(monthName + 'Complications-L', 1);\n      }\n      if (doc.ComplicationsR === 'true') {\n        emit(monthName + 'Complications', 1);\n        emit(monthName + 'Complications-R', 1);\n      }\n      if (doc.azithromycinL === 'true') {\n        emit(monthName + 'Azithromycin', 1);\n        emit(monthName + 'Azithromycin-L', 1);\n      }\n      if (doc.azithromycinR === 'true') {\n        emit(monthName + 'Azithromycin', 1);\n        emit(monthName + 'Azithromycin-R', 1);\n      }\n      if (doc.tetracyclineEyeOintmentL === 'true') {\n        emit(monthName + 'tetracyclineEyeOintment', 1);\n        emit(monthName + 'tetracyclineEyeOintment-L', 1);\n      }\n      if (doc.tetracyclineEyeOintmentR === 'true') {\n        emit(monthName + 'tetracyclineEyeOintment', 1);\n        return emit(monthName + 'tetracyclineEyeOintment-R', 1);\n      }\n    }\n  } else if (doc.question === 'Individual Registration') {\n    if (doc.confirmed !== \"false\") {\n      month = doc.createdAt.split(' ')[0].split('-')[1];\n      monthName = month;\n      emit(monthName + doc.Gender, 1);\n      return emit(monthName + 'IndivReg', 1);\n    }\n  }\n});",
          "reduce": "_sum;"
        },
        "byIndividual_SummaryConfirmedNotFalse": {
          "map": "(function(doc) {\n  var month, monthName;\n  if (doc.question === 'Individual Registration') {\n    if (doc.confirmed !== \"false\") {\n      month = doc.createdAt.split(' ')[0].split('-')[1];\n      monthName = '';\n      if (month === '01') {\n        monthName = 'January';\n      } else {\n        monthName = 'February';\n      }\n      return emit(monthName + \" \" + doc.Gender, 1);\n    }\n  }\n});",
          "reduce": "_sum;"
        },
        "byInvidAndTrichiasisJoined": {
          "map": "(function(doc) {\n  if (doc.question === \"Individual Registration\") {\n    return emit([doc._id, 0], doc);\n  } else if (doc.question === \"Trichiasis Surgery\") {\n    return emit([doc.clientId, 1], doc);\n  }\n});"
        },
        "byTrichiasis_MultiConfirmedNotFalse": {
          "map": "(function(doc) {\n  var month, monthName;\n  if (doc.question === 'Trichiasis Surgery') {\n    if (doc.confirmed !== \"false\") {\n      month = doc.createdAt.split(' ')[0].split('-')[1];\n      monthName = '';\n      if (month === '01') {\n        monthName = 'January';\n      } else {\n        monthName = 'February';\n      }\n      if (doc.RefusedSurgeryL === 'true') {\n        emit(monthName + ' RefusedSurgery', 1);\n      }\n      if (doc.TypeofOperationL === 'BTRP') {\n        emit(monthName + ' BTRP', 1);\n        emit(monthName + ' BTRP-L', 1);\n      }\n      if (doc.TypeofOperationR === 'BTRP') {\n        emit(monthName + ' BTRP', 1);\n        emit(monthName + ' BTRP-R', 1);\n      }\n      if (doc.TypeofOperationL === 'Trabut') {\n        emit(monthName + ' Trabut', 1);\n        emit(monthName + ' Trabut-L', 1);\n      }\n      if (doc.TypeofOperationR === 'Trabut') {\n        emit(monthName + ' Trabut', 1);\n        emit(monthName + ' Trabut-R', 1);\n      }\n      if (doc.SutureTypeL === 'Silk') {\n        emit(monthName + ' Silk', 1);\n        emit(monthName + ' Silk-L', 1);\n      }\n      if (doc.SutureTypeR === 'Silk') {\n        emit(monthName + ' Silk', 1);\n        emit(monthName + ' Silk-R', 1);\n      }\n      if (doc.SutureTypeL === 'Absorbable') {\n        emit(monthName + ' Absorbable', 1);\n        emit(monthName + ' Absorbable-L', 1);\n      }\n      if (doc.SutureTypeR === 'Absorbable') {\n        emit(monthName + ' Absorbable', 1);\n        emit(monthName + ' Absorbable-R', 1);\n      }\n      if (doc.ClampusedL === 'true') {\n        emit(monthName + ' Clampused', 1);\n        emit(monthName + ' Clampused-L', 1);\n      }\n      if (doc.ClampusedR === 'true') {\n        emit(monthName + ' Clampused', 1);\n        emit(monthName + ' Clampused-R', 1);\n      }\n      if (doc.ComplicationsL === 'true') {\n        emit(monthName + ' Complications', 1);\n        emit(monthName + ' Complications-L', 1);\n      }\n      if (doc.ComplicationsR === 'true') {\n        emit(monthName + ' Complications', 1);\n        emit(monthName + ' Complications-R', 1);\n      }\n      if (doc.azithromycinL === 'true') {\n        emit(monthName + ' Azithromycin', 1);\n        emit(monthName + ' Azithromycin-L', 1);\n      }\n      if (doc.azithromycinR === 'true') {\n        emit(monthName + ' Azithromycin', 1);\n        emit(monthName + ' Azithromycin-R', 1);\n      }\n      if (doc.tetracyclineEyeOintmentL === 'true') {\n        emit(monthName + ' tetracyclineEyeOintment', 1);\n        emit(monthName + ' tetracyclineEyeOintment-L', 1);\n      }\n      if (doc.tetracyclineEyeOintmentR === 'true') {\n        emit(monthName + ' tetracyclineEyeOintment', 1);\n        return emit(monthName + ' tetracyclineEyeOintment-R', 1);\n      }\n    }\n  }\n});",
          "reduce": "_sum;"
        },
        "byTrichiasis_SummaryConfirmedNotFalse": {
          "map": "(function(doc) {\n  var month, monthName;\n  if (doc.question === 'Trichiasis Surgery') {\n    if (doc.confirmed !== \"false\") {\n      month = doc.createdAt.split(' ')[0].split('-')[1];\n      monthName = '';\n      if (month === '01') {\n        monthName = 'January';\n      } else {\n        monthName = 'February';\n      }\n      if (doc.RefusedSurgeryL === 'true') {\n        emit(monthName + 'RefusedSurgery', 1);\n      }\n      if (doc.RefusedSurgeryR === 'true') {\n        emit(monthName + 'RefusedSurgery', 1);\n      }\n      if (doc.RefusedSurgeryL === null) {\n        emit(monthName + 'RefusedSurgery', 0);\n      }\n      if (doc.RefusedSurgeryR === null) {\n        emit(monthName + 'RefusedSurgery', 0);\n      }\n      if (doc.ProvidedEpilationConsultationL === 'true') {\n        emit(monthName + 'ProvidedEpilationConsultation', 1);\n      }\n      if (doc.ProvidedEpilationConsultationR === 'true') {\n        emit(monthName + 'ProvidedEpilationConsultation', 1);\n      }\n      if ((doc.RefusedSurgeryL === null) && (doc.RefusedSurgeryR === null)) {\n        emit(monthName + 'Surgeries', 1);\n      }\n      if (doc.TypeofOperationL === null && doc.TypeofOperationR !== null) {\n        emit(monthName + 'Lateral', 1);\n      }\n      if (doc.TypeofOperationL !== null && doc.TypeofOperationR === null) {\n        emit(monthName + 'Lateral', 1);\n      }\n      if (doc.TypeofOperationL !== null && doc.TypeofOperationR !== null) {\n        return emit(monthName + 'BiLateral', 1);\n      }\n    }\n  }\n});",
          "reduce": "_sum;"
        }
      },
      "vendor": {
        "couchapp": {
          "lib": {
            "list": "// Helpers for writing server-side _list functions in CouchDB\nexports.withRows = function(fun) {\n var f = function() {\n    var row = getRow();\n    return row && fun(row);\n  };\n  f.iterator = true;\n  return f;\n}\n\nexports.send = function(chunk) {\n  send(chunk + \"\\n\")\n}"
          }
        }
      }
    },
    {
      "views": {
        "byInvidAndTrichiasisJoined": {
          "map": "(function(doc) {\n  if (doc.question === \"Individual Registration\") {\n    return emit([doc._id, 0], doc);\n  } else if (doc.question === \"Trichiasis Surgery\") {\n    return emit([doc.clientId, 1], doc);\n  }\n});"
        },
        "byTrichiasis_MultiConfirmedNotFalse": {
          "map": "(function(doc) {\n  var month, monthName;\n  if (doc.question === 'Trichiasis Surgery') {\n    if (doc.confirmed !== \"false\") {\n      month = doc.createdAt.split(' ')[0].split('-')[1];\n      monthName = '';\n      if (month === '01') {\n        monthName = 'January';\n      } else {\n        monthName = 'February';\n      }\n      if (doc.RefusedSurgeryL === 'true') {\n        emit(monthName + ' RefusedSurgery', 1);\n      }\n      if (doc.TypeofOperationL === 'BTRP') {\n        emit(monthName + ' BTRP', 1);\n        emit(monthName + ' BTRP-L', 1);\n      }\n      if (doc.TypeofOperationR === 'BTRP') {\n        emit(monthName + ' BTRP', 1);\n        emit(monthName + ' BTRP-R', 1);\n      }\n      if (doc.TypeofOperationL === 'Trabut') {\n        emit(monthName + ' Trabut', 1);\n        emit(monthName + ' Trabut-L', 1);\n      }\n      if (doc.TypeofOperationR === 'Trabut') {\n        emit(monthName + ' Trabut', 1);\n        emit(monthName + ' Trabut-R', 1);\n      }\n      if (doc.SutureTypeL === 'Silk') {\n        emit(monthName + ' Silk', 1);\n        emit(monthName + ' Silk-L', 1);\n      }\n      if (doc.SutureTypeR === 'Silk') {\n        emit(monthName + ' Silk', 1);\n        emit(monthName + ' Silk-R', 1);\n      }\n      if (doc.SutureTypeL === 'Absorbable') {\n        emit(monthName + ' Absorbable', 1);\n        emit(monthName + ' Absorbable-L', 1);\n      }\n      if (doc.SutureTypeR === 'Absorbable') {\n        emit(monthName + ' Absorbable', 1);\n        emit(monthName + ' Absorbable-R', 1);\n      }\n      if (doc.ClampusedL === 'true') {\n        emit(monthName + ' Clampused', 1);\n        emit(monthName + ' Clampused-L', 1);\n      }\n      if (doc.ClampusedR === 'true') {\n        emit(monthName + ' Clampused', 1);\n        emit(monthName + ' Clampused-R', 1);\n      }\n      if (doc.ComplicationsL === 'true') {\n        emit(monthName + ' Complications', 1);\n        emit(monthName + ' Complications-L', 1);\n      }\n      if (doc.ComplicationsR === 'true') {\n        emit(monthName + ' Complications', 1);\n        emit(monthName + ' Complications-R', 1);\n      }\n      if (doc.azithromycinL === 'true') {\n        emit(monthName + ' Azithromycin', 1);\n        emit(monthName + ' Azithromycin-L', 1);\n      }\n      if (doc.azithromycinR === 'true') {\n        emit(monthName + ' Azithromycin', 1);\n        emit(monthName + ' Azithromycin-R', 1);\n      }\n      if (doc.tetracyclineEyeOintmentL === 'true') {\n        emit(monthName + ' tetracyclineEyeOintment', 1);\n        emit(monthName + ' tetracyclineEyeOintment-L', 1);\n      }\n      if (doc.tetracyclineEyeOintmentR === 'true') {\n        emit(monthName + ' tetracyclineEyeOintment', 1);\n        return emit(monthName + ' tetracyclineEyeOintment-R', 1);\n      }\n    }\n  }\n});",
          "reduce": "_sum;"
        },
        "byTrichiasis_SummaryConfirmedNotFalse": {
          "reduce": "_sum;",
          "map": "(function(doc) {\n  var month, monthName;\n  if (doc.question === 'Trichiasis Surgery') {\n    if (doc.confirmed !== \"false\") {\n      month = doc.createdAt.split(' ')[0].split('-')[1];\n      monthName = '';\n      if (month === '01') {\n        monthName = 'January';\n      } else {\n        monthName = 'February';\n      }\n      if (doc.RefusedSurgeryL === 'true') {\n        emit(monthName + 'RefusedSurgery', 1);\n      }\n      if (doc.RefusedSurgeryR === 'true') {\n        emit(monthName + 'RefusedSurgery', 1);\n      }\n      if (doc.RefusedSurgeryL === null) {\n        emit(monthName + 'RefusedSurgery', 0);\n      }\n      if (doc.RefusedSurgeryR === null) {\n        emit(monthName + 'RefusedSurgery', 0);\n      }\n      if (doc.ProvidedEpilationConsultationL === 'true') {\n        emit(monthName + 'ProvidedEpilationConsultation', 1);\n      }\n      if (doc.ProvidedEpilationConsultationR === 'true') {\n        emit(monthName + 'ProvidedEpilationConsultation', 1);\n      }\n      if ((doc.RefusedSurgeryL === null) && (doc.RefusedSurgeryR === null)) {\n        emit(monthName + 'Surgeries', 1);\n      }\n      if (doc.TypeofOperationL === null && doc.TypeofOperationR !== null) {\n        emit(monthName + 'Lateral', 1);\n      }\n      if (doc.TypeofOperationL !== null && doc.TypeofOperationR === null) {\n        emit(monthName + 'Lateral', 1);\n      }\n      if (doc.TypeofOperationL !== null && doc.TypeofOperationR !== null) {\n        return emit(monthName + 'BiLateral', 1);\n      }\n    }\n  }\n});"
        }
      }
    }
  ]
}